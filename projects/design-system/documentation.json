{
    "pipes": [
        {
            "name": "BytePipe",
            "id": "pipe-BytePipe-1f8130a7c27ee5406e3cec5162f41be89d7a71f694d56e7ef720ab22ea8134455de34cb157b6cccc6131a0dfd35e33a4faa145addbb7e4b9acc2c0d1e461272d",
            "file": "projects/design-system/src/lib/pipes/byte.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'MB'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'MB'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "byte",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\r\n\r\n\r\n@Pipe({\r\n    name: 'byte',\r\n})\r\nexport class BytePipe implements PipeTransform {\r\n    public transform(bytes: number, format: string = 'MB'): string {\r\n        if (format === 'KB') {\r\n            return (bytes / 1024).toFixed(2) + ' KB';\r\n        } else if (format === 'MB') {\r\n            return (bytes / (1024 * 1024)).toFixed(2) + ' MB';\r\n        } else if (format === 'GB') {\r\n            return (bytes / (1024 * 1024 * 1024)).toFixed(2) + ' GB';\r\n        } else if (format === 'TB') {\r\n            return (bytes / (1024 * 1024 * 1024 * 1024)).toFixed(2) + ' TB';\r\n        } else {\r\n            return bytes.toFixed(2) + ' B';\r\n        }\r\n    }\r\n}"
        },
        {
            "name": "SafePipe",
            "id": "pipe-SafePipe-196a9b70cdecd524d85f19244c92a7099c1f3846a073fc44e16d1dfd4cef7df4b793fa6b620a6da1e112cd170a0f95c9d3c9b7a50b8e129cdfb418b25e2dc517",
            "file": "projects/design-system/src/lib/pipes/safe.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "safe",
            "sourceCode": "import { Pipe, PipeTransform, SecurityContext } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml, SafeStyle, SafeScript, SafeUrl, SafeResourceUrl } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n    name: 'safe',\r\n})\r\nexport class SafePipe implements PipeTransform {\r\n    constructor(protected sanitizer: DomSanitizer) { }\r\n    public transform(value: any, type: string): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\r\n        switch (type) {\r\n            case 'html':\r\n                value = this.sanitizer.sanitize(SecurityContext.HTML, value);\r\n                /* if (value.includes('src'))\r\n                value = this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, value); */\r\n\r\n                return this.sanitizer.bypassSecurityTrustHtml(value);\r\n            case 'html-clean':\r\n                return this.sanitizer.bypassSecurityTrustHtml(value);\r\n            case 'style':\r\n                return this.sanitizer.bypassSecurityTrustStyle(value);\r\n            case 'script':\r\n                return this.sanitizer.bypassSecurityTrustScript(value);\r\n            case 'url':\r\n                return this.sanitizer.bypassSecurityTrustUrl(value);\r\n            case 'resourceUrl':\r\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\r\n            default:\r\n                throw new Error(`Invalid safe type specified: ${type}`);\r\n        }\r\n    }\r\n}"
        }
    ],
    "interfaces": [
        {
            "name": "AccordionData",
            "id": "interface-AccordionData-5f604f91cff01992564d0cd5dcbfa591d9a07a3b5c2ea28754a41c8188a80d4185881da6a52d307a216189c66f288a69cd121af9f6c7fbbb06b926f087c7f77e",
            "file": "projects/design-system/src/lib/atoms/accordion/models/accordion.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AccordionData {\r\n    header: string,\r\n    [x: string]: string\r\n}\r\n",
            "properties": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-5f604f91cff01992564d0cd5dcbfa591d9a07a3b5c2ea28754a41c8188a80d4185881da6a52d307a216189c66f288a69cd121af9f6c7fbbb06b926f087c7f77e",
                    "args": [
                        {
                            "name": "x",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "Breadcrumb",
            "id": "interface-Breadcrumb-a95cb17c911e901c1b2f63dde04eb8f7f652ac7bb9ccf27c7f9f745d1a89644f2b006ae0d4e2f2dc629a8e77f1c44dacddc025eafc032146aa9a7c79d6aeab52",
            "file": "projects/design-system/src/lib/atoms/breadcrumb/models/breadcrumb.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export class BreadcrumbModel {\r\n    name: string = '';\r\n    active: boolean = false;\r\n    link: string = '';\r\n}\r\n\r\nexport interface Breadcrumb {\r\n    /**\r\n     * actual route path with resolved param. Ex /mentor/2, connect/edit\r\n     */\r\n    routeLink?: string;\r\n    /**\r\n     * route with path params converted to a RegExp\r\n     * path '/mentor/:id' becomes routeRegex '/mentor/[^/]+', which can be matched against when needed\r\n     */\r\n    routeRegex?: string;\r\n    /**\r\n     * This is additional info on each breadcrumb item whether label is auto generated or user specified\r\n     * isAutoGeneratedLabel has to be present at component level but not at the service,\r\n     * since we may need to support multiple breadcrumb components in same app\r\n     */\r\n    isAutoGeneratedLabel?: boolean;\r\n    /**\r\n     * Query params in string form.\r\n     */\r\n    queryParams?: any;\r\n    fragment?: string;\r\n    routeInterceptor?: (routeLink: string, breadcrumb: Breadcrumb) => string;\r\n}\r\n\r\nexport interface BreadcrumbObject {\r\n    /**\r\n     * breadcrumb label for a route\r\n     */\r\n    label?: string | BreadcrumbFunction;\r\n    /**\r\n     * unique alias name for a route path that can be used to dynamically update a route's breadcrumb label via breadcrumbService.set()\r\n     */\r\n    alias?: string;\r\n    /**\r\n     * hide or show the breadcrumb item\r\n     */\r\n    skip?: boolean;\r\n    /**\r\n     * disable a certain breadcrumb in the list. Not clickable.\r\n     * It may be needed when the routing has the path, but navigating to that path is of no use\r\n     */\r\n    disable?: boolean;\r\n    /**\r\n     * custom data for each breadcrumb that is passed back to ng-template\r\n     */\r\n    info?: any;\r\n    /**\r\n     * Interceptor for breadcrumb click action that returns the dynamic path\r\n     * Consumers can change the breadcrumb routing dynamically with this approach\r\n     */\r\n    routeInterceptor?: (routeLink: string, breadcrumb: Breadcrumb) => string;\r\n}\r\n\r\n// resolved label for a route can further be enhanced based on a function\r\nexport type BreadcrumbFunction = (resolvedLabel?: string) => string;",
            "properties": [
                {
                    "name": "fragment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isAutoGeneratedLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>This is additional info on each breadcrumb item whether label is auto generated or user specified\nisAutoGeneratedLabel has to be present at component level but not at the service,\nsince we may need to support multiple breadcrumb components in same app</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nThis is additional info on each breadcrumb item whether label is auto generated or user specified\nisAutoGeneratedLabel has to be present at component level but not at the service,\nsince we may need to support multiple breadcrumb components in same app\n"
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "<p>Query params in string form.</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nQuery params in string form.\n"
                },
                {
                    "name": "routeInterceptor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "routeLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>actual route path with resolved param. Ex /mentor/2, connect/edit</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nactual route path with resolved param. Ex /mentor/2, connect/edit\n"
                },
                {
                    "name": "routeRegex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>route with path params converted to a RegExp\npath &#39;/mentor/:id&#39; becomes routeRegex &#39;/mentor/[^/]+&#39;, which can be matched against when needed</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nroute with path params converted to a RegExp\npath '/mentor/:id' becomes routeRegex '/mentor/[^/]+', which can be matched against when needed\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BreadcrumbObject",
            "id": "interface-BreadcrumbObject-a95cb17c911e901c1b2f63dde04eb8f7f652ac7bb9ccf27c7f9f745d1a89644f2b006ae0d4e2f2dc629a8e77f1c44dacddc025eafc032146aa9a7c79d6aeab52",
            "file": "projects/design-system/src/lib/atoms/breadcrumb/models/breadcrumb.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export class BreadcrumbModel {\r\n    name: string = '';\r\n    active: boolean = false;\r\n    link: string = '';\r\n}\r\n\r\nexport interface Breadcrumb {\r\n    /**\r\n     * actual route path with resolved param. Ex /mentor/2, connect/edit\r\n     */\r\n    routeLink?: string;\r\n    /**\r\n     * route with path params converted to a RegExp\r\n     * path '/mentor/:id' becomes routeRegex '/mentor/[^/]+', which can be matched against when needed\r\n     */\r\n    routeRegex?: string;\r\n    /**\r\n     * This is additional info on each breadcrumb item whether label is auto generated or user specified\r\n     * isAutoGeneratedLabel has to be present at component level but not at the service,\r\n     * since we may need to support multiple breadcrumb components in same app\r\n     */\r\n    isAutoGeneratedLabel?: boolean;\r\n    /**\r\n     * Query params in string form.\r\n     */\r\n    queryParams?: any;\r\n    fragment?: string;\r\n    routeInterceptor?: (routeLink: string, breadcrumb: Breadcrumb) => string;\r\n}\r\n\r\nexport interface BreadcrumbObject {\r\n    /**\r\n     * breadcrumb label for a route\r\n     */\r\n    label?: string | BreadcrumbFunction;\r\n    /**\r\n     * unique alias name for a route path that can be used to dynamically update a route's breadcrumb label via breadcrumbService.set()\r\n     */\r\n    alias?: string;\r\n    /**\r\n     * hide or show the breadcrumb item\r\n     */\r\n    skip?: boolean;\r\n    /**\r\n     * disable a certain breadcrumb in the list. Not clickable.\r\n     * It may be needed when the routing has the path, but navigating to that path is of no use\r\n     */\r\n    disable?: boolean;\r\n    /**\r\n     * custom data for each breadcrumb that is passed back to ng-template\r\n     */\r\n    info?: any;\r\n    /**\r\n     * Interceptor for breadcrumb click action that returns the dynamic path\r\n     * Consumers can change the breadcrumb routing dynamically with this approach\r\n     */\r\n    routeInterceptor?: (routeLink: string, breadcrumb: Breadcrumb) => string;\r\n}\r\n\r\n// resolved label for a route can further be enhanced based on a function\r\nexport type BreadcrumbFunction = (resolvedLabel?: string) => string;",
            "properties": [
                {
                    "name": "alias",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>unique alias name for a route path that can be used to dynamically update a route&#39;s breadcrumb label via breadcrumbService.set()</p>\n",
                    "line": 39,
                    "rawdescription": "\n\nunique alias name for a route path that can be used to dynamically update a route's breadcrumb label via breadcrumbService.set()\n"
                },
                {
                    "name": "disable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>disable a certain breadcrumb in the list. Not clickable.\nIt may be needed when the routing has the path, but navigating to that path is of no use</p>\n",
                    "line": 48,
                    "rawdescription": "\n\ndisable a certain breadcrumb in the list. Not clickable.\nIt may be needed when the routing has the path, but navigating to that path is of no use\n"
                },
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "<p>custom data for each breadcrumb that is passed back to ng-template</p>\n",
                    "line": 52,
                    "rawdescription": "\n\ncustom data for each breadcrumb that is passed back to ng-template\n"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | BreadcrumbFunction",
                    "optional": true,
                    "description": "<p>breadcrumb label for a route</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nbreadcrumb label for a route\n"
                },
                {
                    "name": "routeInterceptor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Interceptor for breadcrumb click action that returns the dynamic path\nConsumers can change the breadcrumb routing dynamically with this approach</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nInterceptor for breadcrumb click action that returns the dynamic path\nConsumers can change the breadcrumb routing dynamically with this approach\n"
                },
                {
                    "name": "skip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>hide or show the breadcrumb item</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nhide or show the breadcrumb item\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CheckBox",
            "id": "interface-CheckBox-eb6df83d2b0e724b08c9b8fb5574044c81e692553569c300462c6ac17a54871b3d29e5053b580940035ff239467e09b4c6bffe5085d924622bebfe6b97216c50",
            "file": "projects/design-system/src/lib/atoms/checkbox/models/checkbox.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CheckBox {\r\n    data?: string | number,\r\n    label: string,\r\n    checked?: boolean,\r\n    disabled?: boolean\r\n}",
            "properties": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Cols",
            "id": "interface-Cols-38e5ab155cb47935d4ee803eab2f945af2dccf285e0fb93ac0e309d487e19e7a22573144194792840e7ac37d2cef04b0dbc17cf24c613aa2db209438a98087dd",
            "file": "projects/design-system/src/lib/molecole/table/models/table.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type ActionTable = {\r\n    label: string;\r\n    command?: (row: any) => any;\r\n    items?: ActionTable[];\r\n    type?: string\r\n};\r\n\r\nexport type PaginatorData = {\r\n    first: number\r\n    rows: number;\r\n    totalRecords: number;\r\n}\r\n\r\nexport interface Cols {\r\n    header: string;\r\n    field: string;\r\n    sort?: boolean;\r\n    classes?: string;\r\n    selectable?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selectable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DropdownType",
            "id": "interface-DropdownType-c368bdc0f0a39947415e37ce3baebcd084a89e9a051b432a7ea3a56891bffba7fb28b475b1f041b5acde47e3afb983103e7ee8ddc5dc7a3c839534eda2c10988",
            "file": "projects/design-system/src/lib/atoms/dropdown/models/dropdown.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DropdownType {\r\n    name: string;\r\n    code: string;\r\n    disabled?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "File",
            "id": "interface-File-438e8c6b66ef44cfdfd82ca2cea805ced80fac5ca109b53c8bb3fff97fc734aa71e91bf49d38658cd87a69fb203232217ca3e0422658be80811688a44bd7070c",
            "file": "projects/design-system/src/lib/molecole/file/models/file.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface File {\r\n    title: string,\r\n    dimension?: string,\r\n}",
            "properties": [
                {
                    "name": "dimension",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FileStatus",
            "id": "interface-FileStatus-8bdfb078bbc7b7e142bc7cf74b6e5b5dd8ab4f7bdf13e9f7530328d3fe84343036428ceee7ee0c84e45ccfbc0f40c371fa01e49b3064442f5160b58b12f3f12a",
            "file": "projects/design-system/src/lib/molecole/file-status/models/fileStatus.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { File } from \"../../file/models/file.model\";\r\n\r\nexport interface FileStatus extends File {\r\n    status: string\r\n}",
            "properties": [
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "File"
            ]
        },
        {
            "name": "FileUpload",
            "id": "interface-FileUpload-0273e04426abfc9ef62660bec41a92630bc6aa27519fa384e762f414714b740e0844c88a2d53baebf0884003561becec8e7f669d680373602501bb01ea4edb3b",
            "file": "projects/design-system/src/lib/molecole/upload-file/models/file-upload.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { File } from \"../../file/models/file.model\";\r\n\r\nexport interface FileUpload extends File {\r\n    progress: number;\r\n}",
            "properties": [
                {
                    "name": "progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "File"
            ]
        },
        {
            "name": "FiltersChip",
            "id": "interface-FiltersChip-faf99a40a163e3e59f5a4a24443325af1e61be7e52d1942e17d45bf3989d1d4dda4ba3ef33fde888d486cbbb1f51cc7ca4a64051abe8317056e5443270b026b5",
            "file": "projects/design-system/src/lib/micro-organismi/filters/models/filters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TreeSelectModel } from \"../../../atoms/tree-select/models/tree-select.model\";\r\nimport { TreeMenu } from \"../../../atoms/treemenu/models/treemenu.model\";\r\n\r\n\r\n\r\nexport interface FiltersModel {\r\n  data?: FiltersData[],\r\n  placeholder: string,\r\n  field: string,\r\n  type: \"calendar\" | \"treeselect\" | \"children\" | \"dialog\" | 'dropdown',\r\n  selectionType?: \"single\" | \"multiple\" | \"checkbox\",\r\n  filter?: boolean,\r\n  addFilterButtonLabel?: string,\r\n  children?: any,\r\n  propagateSelection?: { down: boolean, up: boolean }\r\n}\r\n\r\nexport interface FiltersData extends TreeSelectModel {\r\n  type?: string,\r\n  disabled?: boolean,\r\n  enumValues?: TreeSelectModel[],\r\n  key?: string,\r\n  config?: {\r\n    [x: string]: any\r\n  }\r\n}\r\n\r\nexport interface OnlyFiltersModel {\r\n  id: number,\r\n  filters: FiltersModel[]\r\n}\r\n\r\nexport interface FiltersResult {\r\n  [x: string]: string[] | number[] | Date[];\r\n}\r\n\r\nexport interface FiltersChip {\r\n  chipsLabel: string,\r\n  dropdownIndex: number,\r\n  field: string,\r\n  data: string | number | Array<object>,\r\n  type: \"treeselect\" | \"calendar\" | 'children' | 'dialog' | 'dropdown',\r\n  value: string\r\n}\r\n\r\nexport interface OnlyFiltersChip {\r\n  id: number,\r\n  result: FiltersChip[],\r\n  data: any\r\n}\r\n",
            "properties": [
                {
                    "name": "chipsLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | Array<object>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "dropdownIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"treeselect\" | \"calendar\" | \"children\" | \"dialog\" | \"dropdown\"",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FiltersData",
            "id": "interface-FiltersData-faf99a40a163e3e59f5a4a24443325af1e61be7e52d1942e17d45bf3989d1d4dda4ba3ef33fde888d486cbbb1f51cc7ca4a64051abe8317056e5443270b026b5",
            "file": "projects/design-system/src/lib/micro-organismi/filters/models/filters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TreeSelectModel } from \"../../../atoms/tree-select/models/tree-select.model\";\r\nimport { TreeMenu } from \"../../../atoms/treemenu/models/treemenu.model\";\r\n\r\n\r\n\r\nexport interface FiltersModel {\r\n  data?: FiltersData[],\r\n  placeholder: string,\r\n  field: string,\r\n  type: \"calendar\" | \"treeselect\" | \"children\" | \"dialog\" | 'dropdown',\r\n  selectionType?: \"single\" | \"multiple\" | \"checkbox\",\r\n  filter?: boolean,\r\n  addFilterButtonLabel?: string,\r\n  children?: any,\r\n  propagateSelection?: { down: boolean, up: boolean }\r\n}\r\n\r\nexport interface FiltersData extends TreeSelectModel {\r\n  type?: string,\r\n  disabled?: boolean,\r\n  enumValues?: TreeSelectModel[],\r\n  key?: string,\r\n  config?: {\r\n    [x: string]: any\r\n  }\r\n}\r\n\r\nexport interface OnlyFiltersModel {\r\n  id: number,\r\n  filters: FiltersModel[]\r\n}\r\n\r\nexport interface FiltersResult {\r\n  [x: string]: string[] | number[] | Date[];\r\n}\r\n\r\nexport interface FiltersChip {\r\n  chipsLabel: string,\r\n  dropdownIndex: number,\r\n  field: string,\r\n  data: string | number | Array<object>,\r\n  type: \"treeselect\" | \"calendar\" | 'children' | 'dialog' | 'dropdown',\r\n  value: string\r\n}\r\n\r\nexport interface OnlyFiltersChip {\r\n  id: number,\r\n  result: FiltersChip[],\r\n  data: any\r\n}\r\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "enumValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeSelectModel[]",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "TreeSelectModel"
            ]
        },
        {
            "name": "FiltersModel",
            "id": "interface-FiltersModel-faf99a40a163e3e59f5a4a24443325af1e61be7e52d1942e17d45bf3989d1d4dda4ba3ef33fde888d486cbbb1f51cc7ca4a64051abe8317056e5443270b026b5",
            "file": "projects/design-system/src/lib/micro-organismi/filters/models/filters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TreeSelectModel } from \"../../../atoms/tree-select/models/tree-select.model\";\r\nimport { TreeMenu } from \"../../../atoms/treemenu/models/treemenu.model\";\r\n\r\n\r\n\r\nexport interface FiltersModel {\r\n  data?: FiltersData[],\r\n  placeholder: string,\r\n  field: string,\r\n  type: \"calendar\" | \"treeselect\" | \"children\" | \"dialog\" | 'dropdown',\r\n  selectionType?: \"single\" | \"multiple\" | \"checkbox\",\r\n  filter?: boolean,\r\n  addFilterButtonLabel?: string,\r\n  children?: any,\r\n  propagateSelection?: { down: boolean, up: boolean }\r\n}\r\n\r\nexport interface FiltersData extends TreeSelectModel {\r\n  type?: string,\r\n  disabled?: boolean,\r\n  enumValues?: TreeSelectModel[],\r\n  key?: string,\r\n  config?: {\r\n    [x: string]: any\r\n  }\r\n}\r\n\r\nexport interface OnlyFiltersModel {\r\n  id: number,\r\n  filters: FiltersModel[]\r\n}\r\n\r\nexport interface FiltersResult {\r\n  [x: string]: string[] | number[] | Date[];\r\n}\r\n\r\nexport interface FiltersChip {\r\n  chipsLabel: string,\r\n  dropdownIndex: number,\r\n  field: string,\r\n  data: string | number | Array<object>,\r\n  type: \"treeselect\" | \"calendar\" | 'children' | 'dialog' | 'dropdown',\r\n  value: string\r\n}\r\n\r\nexport interface OnlyFiltersChip {\r\n  id: number,\r\n  result: FiltersChip[],\r\n  data: any\r\n}\r\n",
            "properties": [
                {
                    "name": "addFilterButtonLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FiltersData[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "propagateSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selectionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"single\" | \"multiple\" | \"checkbox\"",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"calendar\" | \"treeselect\" | \"children\" | \"dialog\" | \"dropdown\"",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FiltersResult",
            "id": "interface-FiltersResult-faf99a40a163e3e59f5a4a24443325af1e61be7e52d1942e17d45bf3989d1d4dda4ba3ef33fde888d486cbbb1f51cc7ca4a64051abe8317056e5443270b026b5",
            "file": "projects/design-system/src/lib/micro-organismi/filters/models/filters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TreeSelectModel } from \"../../../atoms/tree-select/models/tree-select.model\";\r\nimport { TreeMenu } from \"../../../atoms/treemenu/models/treemenu.model\";\r\n\r\n\r\n\r\nexport interface FiltersModel {\r\n  data?: FiltersData[],\r\n  placeholder: string,\r\n  field: string,\r\n  type: \"calendar\" | \"treeselect\" | \"children\" | \"dialog\" | 'dropdown',\r\n  selectionType?: \"single\" | \"multiple\" | \"checkbox\",\r\n  filter?: boolean,\r\n  addFilterButtonLabel?: string,\r\n  children?: any,\r\n  propagateSelection?: { down: boolean, up: boolean }\r\n}\r\n\r\nexport interface FiltersData extends TreeSelectModel {\r\n  type?: string,\r\n  disabled?: boolean,\r\n  enumValues?: TreeSelectModel[],\r\n  key?: string,\r\n  config?: {\r\n    [x: string]: any\r\n  }\r\n}\r\n\r\nexport interface OnlyFiltersModel {\r\n  id: number,\r\n  filters: FiltersModel[]\r\n}\r\n\r\nexport interface FiltersResult {\r\n  [x: string]: string[] | number[] | Date[];\r\n}\r\n\r\nexport interface FiltersChip {\r\n  chipsLabel: string,\r\n  dropdownIndex: number,\r\n  field: string,\r\n  data: string | number | Array<object>,\r\n  type: \"treeselect\" | \"calendar\" | 'children' | 'dialog' | 'dropdown',\r\n  value: string\r\n}\r\n\r\nexport interface OnlyFiltersChip {\r\n  id: number,\r\n  result: FiltersChip[],\r\n  data: any\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-faf99a40a163e3e59f5a4a24443325af1e61be7e52d1942e17d45bf3989d1d4dda4ba3ef33fde888d486cbbb1f51cc7ca4a64051abe8317056e5443270b026b5",
                    "args": [
                        {
                            "name": "x",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "[] | [] | []",
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "Language",
            "id": "interface-Language-99ac8156771898b096e740a502dc743af6436e216ba5d61b91a7cc1b09be2ee87656c14d0f89d1678509bc7a9fb1ae9975ab7e7704b024896fbb0f1aef42c19a",
            "file": "projects/design-system/src/lib/molecole/header-items/models/language.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Language {\r\n\tname: string;\r\n\tcode: string;\r\n}",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LibAddress",
            "id": "interface-LibAddress-6a36e7cde9f465b3d40fab22ceaec5d6a49e91657d8ce05c0d59c45ee1edd713c368164119846c39f65fa068c815dcd3fd7d5acaa6fcffa1c67ff53a359a25f8",
            "file": "projects/design-system/src/lib/atoms/address/models/address.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LibAddress {\r\n    code: string | number,\r\n    name: string,\r\n    content: string\r\n}",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "link",
            "id": "interface-link-117d1b96f3dcf7ee6e9500cbf192de8504b43121eca6569804f5bf824232435d40278efd6cc038d03fe28942305f52c4ee75111d0e717e67b81351b978374432",
            "file": "projects/design-system/src/lib/molecole/header-items/models/menuItem.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MenuItem {\r\n  label: string;\r\n  items: link[];\r\n}\r\n\r\nexport interface link {\r\n  label: string;\r\n  path: string;\r\n  type: \"internal\" | \"external\";\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"internal\" | \"external\"",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MenubarItem",
            "id": "interface-MenubarItem-1fd3db49e899344a241101085449af76d3d2b1d03f2cd784a9e3c487bc8fba453e9797830063a70cd5b452c054f5db1a0538ca94966af07875245b93e733f8bb",
            "file": "projects/design-system/src/lib/molecole/header-menu/models/menu-item.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { QueryParamsHandling } from '@angular/router';\r\nexport interface MenubarItem {\r\n    label?: string;\r\n    icon?: string;\r\n    command?: (event?: any) => void;\r\n    url?: string;\r\n    items?: MenubarItem[];\r\n    expanded?: boolean;\r\n    disabled?: boolean;\r\n    visible?: boolean;\r\n    target?: string;\r\n    escape?: boolean;\r\n    routerLinkActiveOptions?: any;\r\n    separator?: boolean;\r\n    badge?: string;\r\n    tooltip?: string;\r\n    tooltipPosition?: string;\r\n    badgeStyleClass?: string;\r\n    style?: any;\r\n    styleClass?: string;\r\n    title?: string;\r\n    id?: string;\r\n    automationId?: any;\r\n    tabindex?: string;\r\n    routerLink?: any;\r\n    queryParams?: {\r\n        [k: string]: any;\r\n    };\r\n    fragment?: string;\r\n    queryParamsHandling?: QueryParamsHandling;\r\n    preserveFragment?: boolean;\r\n    skipLocationChange?: boolean;\r\n    replaceUrl?: boolean;\r\n    iconStyle?: any;\r\n    iconClass?: string;\r\n    state?: {\r\n        [k: string]: any;\r\n    };\r\n    tooltipOptions?: {\r\n        tooltipLabel?: string;\r\n        tooltipPosition?: string;\r\n        tooltipEvent?: string;\r\n        appendTo?: any;\r\n        positionStyle?: string;\r\n        tooltipStyleClass?: string;\r\n        tooltipZIndex?: string;\r\n        escape?: boolean;\r\n        disabled?: boolean;\r\n        positionTop?: number;\r\n        positionLeft?: number;\r\n        showDelay?: number;\r\n        hideDelay?: number;\r\n        life?: number;\r\n    };\r\n}\r\n",
            "properties": [
                {
                    "name": "automationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "badge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "badgeStyleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "escape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "fragment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "iconClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "iconStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenubarItem[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "preserveFragment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "queryParamsHandling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryParamsHandling",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "replaceUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "routerLinkActiveOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "separator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "skipLocationChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tabindex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "tooltipOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "tooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MenuItem",
            "id": "interface-MenuItem-117d1b96f3dcf7ee6e9500cbf192de8504b43121eca6569804f5bf824232435d40278efd6cc038d03fe28942305f52c4ee75111d0e717e67b81351b978374432",
            "file": "projects/design-system/src/lib/molecole/header-items/models/menuItem.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MenuItem {\r\n  label: string;\r\n  items: link[];\r\n}\r\n\r\nexport interface link {\r\n  label: string;\r\n  path: string;\r\n  type: \"internal\" | \"external\";\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "link[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Messages",
            "id": "interface-Messages-da89136df45fa0b5496dffeb0b938abcabe6bb5e8adb23f400c7c8d9caa1a39e741ced869fa8a2042a0d8f8c3a96b2d7dcf9f13b66a6797d89cb73fcf8c58cbd",
            "file": "projects/design-system/src/lib/molecole/messages/models/messages.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Message } from 'primeng/api';\r\n\r\ninterface Messages {\r\n    success: Message,\r\n    info: Message,\r\n    error: Message,\r\n    warn: Message,\r\n}\r\n\r\nexport const MESSAGES_GENERAL: Messages = {\r\n    success: { severity: 'success', summary: 'Titolo success', detail: 'Contenuto del messaggio success qui.' },\r\n    info: { severity: 'info', summary: 'Titolo info', detail: 'Contenuto del messaggio info qui.' },\r\n    error: { severity: 'error', summary: 'Titolo error', detail: 'Contenuto del messaggio error qui.' },\r\n    warn: { severity: 'warn', summary: 'Titolo warn', detail: 'Contenuto del messaggio warn qui.' },\r\n};\r\n\r\nexport const ALERTS_GENERAL: Messages = {\r\n    success: { severity: 'success', summary: 'Titolo success', detail: 'Contenuto del messaggio success qui.' },\r\n    info: { severity: 'info', summary: 'Titolo info', detail: 'Contenuto del messaggio info qui.' },\r\n    error: { severity: 'error', summary: 'Titolo error', detail: 'Contenuto del messaggio error qui.' },\r\n    warn: { severity: 'warn', summary: 'Titolo warn', detail: 'Contenuto del messaggio warn qui.' },\r\n};\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "warn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "OnlyFiltersChip",
            "id": "interface-OnlyFiltersChip-faf99a40a163e3e59f5a4a24443325af1e61be7e52d1942e17d45bf3989d1d4dda4ba3ef33fde888d486cbbb1f51cc7ca4a64051abe8317056e5443270b026b5",
            "file": "projects/design-system/src/lib/micro-organismi/filters/models/filters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TreeSelectModel } from \"../../../atoms/tree-select/models/tree-select.model\";\r\nimport { TreeMenu } from \"../../../atoms/treemenu/models/treemenu.model\";\r\n\r\n\r\n\r\nexport interface FiltersModel {\r\n  data?: FiltersData[],\r\n  placeholder: string,\r\n  field: string,\r\n  type: \"calendar\" | \"treeselect\" | \"children\" | \"dialog\" | 'dropdown',\r\n  selectionType?: \"single\" | \"multiple\" | \"checkbox\",\r\n  filter?: boolean,\r\n  addFilterButtonLabel?: string,\r\n  children?: any,\r\n  propagateSelection?: { down: boolean, up: boolean }\r\n}\r\n\r\nexport interface FiltersData extends TreeSelectModel {\r\n  type?: string,\r\n  disabled?: boolean,\r\n  enumValues?: TreeSelectModel[],\r\n  key?: string,\r\n  config?: {\r\n    [x: string]: any\r\n  }\r\n}\r\n\r\nexport interface OnlyFiltersModel {\r\n  id: number,\r\n  filters: FiltersModel[]\r\n}\r\n\r\nexport interface FiltersResult {\r\n  [x: string]: string[] | number[] | Date[];\r\n}\r\n\r\nexport interface FiltersChip {\r\n  chipsLabel: string,\r\n  dropdownIndex: number,\r\n  field: string,\r\n  data: string | number | Array<object>,\r\n  type: \"treeselect\" | \"calendar\" | 'children' | 'dialog' | 'dropdown',\r\n  value: string\r\n}\r\n\r\nexport interface OnlyFiltersChip {\r\n  id: number,\r\n  result: FiltersChip[],\r\n  data: any\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FiltersChip[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "OnlyFiltersModel",
            "id": "interface-OnlyFiltersModel-faf99a40a163e3e59f5a4a24443325af1e61be7e52d1942e17d45bf3989d1d4dda4ba3ef33fde888d486cbbb1f51cc7ca4a64051abe8317056e5443270b026b5",
            "file": "projects/design-system/src/lib/micro-organismi/filters/models/filters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TreeSelectModel } from \"../../../atoms/tree-select/models/tree-select.model\";\r\nimport { TreeMenu } from \"../../../atoms/treemenu/models/treemenu.model\";\r\n\r\n\r\n\r\nexport interface FiltersModel {\r\n  data?: FiltersData[],\r\n  placeholder: string,\r\n  field: string,\r\n  type: \"calendar\" | \"treeselect\" | \"children\" | \"dialog\" | 'dropdown',\r\n  selectionType?: \"single\" | \"multiple\" | \"checkbox\",\r\n  filter?: boolean,\r\n  addFilterButtonLabel?: string,\r\n  children?: any,\r\n  propagateSelection?: { down: boolean, up: boolean }\r\n}\r\n\r\nexport interface FiltersData extends TreeSelectModel {\r\n  type?: string,\r\n  disabled?: boolean,\r\n  enumValues?: TreeSelectModel[],\r\n  key?: string,\r\n  config?: {\r\n    [x: string]: any\r\n  }\r\n}\r\n\r\nexport interface OnlyFiltersModel {\r\n  id: number,\r\n  filters: FiltersModel[]\r\n}\r\n\r\nexport interface FiltersResult {\r\n  [x: string]: string[] | number[] | Date[];\r\n}\r\n\r\nexport interface FiltersChip {\r\n  chipsLabel: string,\r\n  dropdownIndex: number,\r\n  field: string,\r\n  data: string | number | Array<object>,\r\n  type: \"treeselect\" | \"calendar\" | 'children' | 'dialog' | 'dropdown',\r\n  value: string\r\n}\r\n\r\nexport interface OnlyFiltersChip {\r\n  id: number,\r\n  result: FiltersChip[],\r\n  data: any\r\n}\r\n",
            "properties": [
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FiltersModel[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PageEvent",
            "id": "interface-PageEvent-3e32c717230bc92f84e4bb8842ee3f9bf8e869903f3f609213b87cf335ea1eab0000d0d44569809de6765322dfc61ddbfb079910d74ab587ea2047b85cab9b90",
            "file": "projects/design-system/src/lib/atoms/paginator/models/paginator.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PageEvent {\r\n  first: number;\r\n  rows: number;\r\n  page: number;\r\n  pageCount: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pageCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RadioModel",
            "id": "interface-RadioModel-689fd21ffd5311a1a548153c43a6817968bc5eef7157e4918fca65ee362d6c4544cc3eed1d3478431ed85db8c866036a6d2947c4253c4625504676ce77ae441a",
            "file": "projects/design-system/src/lib/atoms/radio-button/models/radio.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RadioModel {\r\n    label: string,\r\n    data: string | number\r\n}",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RadioTile",
            "id": "interface-RadioTile-6d53a77bc1db460e7b4b06e8126dc1dac4b24001c606d033af206bceb60fc7be9850de4d07621d14fa341cc1d9e378509a26b69725a499fa5de8a98e78e16517",
            "file": "projects/design-system/src/lib/molecole/radio-tile/models/radio-tile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RadioTile {\r\n    id: number,\r\n    showHeaderAction: boolean,\r\n    title: string,\r\n    content: string,\r\n    radio: {\r\n        radioName: string,\r\n        radioValue: string,\r\n        radioDisabled: boolean,\r\n    }\r\n    [x: string]: any\r\n}",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "radio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "showHeaderAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-6d53a77bc1db460e7b4b06e8126dc1dac4b24001c606d033af206bceb60fc7be9850de4d07621d14fa341cc1d9e378509a26b69725a499fa5de8a98e78e16517",
                    "args": [
                        {
                            "name": "x",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "SidebarItem",
            "id": "interface-SidebarItem-b4addc475d6cbca9f5a292abffd6f0033e6e4a33f50947c36d15203cea071fc11f7a3e197321842aa09f0c681e263e850535693b2a6c0d0d404c6befc0edb808",
            "file": "projects/design-system/src/lib/atoms/sidebar/models/sidebar-item.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { QueryParamsHandling } from '@angular/router';\r\nexport interface SidebarItem {\r\n    label?: string;\r\n    icon?: string;\r\n    command?: (event?: any) => void;\r\n    url?: string;\r\n    items?: SidebarItem[];\r\n    expanded?: boolean;\r\n    disabled?: boolean;\r\n    visible?: boolean;\r\n    target?: string;\r\n    escape?: boolean;\r\n    routerLinkActiveOptions?: any;\r\n    separator?: boolean;\r\n    badge?: string;\r\n    tooltip?: string;\r\n    tooltipPosition?: string;\r\n    badgeStyleClass?: string;\r\n    style?: any;\r\n    styleClass?: string;\r\n    title?: string;\r\n    id?: string;\r\n    automationId?: any;\r\n    tabindex?: string;\r\n    routerLink?: any;\r\n    queryParams?: {\r\n        [k: string]: any;\r\n    };\r\n    fragment?: string;\r\n    queryParamsHandling?: QueryParamsHandling;\r\n    preserveFragment?: boolean;\r\n    skipLocationChange?: boolean;\r\n    replaceUrl?: boolean;\r\n    iconStyle?: any;\r\n    iconClass?: string;\r\n    state?: {\r\n        [k: string]: any;\r\n    };\r\n    tooltipOptions?: {\r\n        tooltipLabel?: string;\r\n        tooltipPosition?: string;\r\n        tooltipEvent?: string;\r\n        appendTo?: any;\r\n        positionStyle?: string;\r\n        tooltipStyleClass?: string;\r\n        tooltipZIndex?: string;\r\n        escape?: boolean;\r\n        disabled?: boolean;\r\n        positionTop?: number;\r\n        positionLeft?: number;\r\n        showDelay?: number;\r\n        hideDelay?: number;\r\n        life?: number;\r\n    };\r\n}",
            "properties": [
                {
                    "name": "automationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "badge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "badgeStyleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "escape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "fragment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "iconClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "iconStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SidebarItem[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "preserveFragment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "queryParamsHandling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryParamsHandling",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "replaceUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "routerLinkActiveOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "separator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "skipLocationChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tabindex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "tooltipOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "tooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Tabs",
            "id": "interface-Tabs-d903bb24fa363113b2913a4410e4ef698c909863cb3a3ed7d6993128ca19a4926c96537c8b81c62d6c3b6f9c4955bbde51f8c3b152b119961b75d26ad37cb11b",
            "file": "projects/design-system/src/lib/atoms/tabs/models/tabs.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Tabs {\r\n    content?: string,\r\n    isDisabled: boolean,\r\n    header: string,\r\n    isSelected: boolean,\r\n    hide?: boolean\r\n}",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "hide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TreeMenu",
            "id": "interface-TreeMenu-cd22df268278958eb3e444f71150b18ed48c61d9a721bdcf82209855159f11f2c50c35b9e92f3881a3733c6066a193a2c4bf45f53099ff5d52708f8bdd6c855f",
            "file": "projects/design-system/src/lib/atoms/treemenu/models/treemenu.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TreeNode } from 'primeng/api';\r\n\r\nexport interface TreeMenu extends TreeNode {\r\n\r\n}",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "TreeNode"
            ]
        },
        {
            "name": "TreeSelectModel",
            "id": "interface-TreeSelectModel-0da70be7a2f000da9745865431531d38a6b705ddbe976175b613a9ea8e0cad282f11ac8a7f8ea638c446d9d15cd49e9c2a49e97e446a5bdb1f607bb47f733b0d",
            "file": "projects/design-system/src/lib/atoms/tree-select/models/tree-select.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TreeSelectModel {\r\n    label: string,\r\n    data: string | number,\r\n    expanded?: boolean,\r\n    draggable?: boolean,\r\n    selectable?: boolean,\r\n    children?: TreeSelectModel[]\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeSelectModel[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "draggable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "selectable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UserNotification",
            "id": "interface-UserNotification-a7d11e9045e74d79e8a0e4385df81e82d28789a0317b135a3dad1b2d87e01376dca2ea724f28dbefa1437fe41fe13d88e7507eeeb2c66eed676c516f6d4b70ff",
            "file": "projects/design-system/src/lib/molecole/header-items/models/user-notification.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserNotification {\r\n    title: string,\r\n    subtitle?: string,\r\n    id?: number, // parametro della rotta verso cui andare per leggere le notifiche\r\n    isRead: boolean, // true se la notifica è stata già cliccata, false altrimenti\r\n    url?: string,\r\n    date?: Date,\r\n    [x: string]: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isRead",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-a7d11e9045e74d79e8a0e4385df81e82d28789a0317b135a3dad1b2d87e01376dca2ea724f28dbefa1437fe41fe13d88e7507eeeb2c66eed676c516f6d4b70ff",
                    "args": [
                        {
                            "name": "x",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "BreadcrumbService",
            "id": "injectable-BreadcrumbService-89e127c52371244b06b9d7f2c1235c92d4f165bc193ec47b69d1fce45647268478d89874029a93a22246851d5e03a7025feda8811f3c3eaacd35c2f2878dea98",
            "file": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
            "properties": [
                {
                    "name": "baseHref",
                    "defaultValue": "'/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "breadcrumbs",
                    "defaultValue": "new BehaviorSubject<BreadcrumbDefinition[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Breadcrumbs observable to be subscribed by BreadcrumbComponent\nEmits on every route change OR dynamic update of breadcrumb</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nBreadcrumbs observable to be subscribed by BreadcrumbComponent\nEmits on every route change OR dynamic update of breadcrumb\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "breadcrumbs$",
                    "defaultValue": "this.breadcrumbs.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentBreadcrumbs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BreadcrumbDefinition[]",
                    "optional": false,
                    "description": "<p>breadcrumbList for the current route\nWhen breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\nIf effected, update the change and emit a new stream</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nbreadcrumbList for the current route\nWhen breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\nIf effected, update the change and emit a new stream\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dynamicBreadcrumbStore",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BreadcrumbDefinition[]",
                    "optional": false,
                    "description": "<p>dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\nBreadcrumbs can be set from anywhere (component, service) in the app.\nOn every breadcrumb update check this store and use the info if available.</p>\n",
                    "line": 30,
                    "rawdescription": "\n\ndynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\nBreadcrumbs can be set from anywhere (component, service) in the app.\nOn every breadcrumb update check this store and use the info if available.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "previousBreadcrumbs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BreadcrumbDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "buildRegex",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 373,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFor a route with path param, we create regex dynamically from angular route syntax\n'/mentor/:id' becomes '/mentor/[^/]',\nbreadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n",
                    "description": "<p>For a route with path param, we create regex dynamically from angular route syntax\n&#39;/mentor/:id&#39; becomes &#39;/mentor/[^/]&#39;,\nbreadcrumbService.set(&#39;/mentor/:id&#39;, &#39;Uday&#39;) should update &#39;Uday&#39; as label for &#39;/mentor/2&#39; OR &#39;mentor/ada&#39;</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "detectRouteChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhenever route changes build breadcrumb list again\n",
                    "description": "<p>Whenever route changes build breadcrumb list again</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ensureLeadingSlash",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 380,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extractLabel",
                    "args": [
                        {
                            "name": "config",
                            "type": "BreadcrumbConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "resolvedParam",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 391,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIn App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n\nstring: simple static breadcrumb label for a path\nfunction: callback that gets invoked with resolved path param\nobject: additional data defined along with breadcrumb label that gets passed to *breadcrumbItem directive\n",
                    "description": "<p>In App&#39;s RouteConfig, breadcrumb can be defined as a string OR a function OR an object</p>\n<p>string: simple static breadcrumb label for a path\nfunction: callback that gets invoked with resolved path param\nobject: additional data defined along with breadcrumb label that gets passed to *breadcrumbItem directive</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "BreadcrumbConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resolvedParam",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extractObject",
                    "args": [
                        {
                            "name": "config",
                            "type": "BreadcrumbConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BreadcrumbObject",
                    "typeParameters": [],
                    "line": 399,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "BreadcrumbConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFromStore",
                    "args": [
                        {
                            "name": "alias",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "routeLink",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BreadcrumbDefinition",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "alias",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "routeLink",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getQueryParamsFromPreviousList",
                    "args": [
                        {
                            "name": "routeLink",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Breadcrumb",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nqueryParams & fragments for previous breadcrumb path are copied over to new list\n",
                    "description": "<p>queryParams &amp; fragments for previous breadcrumb path are copied over to new list</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "routeLink",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRootBreadcrumb",
                    "args": [],
                    "optional": false,
                    "returnType": "Breadcrumb | void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "matchRegex",
                    "args": [
                        {
                            "name": "routeLink",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "routeRegex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nuse exact match instead of regexp.test\nfor /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n",
                    "description": "<p>use exact match instead of regexp.test\nfor /mentor/[^/]+ we should match &#39;/mentor/12&#39; but not &#39;/mentor/12/abc&#39;</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "routeLink",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "routeRegex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mergeWithBaseChildData",
                    "args": [
                        {
                            "name": "routeConfig",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "BreadcrumbConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BreadcrumbObject",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nget empty children of a module or Component. Empty child is the one with path: ''\nWhen parent and it's children (that has empty route path) define data merge them both with child taking precedence\n",
                    "description": "<p>get empty children of a module or Component. Empty child is the one with path: &#39;&#39;\nWhen parent and it&#39;s children (that has empty route path) define data merge them both with child taking precedence</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "routeConfig",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "BreadcrumbConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseRouteData",
                    "args": [
                        {
                            "name": "routeConfig",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ path: any; breadcrumb: BreadcrumbObject; }",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFor a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\nWhen both are defined, child takes precedence\n\nEx: Below we are setting breadcrumb on both parent and child.\nSo, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n{ path: 'home', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule) , data: {breadcrumb: \"Defined On Module\"}}\n                                               AND\nchildren: [\n  { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n]\n",
                    "description": "<p>For a specific route, breadcrumb can be defined either on parent OR it&#39;s child(which has empty path)\nWhen both are defined, child takes precedence</p>\n<p>Ex: Below we are setting breadcrumb on both parent and child.\nSo, child takes precedence and &quot;Defined On Child&quot; is displayed for the route &#39;home&#39;\n{ path: &#39;home&#39;, loadChildren: () =&gt; import(&#39;./home/home.module&#39;).then((m) =&gt; m.HomeModule) , data: {breadcrumb: &quot;Defined On Module&quot;}}\n                                               AND\nchildren: [\n  { path: &#39;&#39;, component: ShowUserComponent, data: {breadcrumb: &quot;Defined On Child&quot; }\n]</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "routeConfig",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prepareBreadcrumbItem",
                    "args": [
                        {
                            "name": "activatedRouteSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "routeLinkPrefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BreadcrumbDefinition",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "activatedRouteSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "routeLinkPrefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prepareBreadcrumbList",
                    "args": [
                        {
                            "name": "activatedRouteSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "routeLinkPrefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "activatedRouteSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "routeLinkPrefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolvePathSegment",
                    "args": [
                        {
                            "name": "segment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activatedRouteSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nif the path segment has route params, read the param value from url\nfor each segment of route this gets called\n\nfor mentor/:id/view - it gets called with mentor, :id, view 3 times\n",
                    "description": "<p>if the path segment has route params, read the param value from url\nfor each segment of route this gets called</p>\n<p>for mentor/:id/view - it gets called with mentor, :id, view 3 times</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "segment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activatedRouteSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "breadcrumb",
                            "type": "string | BreadcrumbObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate breadcrumb dynamically\n\nkey can be a path | alias\n\n1) Using complete route path. route can be passed the same way you define angular routes\n- path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n- update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n- change visibility Ex: set('/mentor/:id/edit', { skip: true })\n------------------------------------------ OR ------------------------------------------\n2) Using route alias (prefixed with '@'). alias should be unique for a route\n- update label Ex: set('@mentor', 'Enabler')\n- change visibility Ex: set('@mentorEdit', { skip: true })\n\n\nvalue can be string | BreadcrumbObject | BreadcrumbFunction\n",
                    "description": "<p>Update breadcrumb dynamically</p>\n<p>key can be a path | alias</p>\n<ol>\n<li>Using complete route path. route can be passed the same way you define angular routes</li>\n</ol>\n<ul>\n<li>path can be passed as &#39;exact path(routeLink)&#39; or &#39;path with params(routeRegex)&#39;</li>\n<li>update label Ex: set(&#39;/mentor&#39;, &#39;Mentor&#39;), set(&#39;/mentor/:id&#39;, &#39;Mentor Details&#39;)</li>\n<li>change visibility Ex: set(&#39;/mentor/:id/edit&#39;, { skip: true })\n------------------------------------------ OR ------------------------------------------</li>\n</ul>\n<ol start=\"2\">\n<li>Using route alias (prefixed with &#39;@&#39;). alias should be unique for a route</li>\n</ol>\n<ul>\n<li>update label Ex: set(&#39;@mentor&#39;, &#39;Enabler&#39;)</li>\n<li>change visibility Ex: set(&#39;@mentorEdit&#39;, { skip: true })</li>\n</ul>\n<p>value can be string | BreadcrumbObject | BreadcrumbFunction</p>\n",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "breadcrumb",
                            "type": "string | BreadcrumbObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setQueryParamsForActiveBreadcrumb",
                    "args": [
                        {
                            "name": "lastItem",
                            "type": "Breadcrumb",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activatedRouteSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset current activated route query params to the last breadcrumb item\n",
                    "description": "<p>set current activated route query params to the last breadcrumb item</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "lastItem",
                            "type": "Breadcrumb",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activatedRouteSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupBreadcrumbs",
                    "args": [
                        {
                            "name": "activatedRouteSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "activatedRouteSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCurrentBreadcrumbs",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "breadcrumb",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 347,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf breadcrumb is present in current breadcrumbs update it and emit new stream\n",
                    "description": "<p>If breadcrumb is present in current breadcrumbs update it and emit new stream</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "breadcrumb",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateStore",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "breadcrumb",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 330,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the store to reuse for dynamic declarations\nIf the store already has this route definition update it, else add\n",
                    "description": "<p>Update the store to reuse for dynamic declarations\nIf the store already has this route definition update it, else add</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "breadcrumb",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, ActivatedRouteSnapshot, GuardsCheckEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, filter } from 'rxjs';\r\nimport { Breadcrumb, BreadcrumbFunction, BreadcrumbObject } from '../models/breadcrumb.model';\r\n\r\ntype BreadcrumbConfig = BreadcrumbObject | BreadcrumbFunction | string;\r\ntype StoreMatcherKey = 'routeLink' | 'routeRegex' | 'alias';\r\nexport type BreadcrumbDefinition = Breadcrumb & BreadcrumbObject;\r\nconst PATH_PARAM = {\r\n    PREFIX: ':',\r\n    REGEX_IDENTIFIER: '/:[^/]+',\r\n    REGEX_REPLACER: '/[^/]+',\r\n};\r\nconst ALIAS_PREFIX = '@';\r\nconst isNotEmpty = (obj: any): boolean => {\r\n    return obj && Object.keys(obj).length > 0;\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class BreadcrumbService {\r\n    private baseHref = '/';\r\n\r\n    /**\r\n     * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\r\n     * Breadcrumbs can be set from anywhere (component, service) in the app.\r\n     * On every breadcrumb update check this store and use the info if available.\r\n     */\r\n    private dynamicBreadcrumbStore: BreadcrumbDefinition[] = [];\r\n\r\n    /**\r\n     * breadcrumbList for the current route\r\n     * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\r\n     * If effected, update the change and emit a new stream\r\n     */\r\n    private currentBreadcrumbs: BreadcrumbDefinition[] = [];\r\n    private previousBreadcrumbs: BreadcrumbDefinition[] = [];\r\n\r\n    /**\r\n     * Breadcrumbs observable to be subscribed by BreadcrumbComponent\r\n     * Emits on every route change OR dynamic update of breadcrumb\r\n     */\r\n    private breadcrumbs = new BehaviorSubject<BreadcrumbDefinition[]>([]);\r\n    public breadcrumbs$ = this.breadcrumbs.asObservable();\r\n\r\n    constructor(private activatedRoute: ActivatedRoute, private router: Router) {\r\n        this.detectRouteChanges();\r\n    }\r\n\r\n    /**\r\n     * Whenever route changes build breadcrumb list again\r\n     */\r\n    private detectRouteChanges() {\r\n        // Special case where breadcrumb service & component instantiates after a route is navigated.\r\n        // Ex: put breadcrumbs within *ngIf and this.router.events would be empty\r\n        // This check is also required where  { initialNavigation: 'enabledBlocking' } is applied to routes\r\n        this.setupBreadcrumbs(this.activatedRoute.snapshot);\r\n\r\n        this.router.events\r\n            .pipe(\r\n                filter(\r\n                    (event): event is GuardsCheckEnd => event instanceof GuardsCheckEnd\r\n                )\r\n            )\r\n            .subscribe((event) => {\r\n                // activatedRoute doesn't carry data when shouldReuseRoute returns false\r\n                // use the event data with GuardsCheckEnd as workaround\r\n                // Check for shouldActivate in case where the authGuard returns false the breadcrumbs shouldn't be changed\r\n                if (event.shouldActivate) {\r\n                    this.setupBreadcrumbs(event.state.root);\r\n                }\r\n            });\r\n    }\r\n\r\n    private setupBreadcrumbs(activatedRouteSnapshot: ActivatedRouteSnapshot) {\r\n        this.previousBreadcrumbs = this.currentBreadcrumbs;\r\n        // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\r\n        const rootBreadcrumb = this.getRootBreadcrumb();\r\n        this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\r\n        this.prepareBreadcrumbList(activatedRouteSnapshot, this.baseHref);\r\n    }\r\n\r\n    private getRootBreadcrumb(): Breadcrumb | void {\r\n        const rootConfig = this.router.config.find((config) => config.path === '');\r\n        const rootBreadcrumb = this.extractObject(rootConfig?.data?.['breadcrumb']);\r\n        const storeItem = this.getFromStore(rootBreadcrumb.alias || '', '/');\r\n\r\n        if (isNotEmpty(rootBreadcrumb) || isNotEmpty(storeItem)) {\r\n            return {\r\n                ...storeItem,\r\n                ...rootBreadcrumb,\r\n                routeLink: this.baseHref,\r\n                ...this.getQueryParamsFromPreviousList('/'),\r\n            };\r\n        }\r\n    }\r\n\r\n    private prepareBreadcrumbItem(\r\n        activatedRouteSnapshot: ActivatedRouteSnapshot,\r\n        routeLinkPrefix: string\r\n    ): BreadcrumbDefinition {\r\n        const { path, breadcrumb } = this.parseRouteData(\r\n            activatedRouteSnapshot.routeConfig\r\n        );\r\n        const resolvedSegment = this.resolvePathSegment(\r\n            path,\r\n            activatedRouteSnapshot\r\n        );\r\n        const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\r\n        const storeItem = this.getFromStore(breadcrumb.alias || '', routeLink);\r\n\r\n        const label = this.extractLabel(\r\n            (storeItem?.label || breadcrumb?.label) || '',\r\n            resolvedSegment\r\n        );\r\n        let isAutoGeneratedLabel = false;\r\n        let autoGeneratedLabel = '';\r\n        if (!label) {\r\n            isAutoGeneratedLabel = true;\r\n            autoGeneratedLabel = resolvedSegment;\r\n        }\r\n\r\n        return {\r\n            ...storeItem,\r\n            ...breadcrumb,\r\n            label: isAutoGeneratedLabel ? autoGeneratedLabel : label,\r\n            routeLink,\r\n            isAutoGeneratedLabel,\r\n            ...this.getQueryParamsFromPreviousList(routeLink),\r\n        };\r\n    }\r\n\r\n    private prepareBreadcrumbList(\r\n        activatedRouteSnapshot: ActivatedRouteSnapshot,\r\n        routeLinkPrefix: string\r\n    ): Breadcrumb[] | void {\r\n        if (activatedRouteSnapshot.routeConfig?.path) {\r\n            const breadcrumbItem = this.prepareBreadcrumbItem(\r\n                activatedRouteSnapshot,\r\n                routeLinkPrefix\r\n            );\r\n            this.currentBreadcrumbs.push(breadcrumbItem);\r\n\r\n            if (activatedRouteSnapshot.firstChild) {\r\n                return this.prepareBreadcrumbList(\r\n                    activatedRouteSnapshot.firstChild,\r\n                    breadcrumbItem.routeLink + '/'\r\n                );\r\n            }\r\n        } else if (activatedRouteSnapshot.firstChild) {\r\n            return this.prepareBreadcrumbList(\r\n                activatedRouteSnapshot.firstChild,\r\n                routeLinkPrefix\r\n            );\r\n        }\r\n        const lastCrumb =\r\n            this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\r\n        this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRouteSnapshot);\r\n\r\n        // remove breadcrumb items that needs to be hidden\r\n        const breadcrumbsToShow = this.currentBreadcrumbs.filter(\r\n            (item) => !item.skip\r\n        );\r\n\r\n        this.breadcrumbs.next(breadcrumbsToShow);\r\n    }\r\n\r\n    private getFromStore(alias: string, routeLink: string): BreadcrumbDefinition {\r\n        return this.dynamicBreadcrumbStore.find((item) => {\r\n            return (\r\n                (alias && alias === item.alias) ||\r\n                (routeLink && routeLink === item.routeLink) ||\r\n                this.matchRegex(routeLink, item.routeRegex || '')\r\n            );\r\n        }) || {} as BreadcrumbDefinition;\r\n    }\r\n\r\n    /**\r\n     * use exact match instead of regexp.test\r\n     * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\r\n     */\r\n    private matchRegex(routeLink: string, routeRegex: string) {\r\n        const match = routeLink.match(new RegExp(routeRegex));\r\n        return match?.[0] === routeLink;\r\n    }\r\n\r\n    /**\r\n     * if the path segment has route params, read the param value from url\r\n     * for each segment of route this gets called\r\n     *\r\n     * for mentor/:id/view - it gets called with mentor, :id, view 3 times\r\n     */\r\n    private resolvePathSegment(\r\n        segment: string,\r\n        activatedRouteSnapshot: ActivatedRouteSnapshot\r\n    ) {\r\n        //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\r\n        if (segment.includes(PATH_PARAM.PREFIX)) {\r\n            Object.entries(activatedRouteSnapshot.params).forEach(([key, value]) => {\r\n                segment = segment.replace(`:${key}`, `${value}`);\r\n            });\r\n        }\r\n        return segment;\r\n    }\r\n\r\n    /**\r\n     * queryParams & fragments for previous breadcrumb path are copied over to new list\r\n     */\r\n    private getQueryParamsFromPreviousList(routeLink: string): Breadcrumb {\r\n        const { queryParams, fragment } =\r\n            this.previousBreadcrumbs.find((item) => item.routeLink === routeLink) ||\r\n            {};\r\n        return { queryParams, fragment };\r\n    }\r\n\r\n    /**\r\n     * set current activated route query params to the last breadcrumb item\r\n     */\r\n    private setQueryParamsForActiveBreadcrumb(\r\n        lastItem: Breadcrumb,\r\n        activatedRouteSnapshot: ActivatedRouteSnapshot\r\n    ) {\r\n        if (lastItem) {\r\n            const { queryParams, fragment } = activatedRouteSnapshot;\r\n            lastItem.queryParams = queryParams ? { ...queryParams } : undefined;\r\n            lastItem.fragment = fragment || undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\r\n     * When both are defined, child takes precedence\r\n     *\r\n     * Ex: Below we are setting breadcrumb on both parent and child.\r\n     * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\r\n     * { path: 'home', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule) , data: {breadcrumb: \"Defined On Module\"}}\r\n     *                                                AND\r\n     * children: [\r\n     *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\r\n     * ]\r\n     */\r\n    private parseRouteData(routeConfig: any) {\r\n        const { path, data } = routeConfig;\r\n        const breadcrumb = this.mergeWithBaseChildData(\r\n            routeConfig,\r\n            data?.['breadcrumb']\r\n        );\r\n\r\n        return { path, breadcrumb };\r\n    }\r\n\r\n    /**\r\n     * get empty children of a module or Component. Empty child is the one with path: ''\r\n     * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\r\n     */\r\n    private mergeWithBaseChildData(\r\n        routeConfig: any,\r\n        config: BreadcrumbConfig\r\n    ): BreadcrumbObject {\r\n        if (!routeConfig) {\r\n            return this.extractObject(config);\r\n        }\r\n\r\n        let baseChild;\r\n        if (routeConfig.loadChildren) {\r\n            // To handle a module with empty child route\r\n            baseChild = routeConfig._loadedRoutes.find((route: any) => route.path === '');\r\n        } else if (routeConfig.children) {\r\n            // To handle a component with empty child route\r\n            baseChild = routeConfig.children.find((route: any) => route.path === '');\r\n        }\r\n\r\n        const childConfig = baseChild?.data?.breadcrumb;\r\n        return childConfig\r\n            ? this.mergeWithBaseChildData(baseChild, {\r\n                ...this.extractObject(config),\r\n                ...this.extractObject(childConfig),\r\n            })\r\n            : this.extractObject(config);\r\n    }\r\n\r\n    /**\r\n     * Update breadcrumb dynamically\r\n     *\r\n     * key can be a path | alias\r\n     *\r\n     * 1) Using complete route path. route can be passed the same way you define angular routes\r\n     * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\r\n     * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\r\n     * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\r\n     * ------------------------------------------ OR ------------------------------------------\r\n     * 2) Using route alias (prefixed with '@'). alias should be unique for a route\r\n     * - update label Ex: set('@mentor', 'Enabler')\r\n     * - change visibility Ex: set('@mentorEdit', { skip: true })\r\n     *\r\n     *\r\n     * value can be string | BreadcrumbObject | BreadcrumbFunction\r\n     */\r\n    set(key: string, breadcrumb: string | BreadcrumbObject) {\r\n        const breadcrumbObject = this.extractObject(breadcrumb);\r\n        let updateArgs: [StoreMatcherKey, BreadcrumbDefinition];\r\n\r\n        if (key.startsWith(ALIAS_PREFIX)) {\r\n            updateArgs = ['alias', { ...breadcrumbObject, alias: key.slice(1) }];\r\n        } else if (key.includes(PATH_PARAM.PREFIX)) {\r\n            updateArgs = [\r\n                'routeRegex',\r\n                { ...breadcrumbObject, routeRegex: this.buildRegex(key) },\r\n            ];\r\n        } else {\r\n            updateArgs = [\r\n                'routeLink',\r\n                { ...breadcrumbObject, routeLink: this.ensureLeadingSlash(key) },\r\n            ];\r\n        }\r\n\r\n        // For this route if previously a breadcrumb is not defined that sets isAutoGeneratedLabel: true\r\n        // change it to false since this is user supplied value\r\n        updateArgs[1].isAutoGeneratedLabel = false;\r\n\r\n        this.updateStore(...updateArgs);\r\n        this.updateCurrentBreadcrumbs(...updateArgs);\r\n    }\r\n\r\n    /**\r\n     * Update the store to reuse for dynamic declarations\r\n     * If the store already has this route definition update it, else add\r\n     */\r\n    private updateStore(key: string, breadcrumb: any) {\r\n        const storeItemIndex = this.dynamicBreadcrumbStore.findIndex((item: any) => {\r\n            return Number(breadcrumb[key] === item[key]);\r\n        });\r\n        if (storeItemIndex > -1) {\r\n            this.dynamicBreadcrumbStore[storeItemIndex] = {\r\n                ...this.dynamicBreadcrumbStore[storeItemIndex],\r\n                ...breadcrumb,\r\n            };\r\n        } else {\r\n            this.dynamicBreadcrumbStore.push({ ...breadcrumb });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If breadcrumb is present in current breadcrumbs update it and emit new stream\r\n     */\r\n    private updateCurrentBreadcrumbs(\r\n        key: string,\r\n        breadcrumb: any\r\n    ) {\r\n        const itemIndex = this.currentBreadcrumbs.findIndex((item: any) => {\r\n            return key === 'routeRegex'\r\n                ? this.matchRegex(item.routeLink || '', breadcrumb[key])\r\n                : breadcrumb[key] === item[key];\r\n        });\r\n        if (itemIndex > -1) {\r\n            this.currentBreadcrumbs[itemIndex] = {\r\n                ...this.currentBreadcrumbs[itemIndex],\r\n                ...breadcrumb,\r\n            };\r\n            const breadcrumbsToShow = this.currentBreadcrumbs.filter(\r\n                (item) => !item.skip\r\n            );\r\n            this.breadcrumbs.next([...breadcrumbsToShow]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * For a route with path param, we create regex dynamically from angular route syntax\r\n     * '/mentor/:id' becomes '/mentor/[^/]',\r\n     * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\r\n     */\r\n    private buildRegex(path: string) {\r\n        return this.ensureLeadingSlash(path).replace(\r\n            new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'),\r\n            PATH_PARAM.REGEX_REPLACER\r\n        );\r\n    }\r\n\r\n    private ensureLeadingSlash(path: string) {\r\n        return path.startsWith('/') ? path : `/${path}`;\r\n    }\r\n\r\n    /**\r\n     * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\r\n     *\r\n     * string: simple static breadcrumb label for a path\r\n     * function: callback that gets invoked with resolved path param\r\n     * object: additional data defined along with breadcrumb label that gets passed to *breadcrumbItem directive\r\n     */\r\n    private extractLabel(config: BreadcrumbConfig, resolvedParam?: string) {\r\n        const label = typeof config === 'object' ? config.label : config;\r\n        if (typeof label === 'function') {\r\n            return label(resolvedParam);\r\n        }\r\n        return label;\r\n    }\r\n\r\n    private extractObject(config: BreadcrumbConfig): BreadcrumbObject {\r\n        // don't include {label} if config is undefined. This is important since we merge the configs\r\n        if (\r\n            config &&\r\n            (typeof config === 'string' || typeof config === 'function')\r\n        ) {\r\n            return { label: config };\r\n        }\r\n        return (config as BreadcrumbObject) || {};\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FiltersService",
            "id": "injectable-FiltersService-f76f301d2bf6adf8124fd32801fb04ed57f3b8f67c8b7271553534116a8440a485bd7e522c69d0d467662e1b23ca296ab229485cabb549b4ab1d0ce5124dd4d3",
            "file": "projects/design-system/src/lib/micro-organismi/filters/services/filters.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getFiltersResult",
                    "args": [
                        {
                            "name": "event",
                            "type": "OnlyFiltersChip",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filtersResult",
                            "type": "OnlyFiltersChip[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "OnlyFiltersChip",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filtersResult",
                            "type": "OnlyFiltersChip[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFiltersChip",
                    "args": [
                        {
                            "name": "event",
                            "type": "OnlyFiltersChip",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filtersResult",
                            "type": "OnlyFiltersChip[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "OnlyFiltersChip",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filtersResult",
                            "type": "OnlyFiltersChip[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { OnlyFiltersChip } from '../models/filters.model';\r\nimport { TreeSelectModel } from '../../../atoms/tree-select/models/tree-select.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FiltersService {\r\n    constructor() { }\r\n\r\n    getFiltersResult(event: OnlyFiltersChip, filtersResult: OnlyFiltersChip[]) {\r\n        let indexFilter = filtersResult.findIndex(item => item.id == event.id);\r\n        if (indexFilter < 0)\r\n            filtersResult.push(event);\r\n        else {\r\n            filtersResult[indexFilter].result = event.result;\r\n            filtersResult[indexFilter].data = event.data;\r\n        }\r\n\r\n        return filtersResult;\r\n    }\r\n\r\n\r\n    removeFiltersChip(event: OnlyFiltersChip, filtersResult: OnlyFiltersChip[]) {\r\n        let indexFilter = filtersResult.findIndex(item => item.id == event.id);\r\n        if (indexFilter >= 0) {\r\n            let indexToRemoveResult = filtersResult[indexFilter].result.findIndex(item => item.chipsLabel == event.result[0].chipsLabel);\r\n            filtersResult[indexFilter].result.splice(indexToRemoveResult, 1);\r\n            if (Array.isArray(filtersResult[indexFilter].data[event.result[0].dropdownIndex])) {\r\n                const temp = filtersResult[indexFilter].data[event.result[0].dropdownIndex] as TreeSelectModel[];\r\n                let indexToRemoveData = temp.findIndex(item => item.label == event.result[0].chipsLabel);\r\n                temp.splice(indexToRemoveData, 1);\r\n            } else if (typeof filtersResult[indexFilter].data[event.result[0].dropdownIndex] === 'object') {\r\n                filtersResult[indexFilter].data[event.result[0].dropdownIndex] = [];\r\n            }\r\n        }\r\n\r\n        return filtersResult;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "HeaderItemsService",
            "id": "injectable-HeaderItemsService-3c3a6628b585dd0ccec22dc39534b5f379ed1c12365f167ac5787386c96d22c351d2d06d02fb63267d79b805caa0a6471a2bbc69008bdc62e31950bc781bb6b5",
            "file": "projects/design-system/src/lib/molecole/header-items/services/header-items.service.ts",
            "properties": [
                {
                    "name": "cartItems$",
                    "defaultValue": "new BehaviorSubject<any>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "notifications$",
                    "defaultValue": "new BehaviorSubject<UserNotification[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<UserNotification[]>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "uploadFiles$",
                    "defaultValue": "new BehaviorSubject<FileUpload[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<FileUpload[]>",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [
                {
                    "name": "deleteAllFromCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteFromCart",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCart",
                    "args": [],
                    "optional": false,
                    "returnType": "BehaviorSubject<any>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notificationRead",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { FileUpload } from '../../upload-file/models/file-upload.model';\r\nimport { UserNotification } from '../models/user-notification.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HeaderItemsService {\r\n  cartItems$: BehaviorSubject<any> = new BehaviorSubject<any>([]);\r\n  set cartItems(val: any[]) {\r\n\r\n    this.cartItems$.next(val);\r\n  }\r\n\r\n  getCart(): BehaviorSubject<any> {\r\n    return this.cartItems$;\r\n  }\r\n\r\n  deleteFromCart(index: number) {\r\n    const values = this.cartItems$.getValue();\r\n    values.splice(index, 1);\r\n    this.cartItems$.next(values);\r\n  }\r\n\r\n  deleteAllFromCart() {\r\n    this.cartItems$.next([]);\r\n  }\r\n\r\n  uploadFiles$: BehaviorSubject<FileUpload[]> = new BehaviorSubject<FileUpload[]>([]);\r\n  set uploadFiles(val: FileUpload) {\r\n    let values = this.uploadFiles$.getValue();\r\n    values.push(val);\r\n    this.uploadFiles$.next(values);\r\n  }\r\n\r\n  notifications$: BehaviorSubject<UserNotification[]> = new BehaviorSubject<UserNotification[]>([]);\r\n  set notifications(val: UserNotification) {\r\n    let values = this.notifications$.getValue();\r\n    values.push(val);\r\n    this.notifications$.next(values);\r\n  }\r\n\r\n  notificationRead(id: number) {\r\n    const notifyToModify = this.notifications$.getValue().map(el => {\r\n      if (el.id === id) {\r\n        el.isRead = true;\r\n      }\r\n\r\n      return el;\r\n    });\r\n\r\n    this.notifications$.next(notifyToModify);\r\n  }\r\n}\r\n",
            "accessors": {
                "cartItems": {
                    "name": "cartItems",
                    "setSignature": {
                        "name": "cartItems",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 11,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "uploadFiles": {
                    "name": "uploadFiles",
                    "setSignature": {
                        "name": "uploadFiles",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "FileUpload",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "FileUpload",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "notifications": {
                    "name": "notifications",
                    "setSignature": {
                        "name": "notifications",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "UserNotification",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "UserNotification",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LibTableService",
            "id": "injectable-LibTableService-e2f36517c222e56c5fd107f0dcbf24f138929bef8322a7eb6323d47b255040dfe305e72c82aad1088053fd0d13d1ad3037c0715dc5b4b519a548fd5f5c59941a",
            "file": "projects/design-system/src/lib/molecole/table/services/lib-table.service.ts",
            "properties": [
                {
                    "name": "datePipe",
                    "defaultValue": "new DatePipe('it-IT')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePipe",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFieldValue",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "forceDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "dateFormat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'dd/MM/yyyy'"
                        },
                        {
                            "name": "stopDate",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "forceDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dateFormat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'dd/MM/yyyy'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stopDate",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DatePipe } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport moment from 'moment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LibTableService {\r\n  private datePipe: DatePipe = new DatePipe('it-IT');\r\n  constructor() {\r\n\r\n  }\r\n\r\n  getFieldValue(data: { [key: string]: any }, field: string, forceDate = false, dateFormat: string = 'dd/MM/yyyy', stopDate: boolean = false): any {\r\n    // Example with --> field country.name\r\n    if (data) {\r\n\r\n      if (field) {\r\n        const props = field.split(\".\"); //[country, name] ---> [name] ----> []\r\n        const prop = props.shift() as string; //country----> name\r\n\r\n        if (props.length) {\r\n          return this.getFieldValue(data[prop], props.join(\".\"), forceDate, dateFormat, stopDate);\r\n        }\r\n        else {\r\n          //If you pass a timestamp it will has milliseconds and you have to enable forceDate\r\n          const date = moment(data[prop], true).isValid();\r\n\r\n          if ((typeof data[prop] === 'number' || typeof data[prop] === 'boolean') && !forceDate) {\r\n            return data[prop];\r\n          } else if (date && !stopDate) {\r\n            return this.datePipe.transform(data[prop], dateFormat);\r\n          } else {\r\n            if (data[prop] != null) {\r\n              return data[prop];\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LoaderService",
            "id": "injectable-LoaderService-1d7265a0976f293a2ddccaf550be30e06c27c01bb42dddf21191de0bf6d6b5198dc65411bafa8b3bf523e06488d7ed25ef710718193f2fc4605043247ae50962",
            "file": "projects/design-system/src/lib/atoms/loader/services/loader.service.ts",
            "properties": [
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "showHide",
                    "args": [
                        {
                            "name": "loading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "loading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LoaderService {\r\n    private loading$: Subject<boolean> = new BehaviorSubject(true);\r\n\r\n    get loading(): Observable<boolean> {\r\n        return this.loading$.asObservable();\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    showHide(loading: boolean) {\r\n        this.loading$.next(loading);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "accessors": {
                "loading": {
                    "name": "loading",
                    "getSignature": {
                        "name": "loading",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 10
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "BreadcrumbModel",
            "id": "class-BreadcrumbModel-a95cb17c911e901c1b2f63dde04eb8f7f652ac7bb9ccf27c7f9f745d1a89644f2b006ae0d4e2f2dc629a8e77f1c44dacddc025eafc032146aa9a7c79d6aeab52",
            "file": "projects/design-system/src/lib/atoms/breadcrumb/models/breadcrumb.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class BreadcrumbModel {\r\n    name: string = '';\r\n    active: boolean = false;\r\n    link: string = '';\r\n}\r\n\r\nexport interface Breadcrumb {\r\n    /**\r\n     * actual route path with resolved param. Ex /mentor/2, connect/edit\r\n     */\r\n    routeLink?: string;\r\n    /**\r\n     * route with path params converted to a RegExp\r\n     * path '/mentor/:id' becomes routeRegex '/mentor/[^/]+', which can be matched against when needed\r\n     */\r\n    routeRegex?: string;\r\n    /**\r\n     * This is additional info on each breadcrumb item whether label is auto generated or user specified\r\n     * isAutoGeneratedLabel has to be present at component level but not at the service,\r\n     * since we may need to support multiple breadcrumb components in same app\r\n     */\r\n    isAutoGeneratedLabel?: boolean;\r\n    /**\r\n     * Query params in string form.\r\n     */\r\n    queryParams?: any;\r\n    fragment?: string;\r\n    routeInterceptor?: (routeLink: string, breadcrumb: Breadcrumb) => string;\r\n}\r\n\r\nexport interface BreadcrumbObject {\r\n    /**\r\n     * breadcrumb label for a route\r\n     */\r\n    label?: string | BreadcrumbFunction;\r\n    /**\r\n     * unique alias name for a route path that can be used to dynamically update a route's breadcrumb label via breadcrumbService.set()\r\n     */\r\n    alias?: string;\r\n    /**\r\n     * hide or show the breadcrumb item\r\n     */\r\n    skip?: boolean;\r\n    /**\r\n     * disable a certain breadcrumb in the list. Not clickable.\r\n     * It may be needed when the routing has the path, but navigating to that path is of no use\r\n     */\r\n    disable?: boolean;\r\n    /**\r\n     * custom data for each breadcrumb that is passed back to ng-template\r\n     */\r\n    info?: any;\r\n    /**\r\n     * Interceptor for breadcrumb click action that returns the dynamic path\r\n     * Consumers can change the breadcrumb routing dynamically with this approach\r\n     */\r\n    routeInterceptor?: (routeLink: string, breadcrumb: Breadcrumb) => string;\r\n}\r\n\r\n// resolved label for a route can further be enhanced based on a function\r\nexport type BreadcrumbFunction = (resolvedLabel?: string) => string;",
            "properties": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomValidators",
            "id": "class-CustomValidators-3303718bd97d5ad4e2ffb8042ec71abc5c160af601ef3a09375ccb42b69ec51cc5093001e7d80ef343309415735e37a772fab7648b66c14df3ad686f802a9e67",
            "file": "projects/design-system/src/lib/atoms/input-form/custom-validators/custom-validators.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, ValidationErrors } from \"@angular/forms\";\r\n\r\nexport class CustomValidators {\r\n  static fiscalCode = (control: AbstractControl): ValidationErrors | null => {\r\n    const regex = new RegExp('^[a-zA-Z]{6}[0-9]{2}[a-zA-Z]{1}[0-9]{2}[a-zA-Z]{1}[0-9]{3}[a-zA-Z]{1}$');\r\n    const cf = control.value as string;\r\n\r\n    if (cf && regex.test(cf)) {\r\n      return null;\r\n    } else {\r\n      return { 'fiscalCodeInvalid': true };\r\n    }\r\n\r\n  }\r\n}",
            "properties": [
                {
                    "name": "fiscalCode",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "BreadcrumbItemDirective",
            "id": "directive-BreadcrumbItemDirective-a039daaf1576e9806d08a1288f2ce9f22034f153d1c4d6767271a65754d644f52f5dd12f29364a0ac2a5db544e647d1d845118129dc53cb72eb5729c00000228",
            "file": "projects/design-system/src/lib/atoms/breadcrumb/directives/breadcrumb.directive.ts",
            "type": "directive",
            "description": "<p>This directive is used to customize the breadcrumb label behavior\n*BreadcrumbItem directive can be used in the child element of breadcrumb\nUsage: refer to the demo - app.component.html</p>\n",
            "rawdescription": "\n\nThis directive is used to customize the breadcrumb label behavior\n*BreadcrumbItem directive can be used in the child element of breadcrumb\nUsage: refer to the demo - app.component.html\n",
            "sourceCode": "import { Directive } from '@angular/core';\r\n\r\n/**\r\n * This directive is used to customize the breadcrumb label behavior\r\n * *BreadcrumbItem directive can be used in the child element of breadcrumb\r\n * Usage: refer to the demo - app.component.html\r\n */\r\n@Directive({\r\n    selector: '[breadcrumbItem]',\r\n})\r\nexport class BreadcrumbItemDirective { }",
            "selector": "[breadcrumbItem]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": []
        }
    ],
    "components": [
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-08d68cf4c5fbf1364cde10572aeb0ae6a02aeebbd9494e72af58d81e7ca81d282e09895f8ddb0d9b756b0e5ee3c6727a76d813c79a00fe7aaa0cb777b1bbb1e8",
            "file": "projects/design-system/src/lib/atoms/accordion/components/accordion.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-accordion",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "contents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "index",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number | Array<number> | null",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "AccordionData[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "indexChange",
                    "defaultValue": "new EventEmitter<number | Array<number>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter<number | Array>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "changeIndex",
                    "args": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output, TemplateRef} from '@angular/core';\r\nimport {AccordionData} from \"../models/accordion.model\";\r\n\r\n@Component({\r\n  selector: 'lib-accordion',\r\n  templateUrl: './accordion.component.html',\r\n  styleUrls: ['./accordion.component.scss']\r\n})\r\nexport class AccordionComponent {\r\n\r\n  @Input() multiple: boolean = false;\r\n  @Input() index: number | Array<number> | null = null;\r\n  @Input() sections!: AccordionData[];\r\n  @Input() contents!: TemplateRef<any>;\r\n\r\n  @Output() indexChange: EventEmitter<number | Array<number>> = new EventEmitter<number | Array<number>>();\r\n\r\n  changeIndex(event: number) {\r\n    this.indexChange.emit(event);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./accordion.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<p-accordion [multiple]=\"multiple\" [(activeIndex)]=\"index\" (activeIndexChange)=\"changeIndex($event)\">\r\n  <p-accordionTab *ngFor=\"let item of sections; let i = index\" [header]=\"item.header\" iconPos=\"end\">\r\n    <ng-container *ngIf=\"contents\" [ngTemplateOutlet]=\"contents ? contents : null\"\r\n                  [ngTemplateOutletContext]=\"{$implicit:item}\"></ng-container>\r\n\r\n  </p-accordionTab>\r\n</p-accordion>\r\n"
        },
        {
            "name": "ActionsTableComponent",
            "id": "component-ActionsTableComponent-92da1ed774454def3b19c60ebff4b26aeda89d6ab99da1468840b131521ea1e8c558549f1bdf636ebac27dc962dac3ba7f42b3622efbbcae75710d09941192cb",
            "file": "projects/design-system/src/lib/molecole/table/components/actions-table/actions-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-actions-table",
            "styleUrls": [
                "./actions-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./actions-table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "iconsTable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "ActionTable[]",
                    "decorators": []
                },
                {
                    "name": "rowData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { ActionTable } from \"../../models/table.model\";\r\n\r\n@Component({\r\n  selector: \"lib-actions-table\",\r\n  templateUrl: \"./actions-table.component.html\",\r\n  styleUrls: [\"./actions-table.component.scss\"],\r\n})\r\nexport class ActionsTableComponent implements OnInit {\r\n  @Input() iconsTable!: ActionTable[];\r\n  @Input() rowData: any;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    // passa l'argomento rowData alle funzioni di 2° livello\r\n    this.iconsTable = this.iconsTable.map((action) =>\r\n      action.items\r\n        ? {\r\n            ...action,\r\n            items: action.items.map((action) => ({\r\n              ...action,\r\n              command: (): any => action.command!(this.rowData),\r\n            })),\r\n          }\r\n        : action\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".actions {\r\n    position: relative;\r\n    gap: 8px;\r\n    display: flex;\r\n    .menu {\r\n        position: absolute;\r\n        top: 0;\r\n    }\r\n}",
                    "styleUrl": "./actions-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"actions\">\r\n    <ng-container *ngFor=\"let icon of iconsTable\">\r\n        <lib-button [icon]=\"icon.label\" (click)=\"icon.items ? menu.toggle($event) : null\" size=\"small\" (click)=\" icon.command ?  icon.command(rowData) : null\"></lib-button>\r\n        <!-- <lib-button [icon]=\"icon.label\" (click)=\"icon.items ? menu.toggle($event) : null\" size=\"small\" (click)=\" icon.command ?  icon.command(rowData) : null\"></lib-button>-->\r\n        <!-- <p-menu #menu [popup]=\"true\" [model]=\"icon.items!\" appendTo=\"body\"></p-menu> -->\r\n        <!-- <p-panelMenu #menu [popup]=\"true\" [model]=\"icon.items!\" appendTo=\"body\"></p-panelMenu> -->\r\n        <p-tieredMenu #menu [popup]=\"true\" [hidden]=\"!icon.items\" [model]=\"icon.items!\" appendTo=\"body\"></p-tieredMenu>\r\n    </ng-container>\r\n</div>"
        },
        {
            "name": "AddressComponent",
            "id": "component-AddressComponent-80c5d38a8a8da879e43075b9e18d6cfc1f92d6fd5e1c7d78c6c3684be5722525f2a81b8b8abef34587abf24e394b5bb8da6feeb9a175b45c19f89542d0d791af",
            "file": "projects/design-system/src/lib/atoms/address/components/address.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-address",
            "styleUrls": [
                "./address.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./address.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "LibAddress",
                    "decorators": []
                },
                {
                    "name": "modify",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "modifyClicked",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { LibAddress } from '../models/address.model';\r\n\r\n@Component({\r\n  selector: 'lib-address',\r\n  templateUrl: './address.component.html',\r\n  styleUrls: ['./address.component.scss']\r\n})\r\nexport class AddressComponent {\r\n  @Input() address!: LibAddress;\r\n  @Input() modify: boolean = false;\r\n\r\n  @Output() modifyClicked = new EventEmitter<boolean>();\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./address.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"address\" *ngIf=\"address\">\r\n  <div class=\"body-semibold\">\r\n    {{address.name}}\r\n  </div>\r\n  <div class=\"body-regular\">\r\n    {{address.content}}\r\n  </div>\r\n  <div class=\"modify-button\" *ngIf=\"modify\">\r\n    <lib-button [type]=\"'link'\" [label]=\"'Modifica'\" (onClick)=\"modifyClicked.emit()\"></lib-button>\r\n  </div>\r\n</div>"
        },
        {
            "name": "AutocompleteCardComponent",
            "id": "component-AutocompleteCardComponent-1c429ce3506ad783226d88154e7330f71d4f9954fc8856323412d6e0ec6de074d67745a248639d76187119852efbf24dc3a7362cabe54433702e0329d54da653",
            "file": "projects/design-system/src/lib/atoms/autocomplete-card/components/autocomplete-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AutocompleteCardComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "FilterService",
                    "type": "injectable"
                }
            ],
            "selector": "lib-autocomplete-card",
            "styleUrls": [
                "./autocomplete-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./autocomplete-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "AbstractControl",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "field",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "minLength",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showClear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "valueAutocomplete",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedValue",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filteredList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "valueItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "controlFields",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitValueIfExist",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "autocomplete",
                            "type": "AutoComplete",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "autocomplete",
                            "type": "AutoComplete",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCustomField",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, forwardRef } from '@angular/core';\r\nimport { AbstractControl, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FilterService } from \"primeng/api\";\r\nimport { RadioTile } from '../../../molecole/radio-tile/models/radio-tile.model';\r\nimport { LibAddress } from '../../address/models/address.model';\r\nimport { AutoComplete } from 'primeng/autocomplete';\r\n\r\n@Component({\r\n    selector: 'lib-autocomplete-card',\r\n    templateUrl: './autocomplete-card.component.html',\r\n    styleUrls: ['./autocomplete-card.component.scss'],\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => AutocompleteCardComponent),\r\n        multi: true\r\n    }, FilterService]\r\n})\r\nexport class AutocompleteCardComponent implements OnChanges {\r\n    @Input() valueAutocomplete: any[] = [];\r\n    @Input() placeholder: string = '';\r\n    @Input() value: any;\r\n    @Input() label: string = '';\r\n    @Input() appendTo!: string;\r\n    @Input() icon!: string;\r\n    @Input() disabled: boolean = false;\r\n    @Input() showClear: boolean = false;\r\n    @Input() minLength: number = 3;\r\n    @Input() control: AbstractControl = new FormControl();\r\n    @Input() field: string[] = [];\r\n\r\n    @Output() selectedValue: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    private onChange: any = () => { }\r\n    private onTouch: any = () => { }\r\n    protected filteredList: any[] = [];\r\n    protected valueItem!: any;\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['value']) {\r\n            this.valueItem = this.value;\r\n        }\r\n    }\r\n\r\n    get haveError() {\r\n        return this.control && this.control.errors && (!this.control.pristine || this.control.touched);\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    protected filter(event: any) {\r\n        if (event.query.length > this.minLength - 1) {\r\n            let filtered: any[] = [];\r\n            let query = event.query.toString();\r\n            for (let i = 0; i < this.valueAutocomplete.length; i++) {\r\n                let value = this.valueAutocomplete[i];\r\n                if (!this.field) {\r\n                    if (value.name.toLowerCase().includes(query.toLowerCase()) || value.content.toLowerCase().includes(query.toLowerCase())) {\r\n                        filtered.push(value);\r\n                    }\r\n                } else {\r\n                    const val = this.controlFields(query, 'include', value);\r\n                    if (val)\r\n                        filtered.push(val);\r\n                }\r\n            }\r\n            this.filteredList = filtered;\r\n        }\r\n    }\r\n\r\n    protected getCustomField() {\r\n        return this.placeholder;\r\n    }\r\n\r\n    private controlFields(query: string, type: string, value?: any) {\r\n        let valueFound = '';\r\n        for (const field of this.field) {\r\n            switch (type) {\r\n                case 'include':\r\n                    if (value[field] && value[field].toLowerCase().includes(query.toLowerCase()))\r\n                        valueFound = value;\r\n                    break;\r\n                case 'match':\r\n                    if (value[field] && value[field].toLowerCase() === query.toLowerCase())\r\n                        valueFound = value;\r\n                    break;\r\n                case 'matchAll':\r\n                    this.valueAutocomplete.forEach(item => {\r\n                        if (item[field] && item[field].toLowerCase() === query.toLowerCase()) {\r\n                            valueFound = item;\r\n                        }\r\n                    })\r\n                    break;\r\n            }\r\n\r\n            if (valueFound)\r\n                return valueFound;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    // this method sets the value programmatically\r\n    protected writeValue(value: string) {\r\n        this.value = value;\r\n    }\r\n\r\n    // set UI element value changes emit function\r\n    protected registerOnChange(fn: any) {\r\n        this.onChange = fn\r\n    }\r\n\r\n    // set touching element emit function\r\n    protected registerOnTouched(fn: any) {\r\n        this.onTouch = fn\r\n    }\r\n\r\n    // upon disabled statu change, this method gets triggered\r\n    protected setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    // upon UI element value change, this method gets triggered\r\n    protected emitValue(event: any, type?: string) {\r\n        this.value = event;\r\n        this.valueItem = this.value;\r\n        this.onChange(event);\r\n        this.selectedValue.emit(event);\r\n    }\r\n\r\n    protected emitValueIfExist(event: any, autocomplete: AutoComplete) {\r\n        if (this.field.length === 0) {\r\n            let valueLowerCase: string[] = this.valueAutocomplete.map(item => item.name.toLowerCase());\r\n            if (valueLowerCase && valueLowerCase.includes(event.target.value.toLowerCase())) {\r\n                this.value = this.valueAutocomplete.filter(item => item.name.toLowerCase() === event.target.value.toLowerCase())[0];\r\n                this.valueItem = this.value;\r\n                this.control.setErrors(null);\r\n                this.onChange(this.value);\r\n                this.selectedValue.emit(this.value);\r\n            }\r\n            else if (this.value) {\r\n                this.valueItem = null;\r\n                this.onChange(\"\");\r\n                this.selectedValue.emit(\"\");\r\n                this.control.setErrors({ 'incorrect': true });\r\n                this.control.markAsTouched();\r\n            }\r\n        } else {\r\n            if (this.controlFields(event.target.value, 'matchAll')) {\r\n                this.value = this.controlFields(event.target.value, 'matchAll');\r\n                this.valueItem = this.value;\r\n                this.control.setErrors(null);\r\n                this.onChange(this.value);\r\n                autocomplete.hide();\r\n                this.selectedValue.emit(this.value);\r\n                return;\r\n            }\r\n            else if (this.value) {\r\n                this.valueItem = null;\r\n                this.onChange(\"\");\r\n                this.selectedValue.emit(\"\");\r\n                this.control.setErrors({ 'incorrect': true });\r\n                this.control.markAsTouched();\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./autocomplete-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 46
            },
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "haveError": {
                    "name": "haveError",
                    "getSignature": {
                        "name": "haveError",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            },
            "templateData": "<div [ngClass]=\"{'autocomplete': true, 'dropdown':icon, 'field': true}\">\r\n    <label *ngIf=\"label\">{{label}}</label>\r\n    <div [ngClass]=\"{'autocomplete-card':true, 'autocomplete': true, 'dropdown':icon}\">\r\n        <p-autoComplete #autocomplete [showClear]=\"showClear && !icon\"\r\n            [inputStyleClass]=\"haveError ? 'ng-invalid ng-dirty':''\" [appendTo]=\"appendTo\" [(ngModel)]=\"value\"\r\n            [placeholder]=\"placeholder\" [suggestions]=\"filteredList\" (change)=\"emitValueIfExist($event, autocomplete)\"\r\n            (onSelect)=\"emitValue($event)\" (onClear)=\"emitValue('')\" (completeMethod)=\"filter($event)\"\r\n            [minLength]=\"minLength\" [disabled]=\"disabled\" [dropdownIcon]=\"icon\" [dropdown]=\"true\" dropdownMode=\"current\"\r\n            [field]=\"getCustomField()\">\r\n            <ng-template let-item pTemplate=\"item\">\r\n                <lib-address [address]=\"item\"></lib-address>\r\n            </ng-template>\r\n            <ng-template let-selectedItem pTemplate=\"selectedItem\">\r\n                <lib-address [address]=\"selectedItem\"></lib-address>\r\n            </ng-template>\r\n        </p-autoComplete>\r\n        <div *ngIf=\"valueItem && control.valid\">\r\n            <lib-address [address]=\"valueItem\"></lib-address>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "AutocompleteComponent",
            "id": "component-AutocompleteComponent-a69f81e6142c00c26408e54414dfe4713c1f920804d5d9207e52483adce81dd9a0b6e0ae1b595f4f5d3bbbab46b906147f6602761f518d0d429f33568e82630e",
            "file": "projects/design-system/src/lib/atoms/autocomplete/components/autocomplete.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AutocompleteComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "FilterService",
                    "type": "injectable"
                }
            ],
            "selector": "lib-autocomplete",
            "styleUrls": [
                "./autocomplete.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./autocomplete.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "AbstractControl",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "field",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "lazy",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "minLength",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showClear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "valueAutocomplete",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string[] | any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emitLazyValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "selectedValue",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "enableFilter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "filteredList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "emitValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitValueIfExist",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { AbstractControl, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FilterService } from \"primeng/api\";\r\n\r\n@Component({\r\n  selector: 'lib-autocomplete',\r\n  templateUrl: './autocomplete.component.html',\r\n  styleUrls: ['./autocomplete.component.scss'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => AutocompleteComponent),\r\n    multi: true\r\n  }, FilterService]\r\n})\r\nexport class AutocompleteComponent implements OnChanges {\r\n  @Input() valueAutocomplete: string[] | any[] = [];\r\n  @Input() placeholder: string = '';\r\n  @Input() value: any;\r\n  @Input() label: string = '';\r\n  @Input() appendTo!: string;\r\n  @Input() icon: string = '';\r\n  @Input() disabled: boolean = false;\r\n  @Input() showClear: boolean = false;\r\n  @Input() minLength: number = 3;\r\n  @Input() control: AbstractControl = new FormControl();\r\n  @Input() field: string = '';\r\n  @Input() lazy: boolean = false;\r\n\r\n  @Output() selectedValue: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() emitLazyValue: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  private onChange: any = () => { }\r\n  private onTouch: any = () => { }\r\n  private enableFilter = false;\r\n  protected filteredList: any[] = [];\r\n\r\n  get haveError() {\r\n    return this.control && this.control.errors && (!this.control.pristine || this.control.touched);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (this.lazy && this.enableFilter) {\r\n      this.filteredList = [...this.valueAutocomplete];\r\n    }\r\n  }\r\n\r\n  constructor() { }\r\n\r\n  protected filter(event: any) {\r\n\r\n    if (!this.lazy) {\r\n      if (event.query.length > this.minLength - 1) {\r\n        this.enableFilter = true;\r\n        let filtered: any[] = [];\r\n        let query = event.query.toString();\r\n        for (let i = 0; i < this.valueAutocomplete.length; i++) {\r\n          let value = this.valueAutocomplete[i];\r\n          if (!this.field && typeof value === 'string') {\r\n            if (value.toLowerCase().includes(query.toLowerCase())) {\r\n              filtered.push(value);\r\n            }\r\n          } else {\r\n            if (value[this.field].toLowerCase().includes(query.toLowerCase())) {\r\n              filtered.push(value);\r\n            }\r\n          }\r\n        }\r\n        this.filteredList = filtered;\r\n      }\r\n    } else {\r\n      if (event.query.toString().length > this.minLength - 1) {\r\n        this.enableFilter = true;\r\n        this.emitLazyValue.emit(event.query.toString());\r\n      }\r\n    }\r\n  }\r\n\r\n  // this method sets the value programmatically\r\n  protected writeValue(value: string) {\r\n    this.value = value;\r\n  }\r\n\r\n  // set UI element value changes emit function\r\n  protected registerOnChange(fn: any) {\r\n    this.onChange = fn\r\n  }\r\n\r\n  // set touching element emit function\r\n  protected registerOnTouched(fn: any) {\r\n    this.onTouch = fn\r\n  }\r\n\r\n  // upon disabled statu change, this method gets triggered\r\n  protected setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  // upon UI element value change, this method gets triggered\r\n  protected emitValue(event: any, type?: string) {\r\n    this.value = event;\r\n    this.onChange(event);\r\n    this.selectedValue.emit(event);\r\n  }\r\n\r\n  protected emitValueIfExist(event: any) {\r\n    if (!this.field) {\r\n      let valueLowerCase: string[] = this.valueAutocomplete.map(item => item.toLowerCase());\r\n      if (valueLowerCase && valueLowerCase.includes(event.target.value.toLowerCase())) {\r\n        this.value = this.valueAutocomplete.filter(item => item.toLowerCase() === event.target.value.toLowerCase())[0];\r\n        this.control.setErrors(null);\r\n        this.onChange(this.value);\r\n        this.selectedValue.emit(this.value);\r\n      }\r\n      else if (this.value) {\r\n        this.onChange(\"\");\r\n        this.selectedValue.emit(\"\");\r\n        this.control.setErrors({ 'incorrect': true });\r\n        this.control.markAsTouched();\r\n      }\r\n    } else {\r\n      if (this.valueAutocomplete.filter(item => typeof item[this.field] === 'string' && typeof event.target.value === 'string' && item[this.field].toLowerCase() === event.target.value.toLowerCase()).length > 0) {\r\n        this.value = this.valueAutocomplete.filter(item => typeof item[this.field] === 'string' && typeof event.target.value === 'string' && item[this.field].toLowerCase() === event.target.value.toLowerCase())[0];\r\n        this.control.setErrors(null);\r\n        this.onChange(this.value);\r\n        this.selectedValue.emit(this.value);\r\n      }\r\n      else if (this.value) {\r\n        this.onChange(\"\");\r\n        this.selectedValue.emit(\"\");\r\n        this.control.setErrors({ 'incorrect': true });\r\n        this.control.markAsTouched();\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./autocomplete.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "haveError": {
                    "name": "haveError",
                    "getSignature": {
                        "name": "haveError",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                }
            },
            "templateData": "<div [ngClass]=\"{'autocomplete':true, 'dropdown':icon, 'field': true}\">\r\n    <label *ngIf=\"label\">{{label}}</label>\r\n    <p-autoComplete [showClear]=\"showClear && !icon\" [inputStyleClass]=\"haveError ? 'ng-invalid ng-dirty':''\"\r\n        [appendTo]=\"appendTo\" [(ngModel)]=\"value\" [placeholder]=\"placeholder\" [suggestions]=\"filteredList\"\r\n        (change)=\"emitValueIfExist($event)\" (onSelect)=\"emitValue($event)\" (onClear)=\"emitValue('')\"\r\n        (completeMethod)=\"filter($event)\" [minLength]=\"minLength\" [disabled]=\"disabled\" [dropdownIcon]=\"icon\"\r\n        [dropdown]=\"icon ? true : false\" dropdownMode=\"current\" [field]=\"field ? field : ''\"></p-autoComplete>\r\n\r\n</div>"
        },
        {
            "name": "BadgeComponent",
            "id": "component-BadgeComponent-48e901fad6d82c05939c7b58239ec95c085370688abcbaf51cc3492c777ad0db47086a941b61494511b3b9b43b4ede05107dcc04cb09857588a91412d006b7dd",
            "file": "projects/design-system/src/lib/atoms/badge/components/badge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-badge",
            "styleUrls": [
                "./badge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badge.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "menuBadge",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "severity",
                    "defaultValue": "'danger'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"success\" | \"info\" | \"warning\" | \"danger\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-badge',\r\n  templateUrl: './badge.component.html',\r\n  styleUrls: ['./badge.component.scss']\r\n})\r\nexport class BadgeComponent {\r\n  @Input() menuBadge: string = '';\r\n  @Input() severity: 'success' | 'info' | 'warning' | 'danger' = 'danger';\r\n  @Input() icon: boolean = true;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./badge.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-container>\r\n  <i *ngIf=\"icon\" class=\"pi pi-bell\" pBadge [value]=\"menuBadge\" severity=\"{{severity}}\"></i>\r\n  <p-badge *ngIf=\"!icon\" [value]=\"menuBadge\" severity=\"{{severity}}\"></p-badge>\r\n</ng-container>"
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-53791a9972a874450b1a7ef4eaf3aa31ba588ada848e9b214df72bf6d0662ab58d465e3185b04bac9ac65a0cdf9443f2c922a4298a362c9419ef18f101f338a5",
            "file": "projects/design-system/src/lib/atoms/breadcrumb/components/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "anchorTarget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nanchorTarget = \"_blank\" makes the breadcrumb link open in a new tab\n",
                    "description": "<p>anchorTarget = &quot;_blank&quot; makes the breadcrumb link open in a new tab</p>\n",
                    "line": 83,
                    "type": "\"_blank\" | undefined",
                    "decorators": []
                },
                {
                    "name": "autoGenerate",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf true, breadcrumb is auto generated even without any mapping label\nDefault label is same as route segment\n",
                    "description": "<p>If true, breadcrumb is auto generated even without any mapping label\nDefault label is same as route segment</p>\n",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncustom class provided by consumer to increase specificity\nThis will benefit to override styles that are conflicting\n",
                    "description": "<p>custom class provided by consumer to increase specificity\nThis will benefit to override styles that are conflicting</p>\n",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "preserveFragment",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBy default query fragments will be preserved with breadcrumbs\n",
                    "description": "<p>By default query fragments will be preserved with breadcrumbs</p>\n",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "preserveQueryParams",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBy default query params will be preserved with breadcrumbs\n",
                    "description": "<p>By default query params will be preserved with breadcrumbs</p>\n",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "separator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nseparator between breadcrumbs, defaults to '/'.\nUser can customize separator either by passing a String or Template\n\nString --> Ex: <lib-breadcrumb separator=\"-\"> </lib-breadcrumb>\n\nTemplate --> Ex: <lib-breadcrumb [separator]=\"separatorTemplate\"> </lib-breadcrumb>\n",
                    "description": "<p>separator between breadcrumbs, defaults to &#39;/&#39;.\nUser can customize separator either by passing a String or Template</p>\n<p>String --&gt; Ex: <lib-breadcrumb separator=\"-\"> </lib-breadcrumb></p>\n<p>Template --&gt; Ex: &lt;lib-breadcrumb [separator]=&quot;separatorTemplate&quot;&gt; </lib-breadcrumb></p>\n",
                    "line": 94,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_separator",
                    "defaultValue": "'/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "breadcrumbs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<BreadcrumbDefinition[]>",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Breadcrumb item can be customized with this template\nTemplate context is provided label, additional info, first and last indexes\nUse cases:</p>\n<ol>\n<li>Add an icon along with label</li>\n<li>i18n. {{breadcrumb | translate}} or {{breadcrumb | transloco}}</li>\n<li>Change text case {{breadcrumb | titlecase}}</li>\n</ol>\n",
                    "line": 56,
                    "rawdescription": "\n\nBreadcrumb item can be customized with this template\nTemplate context is provided label, additional info, first and last indexes\nUse cases:\n1) Add an icon along with label\n2) i18n. {{breadcrumb | translate}} or {{breadcrumb | transloco}}\n3) Change text case {{breadcrumb | titlecase}}\n",
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "BreadcrumbItemDirective, {static: false, read: TemplateRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "setupMessage",
                    "defaultValue": "'not set up yet'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "someParameterValue",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 102
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupComponent",
                    "args": [
                        {
                            "name": "someParam",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "someParam",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\r\nimport { BreadcrumbModel } from '../models/breadcrumb.model';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable, map } from 'rxjs';\r\nimport { BreadcrumbItemDirective } from '../directives/breadcrumb.directive';\r\nimport { BreadcrumbDefinition, BreadcrumbService } from '../services/breadcrumb.service';\r\n\r\n@Component({\r\n    selector: 'lib-breadcrumb',\r\n    templateUrl: './breadcrumb.component.html',\r\n    styleUrls: ['./breadcrumb.component.scss']\r\n})\r\nexport class BreadcrumbComponent implements OnInit {\r\n    /* @Input() breadcrumbList: BreadcrumbModel[] = [];\r\n    breadcrumbSubList1: BreadcrumbModel[] = [];\r\n    breadcrumbSubList2: BreadcrumbModel[] = [];\r\n    @Input() href: boolean = false;\r\n    @Output() goTo: EventEmitter<string> = new EventEmitter<string>();\r\n  \r\n    constructor() { }\r\n  \r\n    ngOnInit(): void {\r\n      if (this.breadcrumbList.length > 4) {\r\n        this.breadcrumbSubList1 = [this.breadcrumbList[0], this.breadcrumbList[1]];\r\n        this.breadcrumbSubList2 = [this.breadcrumbList[this.breadcrumbList.length - 2], this.breadcrumbList[this.breadcrumbList.length - 1]];\r\n      }\r\n    }\r\n  \r\n    ngOnChanges(): void {\r\n      if (this.breadcrumbList.length > 4) {\r\n        this.breadcrumbSubList1 = [this.breadcrumbList[0], this.breadcrumbList[1]];\r\n        this.breadcrumbSubList2 = [this.breadcrumbList[this.breadcrumbList.length - 2], this.breadcrumbList[this.breadcrumbList.length - 1]];\r\n      }\r\n    }\r\n  \r\n    capitalizeFirstLetter(string: string) {\r\n      return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n  \r\n    go(event: string): void {\r\n      this.goTo.emit(event);\r\n    } */\r\n\r\n    breadcrumbs$!: Observable<BreadcrumbDefinition[]>;\r\n    private _separator = '/';\r\n\r\n    /**\r\n   * Breadcrumb item can be customized with this template\r\n   * Template context is provided label, additional info, first and last indexes\r\n   * Use cases:\r\n   * 1) Add an icon along with label\r\n   * 2) i18n. {{breadcrumb | translate}} or {{breadcrumb | transloco}}\r\n   * 3) Change text case {{breadcrumb | titlecase}}\r\n   */\r\n    @ContentChild(BreadcrumbItemDirective, { static: false, read: TemplateRef })\r\n    itemTemplate: any;\r\n\r\n    /**\r\n     * If true, breadcrumb is auto generated even without any mapping label\r\n     * Default label is same as route segment\r\n     */\r\n    @Input() autoGenerate = true;\r\n\r\n    /**\r\n     * By default query params will be preserved with breadcrumbs\r\n     */\r\n    @Input() preserveQueryParams = true;\r\n\r\n    /**\r\n     * By default query fragments will be preserved with breadcrumbs\r\n     */\r\n    @Input() preserveFragment = true;\r\n\r\n    /**\r\n     * custom class provided by consumer to increase specificity\r\n     * This will benefit to override styles that are conflicting\r\n     */\r\n    @Input() class = '';\r\n\r\n    /**\r\n     * anchorTarget = \"_blank\" makes the breadcrumb link open in a new tab\r\n     */\r\n    @Input() anchorTarget: '_blank' | undefined;\r\n\r\n    /**\r\n     * separator between breadcrumbs, defaults to '/'.\r\n     * User can customize separator either by passing a String or Template\r\n     *\r\n     * String --> Ex: <lib-breadcrumb separator=\"-\"> </lib-breadcrumb>\r\n     *\r\n     * Template --> Ex: <lib-breadcrumb [separator]=\"separatorTemplate\"> </lib-breadcrumb>\r\n     */\r\n    @Input('separator')\r\n    set separator(value: string) {\r\n        this._separator = value || '/';\r\n    }\r\n    get separator() {\r\n        return this._separator;\r\n    }\r\n\r\n    setupMessage = 'not set up yet';\r\n    someParameterValue = null;\r\n\r\n    constructor(\r\n        private breadcrumbService: BreadcrumbService,\r\n        activateRoute: ActivatedRoute\r\n    ) {\r\n        // breadcrumb inside ngIf works only this way\r\n        activateRoute.params.subscribe((params) => {\r\n            this.setupComponent(params['someParam']);\r\n        });\r\n    }\r\n\r\n    setupComponent(someParam: any) {\r\n        this.setupMessage = 'set up at ' + new Date();\r\n        this.someParameterValue = someParam;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(\r\n            map((breadcrumbs: BreadcrumbDefinition[]) => {\r\n                return breadcrumbs\r\n                    .filter((breadcrumb: BreadcrumbDefinition) => {\r\n                        // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\r\n                        // this filters autogenerated labels in case of \"[autoGenerate]: false\"\r\n                        if (this.autoGenerate) {\r\n                            return true;\r\n                        }\r\n                        return !breadcrumb.isAutoGeneratedLabel;\r\n                    })\r\n                    .map((breadcrumb: BreadcrumbDefinition) => {\r\n                        // Do not mutate breadcrumb as its source of truth.\r\n                        // There can be scenarios where we can have multiple lib-breadcrumb instances in page\r\n                        const { routeInterceptor, routeLink } = breadcrumb;\r\n                        return {\r\n                            ...breadcrumb,\r\n                            routeLink: routeInterceptor?.(routeLink || '', breadcrumb) || routeLink,\r\n                        };\r\n                    });\r\n            })\r\n        );\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "breadcrumbService",
                        "type": "BreadcrumbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activateRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 102,
                "jsdoctags": [
                    {
                        "name": "breadcrumbService",
                        "type": "BreadcrumbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activateRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "separator": {
                    "name": "separator",
                    "setSignature": {
                        "name": "separator",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 94,
                        "rawdescription": "\n\nseparator between breadcrumbs, defaults to '/'.\nUser can customize separator either by passing a String or Template\n\nString --> Ex: <lib-breadcrumb separator=\"-\"> </lib-breadcrumb>\n\nTemplate --> Ex: <lib-breadcrumb [separator]=\"separatorTemplate\"> </lib-breadcrumb>\n",
                        "description": "<p>separator between breadcrumbs, defaults to &#39;/&#39;.\nUser can customize separator either by passing a String or Template</p>\n<p>String --&gt; Ex: <lib-breadcrumb separator=\"-\"> </lib-breadcrumb></p>\n<p>Template --&gt; Ex: &lt;lib-breadcrumb [separator]=&quot;separatorTemplate&quot;&gt; </lib-breadcrumb></p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "separator",
                        "type": "",
                        "returnType": "",
                        "line": 97
                    }
                }
            },
            "templateData": "<!-- <div aria-label=\"breadcrumb\">\r\n  <ul *ngIf=\"breadcrumbList.length<=4\" class=\"c-breadcrumb\">\r\n    <li *ngFor=\"let breadCrumb of breadcrumbList;\" class=\"c-breadcrumb-item\" tabindex=\"0\">\r\n      <a *ngIf=\"href\" class=\"c-bc {{breadCrumb.active ? 'active' : ''}}\"\r\n         href=\"{{breadCrumb.link}}\">{{capitalizeFirstLetter((breadCrumb.name))}}</a>\r\n      <span *ngIf=\"!href\" class=\"c-bc {{breadCrumb.active ? 'active' : ''}}\"\r\n         (click)=\"go(breadCrumb.link)\">{{capitalizeFirstLetter((breadCrumb.name))}}</span>\r\n    </li>\r\n  </ul>\r\n  <ul *ngIf=\"breadcrumbList.length>4\" class=\"c-breadcrumb\">\r\n    <li *ngFor=\"let breadCrumb of breadcrumbSubList1;\" class=\"c-breadcrumb-item\" tabindex=\"0\">\r\n      <a *ngIf=\"href\" class=\"c-bc {{breadCrumb.active ? 'active' : ''}}\"\r\n         href=\"{{breadCrumb.link}}\">{{capitalizeFirstLetter((breadCrumb.name))}}</a>\r\n      <span *ngIf=\"!href\" class=\"c-bc {{breadCrumb.active ? 'active' : ''}}\"\r\n            (click)=\"go(breadCrumb.link)\">{{capitalizeFirstLetter((breadCrumb.name))}}</span>\r\n    </li>\r\n    <li class=\"c-breadcrumb-item\" tabindex=\"0\">\r\n      <span class=\"dots-bc\">...</span>\r\n    </li>\r\n\r\n    <li *ngFor=\"let breadCrumb of breadcrumbSubList2;\" class=\"c-breadcrumb-item\" tabindex=\"0\">\r\n      <a *ngIf=\"href\" class=\"c-bc {{breadCrumb.active ? 'active' : ''}}\"\r\n         href=\"{{breadCrumb.link}}\">{{capitalizeFirstLetter((breadCrumb.name))}}</a>\r\n      <span *ngIf=\"!href\" class=\"c-bc {{breadCrumb.active ? 'active' : ''}}\"\r\n            (click)=\"go(breadCrumb.link)\">{{capitalizeFirstLetter((breadCrumb.name))}}</span>\r\n    </li>\r\n  </ul>\r\n</div> -->\r\n\r\n<nav aria-label=\"breadcrumb\" class=\"breadcrumb-root\" [ngClass]=\"class\">\r\n  <ol class=\"breadcrumb-list\">\r\n    <ng-container *ngFor=\"\r\n        let breadcrumb of breadcrumbs$ | async;\r\n        last as isLast;\r\n        first as isFirst;\r\n        index as index;\r\n        count as count\r\n      \">\r\n      <li class=\"breadcrumb-item\">\r\n        <a *ngIf=\"!isLast\" class=\"breadcrumb-link\" [ngClass]=\"{ 'breadcrumb-link-disabled': breadcrumb.disable }\"\r\n          [attr.aria-disabled]=\"breadcrumb.disable\" [attr.tabIndex]=\"breadcrumb.disable ? -1 : 0\"\r\n          rel=\"noopener noreferrer\" [routerLink]=\"breadcrumb.routeInterceptor ? breadcrumb.routeInterceptor(breadcrumb.routeLink || '', breadcrumb) : breadcrumb.routeLink\" \r\n          [queryParams]=\"preserveQueryParams ? breadcrumb.queryParams : undefined\" [fragment]=\"preserveFragment ? breadcrumb.fragment : undefined\"\r\n          [target]=\"anchorTarget ? anchorTarget : '_self'\">\r\n          <ng-container *ngTemplateOutlet=\"\r\n              itemTemplate;\r\n              context: {\r\n                $implicit: breadcrumb.label,\r\n                info: breadcrumb.info,\r\n                last: isLast,\r\n                first: isFirst,\r\n                index: index,\r\n                count: count\r\n              }\r\n            \"></ng-container>\r\n          <ng-container *ngIf=\"!itemTemplate\">{{\r\n            breadcrumb.label\r\n            }}</ng-container>\r\n        </a>\r\n\r\n        <label *ngIf=\"isLast\" class=\"breadcrumb-trail\">\r\n          <ng-container *ngTemplateOutlet=\"\r\n              itemTemplate;\r\n              context: {\r\n                $implicit: breadcrumb.label,\r\n                info: breadcrumb.info,\r\n                last: isLast,\r\n                first: isFirst,\r\n                index: index,\r\n                count: count\r\n              }\r\n            \"></ng-container>\r\n          <ng-container *ngIf=\"!itemTemplate\">{{\r\n            breadcrumb.label\r\n            }}</ng-container>\r\n        </label>\r\n      </li>\r\n\r\n      <li *ngIf=\"!isLast\" class=\"breadcrumb-separator\" aria-hidden=\"true\">\r\n        {{ separator }}\r\n      </li>\r\n    </ng-container>\r\n  </ol>\r\n</nav>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-f18d2a2aa6731572fda03215ab8a9252e8de5aef2aa6e7bec485083d4fa4d93124ccdaaaf5a513a1cbeae16f54812c0d8398192677e393c766d5a75976815159",
            "file": "projects/design-system/src/lib/atoms/button/components/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "this.label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "'right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "class",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "clickEvt",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initButtonAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInizializza i bottoni in base alla documentazione di PrimeNG.\n",
                    "description": "<p>Inizializza i bottoni in base alla documentazione di PrimeNG.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, SimpleChanges } from \"@angular/core\";\r\n// import { PrimeNGConfig } from 'primeng/api';\r\n\r\n@Component({\r\n    selector: \"lib-button\",\r\n    templateUrl: \"./button.component.html\",\r\n    styleUrls: [\"./button.component.scss\"],\r\n})\r\nexport class ButtonComponent {\r\n    class: string = \"\";\r\n\r\n    @Input() type: string = \"\"; //secondary, secondary-rounded, rounded, link, link-icon\r\n    @Input() size: string = \"\"; //big, small or empty\r\n    @Input() label: string = \"\"; //this is the label in the button\r\n    @Input() ariaLabel: string = this.label; //this is the label in the button\r\n    @Input() icon: string = \"\"; //require css class for primeng icons\r\n    @Input() disabled: boolean = false; //boolean to disable button events\r\n    @Input() iconPosition: any = 'right'; //string to position the icon\r\n\r\n    @Output() onClick: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes) {\r\n            this.initButtonAttributes();\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initButtonAttributes();\r\n    }\r\n\r\n    // constructor(private primeNgConfig: PrimeNGConfig) {}\r\n\r\n    clickEvt() {\r\n        this.onClick.emit();\r\n    }\r\n\r\n    /**\r\n     * Inizializza i bottoni in base alla documentazione di PrimeNG.\r\n     */\r\n    initButtonAttributes(): void {\r\n        this.class = '';\r\n        // Gestione del tipo di bottone da mostrare in pagina\r\n        switch (this.type) {\r\n            case \"\":\r\n                break;\r\n            case \"secondary\":\r\n                this.class += \" p-button-secondary\";\r\n                break;\r\n            case \"secondary-rounded\":\r\n                this.class += \" p-button-secondary p-button-rounded\";\r\n                break;\r\n            case \"secondary-outlined\":\r\n                this.class += \" p-button-secondary p-button-outlined\";\r\n                break;\r\n            case \"rounded\":\r\n                this.class += \" p-button-rounded\";\r\n                break;\r\n            case \"link\":\r\n            case \"link-icon\":\r\n                this.class += \" p-button-link\";\r\n                break;\r\n            case \"link-secondary\":\r\n                this.class += \" p-button-link p-button-secondary\";\r\n                break;\r\n            case \"secondary-raised\":\r\n                this.class += \" p-button-raised p-button-secondary\";\r\n                break;\r\n        }\r\n\r\n        // Gestione della dimensione del button\r\n        switch (this.size) {\r\n            case \"\":\r\n                break;\r\n            case \"small\":\r\n                this.class += \" p-button-sm\";\r\n                break;\r\n            case \"big\":\r\n                this.class += \" p-button-lg\";\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button pButton pRipple type=\"button\" (click)=\"clickEvt()\" [label]=\"label\" [icon]=\"icon\" [iconPos]=\"iconPosition\"\r\n  [disabled]=\"disabled\" [attr.aria-label]=\"ariaLabel\" [className]=\"class\"></button>\r\n\r\n<!--\r\n  Stando a Figma questi sono i bottoni che servono.\r\n\r\n  Per provare tutte le combinazioni vedere gli esempi più sotto (sez. COMBINAZIONI DI BOTTONI DISPONIBILI) e usare le variabili dentro \"src\\app\\app.component.ts\" per comporre le combinazioni di bottoni:\r\n  - label\r\n  - icon\r\n  - class\r\n  - disabled\r\n\r\n  COMBINAZIONI DI BOTTONI DISPONIBILI:\r\n  <button pButton pRipple type=\"button\" label=\"Normali\"></button>\r\n  <button pButton pRipple type=\"button\" label=\"Secondari\" class=\"p-button-outlined\"></button>\r\n  <button pButton pRipple type=\"button\" label=\"Testuali\" class=\"p-button-link\"></button>\r\n  <button pButton pRipple type=\"button\" label=\"Testuali con icona a sx\" icon=\"pi pi-pencil\" class=\"p-button-link\"></button>\r\n  <button pButton pRipple type=\"button\" icon=\"pi pi-pencil\" class=\"p-button-rounded p-button-text\"></button>\r\n  <button pButton pRipple type=\"button\" icon=\"pi pi-pencil\" class=\"p-button-rounded\"></button>\r\n  <button pButton pRipple type=\"button\" icon=\"pi pi-pencil\" class=\"p-button-rounded p-button-outlined\"></button>\r\n  <button pButton pRipple type=\"button\" icon=\"pi pi-pencil\"></button>\r\n  <button pButton pRipple type=\"button\" icon=\"pi pi-pencil\" class=\"p-button-outlined\"></button>\r\n-->\r\n"
        },
        {
            "name": "CalendarComponent",
            "id": "component-CalendarComponent-1fc7718b7b472e212d343e3363a7ff35fe775fc622573e95595c5ab26f58c12137ec10c5d51d6b35468dabeee55728e8d0d5e4ff270933773890d54765df05e7",
            "file": "projects/design-system/src/lib/atoms/calendar/components/calendar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CalendarComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "lib-calendar",
            "styleUrls": [
                "./calendar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./calendar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appendTo",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "AbstractControl",
                    "decorators": []
                },
                {
                    "name": "dataType",
                    "defaultValue": "'date'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "defaultDateFormat",
                    "defaultValue": "'dd-mm-yy'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabledDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "dropdownMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "firstDayOfWeek",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "highlightedDays",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "Array<string>",
                    "decorators": []
                },
                {
                    "name": "inlineCal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectionType",
                    "defaultValue": "'single'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showButtonBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "timeOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "view",
                    "defaultValue": "'date'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "CalendarTypeView",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clearCalendarValue",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "monthChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "selectedValue",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "yearChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "pcalendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Calendar",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'calendar'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "emitValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isHighlighted",
                    "args": [
                        {
                            "name": "date",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isHoliday",
                    "args": [
                        {
                            "name": "date",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleCalendar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DatePipe } from '@angular/common';\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewChild,\r\n  forwardRef\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALUE_ACCESSOR\r\n} from '@angular/forms';\r\nimport {Calendar, CalendarTypeView} from \"primeng/calendar\";\r\n\r\n@Component({\r\n  selector: 'lib-calendar',\r\n  templateUrl: './calendar.component.html',\r\n  styleUrls: ['./calendar.component.scss'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => CalendarComponent),\r\n    multi: true\r\n  }]\r\n})\r\nexport class CalendarComponent {\r\n  @Input() value!: any;\r\n  @Input() label!: string;\r\n  @Input() disabled: boolean = false;\r\n  @Input() inlineCal: boolean = false;\r\n  @Input() showIcon: boolean = false;\r\n  @Input() dropdownMode: boolean = false;\r\n  @Input() showButtonBar: boolean = false;\r\n  @Input() selectionType: string = 'single';\r\n  @Input() control: AbstractControl = new FormControl();\r\n  @Input() placeholder: string = '';\r\n  @Input() appendTo: string = '';\r\n  @Input() minDate!: Date;\r\n  @Input() maxDate!: Date;\r\n  @Input() defaultDateFormat: string = 'dd-mm-yy';\r\n  @Input() highlightedDays: Array<string> = [];\r\n  @Input() firstDayOfWeek!: number;\r\n  @Input() disabledDays!: number[];\r\n  @Input() timeOnly: boolean = false;\r\n  @Input() dataType: string = 'date';\r\n  @Input() view: CalendarTypeView = 'date';\r\n\r\n  @Output() selectedValue: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() clearCalendarValue: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() yearChange: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() monthChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  @ViewChild('calendar') pcalendar!: Calendar;\r\n\r\n  formData!: FormGroup;\r\n\r\n  onChange: any = () => {\r\n  }\r\n  onTouch: any = () => {\r\n  }\r\n\r\n  get haveError() {\r\n    return this.control && this.control.errors && (!this.control.pristine || this.control.touched);\r\n  }\r\n\r\n  get haveErrorParent() {\r\n    return this.control.parent && this.control.parent.errors && (!this.control.pristine || this.control.touched);\r\n  }\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private datePipe: DatePipe\r\n  ) { }\r\n\r\n  // this method sets the value programmatically\r\n  writeValue(value: string) {\r\n    this.value = value;\r\n  }\r\n\r\n  // set UI element value changes emit function\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn\r\n  }\r\n\r\n  // set touching element emit function\r\n  registerOnTouched(fn: any) {\r\n    this.onTouch = fn\r\n  }\r\n\r\n  // upon disabled statu change, this method gets triggered\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  // upon UI element value change, this method gets triggered\r\n  emitValue(event: any) {\r\n    this.onChange(event);\r\n    this.selectedValue.emit(this.value);\r\n  }\r\n\r\n  toggleCalendar(): void {\r\n    this.pcalendar.toggle();\r\n  }\r\n\r\n  isHighlighted(date: { month: number; day: number; year: number; }) {\r\n    const dateString = date.year.toString() + '-' + ('0' + (date.month + 1).toString()).slice(-2) + '-' + ('0' + date.day.toString()).slice(-2);\r\n    if (this.highlightedDays.length > 0) {\r\n      return this.highlightedDays?.includes(dateString);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  isHoliday(date: { month: number; day: number; year: number; }) {\r\n    const newDate = new Date(date.year, date.month, date.day);\r\n    if (this.disabledDays?.length > 0) {\r\n      return this.disabledDays.includes(newDate.getDay());\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./calendar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "haveError": {
                    "name": "haveError",
                    "getSignature": {
                        "name": "haveError",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "haveErrorParent": {
                    "name": "haveErrorParent",
                    "getSignature": {
                        "name": "haveErrorParent",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                }
            },
            "templateData": "<!-- <div class=\"field-data field\" *ngIf=\"!(inlineCal || showIcon || this.dropdownMode)\">\r\n    <label *ngIf=\"label\">{{label}}</label>\r\n    <form class=\"data-wrapper\" [formGroup]=\"formData\">\r\n\r\n        <input type=\"number\" [ngClass]=\"{'ng-invalid ng-dirty': haveErrorParent || haveError}\" formControlName=\"date\"\r\n            pInputText placeholder=\"gg\" max=\"31\" min=\"1\" />\r\n        <input type=\"number\" [ngClass]=\"{'ng-invalid ng-dirty':haveErrorParent ||  haveError}\" formControlName=\"month\"\r\n            pInputText placeholder=\"mm\" max=\"12\" min=\"1\" />\r\n        <input type=\"number\" [ngClass]=\"{'ng-invalid ng-dirty':haveErrorParent ||  haveError}\" formControlName=\"year\"\r\n            pInputText placeholder=\"aaaa\" />\r\n\r\n        <p-calendar appendTo=\"body\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"calendarDate\" [showIcon]=\"true\"\r\n            (onSelect)=\"selectDate(calendarDate)\" inputId=\"icon\"></p-calendar>\r\n</form>\r\n<span class=\"p-error\" *ngIf=\"formData.errors?.['invalidDate']\">Data non valida</span> -->\r\n\r\n<!-- </div> -->\r\n\r\n<div class=\"field-data field\" *ngIf=\"inlineCal || showIcon || this.dropdownMode\">\r\n  <label *ngIf=\"label\">{{label}}</label>\r\n\r\n  <p-calendar #calendar [showButtonBar]=\"showButtonBar\" [disabled]=\"disabled\" [(ngModel)]=\"value\" [appendTo]=\"appendTo\"\r\n    [showIcon]=\"showIcon\" inputId=\"icon\" [inline]=\"inlineCal\" (onSelect)=\"emitValue($event)\"\r\n    [dateFormat]=\"defaultDateFormat\" [ngClass]=\"{'max-w-full' : inlineCal, 'inline-cal': inlineCal}\"\r\n    [selectionMode]=\"selectionType\" [readonlyInput]=\"true\" [placeholder]=\"placeholder\" [minDate]=\"minDate\"\r\n    [firstDayOfWeek]=\"firstDayOfWeek\" [maxDate]=\"maxDate\" (onClearClick)=\"clearCalendarValue.emit()\"\r\n              (onMonthChange)=\"monthChange.emit($event)\" (onYearChange)=\"yearChange.emit($event)\" [timeOnly]=\"timeOnly\" [dataType]=\"dataType\" [view]=\"view\">\r\n    <ng-template pTemplate=\"date\" let-date>\r\n      <span [ngClass]=\"{'holidays': isHoliday(date), 'selected-date': isHighlighted(date)}\">{{date.day}}</span>\r\n    </ng-template>\r\n  </p-calendar>\r\n\r\n\r\n</div>\r\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-36918db5c48ecd70c4de547459f7ef40ddf970ab1ec6c9d23051bc8d0a27b0186a86fcafb4c8a3ae89321df8bf34b631c4b4d424a3b813cc566e31d58ed06192",
            "file": "projects/design-system/src/lib/atoms/card/components/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cHeader",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cStyle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cStyleClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cSubHeader",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cardTileSelectedEmit",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "emitClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'lib-card',\r\n    templateUrl: './card.component.html',\r\n    styleUrls: ['./card.component.scss'],\r\n})\r\n\r\nexport class CardComponent {\r\n    @Input() cHeader: string = '';\r\n    @Input() cSubHeader: string = '';\r\n    @Input() cStyle: string = '';\r\n    @Input() cStyleClass: string = '';\r\n\r\n    @Output() cardTileSelectedEmit: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    emitClick(event: any): void {\r\n        this.cardTileSelectedEmit.emit(event);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<p-card [header]=\"cHeader\" [subheader]=\"cSubHeader\" [style]=\"cStyle\" [styleClass]=\"cStyleClass\"\r\n    (click)=\"emitClick($event)\">\r\n    <ng-template pTemplate=\"header\">\r\n        <ng-content select=\"[cHeaderTemplate]\"></ng-content>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"title\">\r\n        <ng-content select=\"[cTitleTemplate]\"></ng-content>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"subtitle\">\r\n        <ng-content select=\"[cSubtitleTemplate]\"></ng-content>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"content\">\r\n        <ng-content select=\"[cContentTemplate]\"></ng-content>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"footer\">\r\n        <ng-content select=\"[cFooterTemplate]\"></ng-content>\r\n    </ng-template>\r\n</p-card>\r\n"
        },
        {
            "name": "CartComponent",
            "id": "component-CartComponent-aa750f8a89cecb89e508db39122bd70071d2aa9a33d3f90c5441e879182d8aa05fd1716be2e551e14eb54c6f266ff6690143bd9ee904cce1bafa82731ca62aef",
            "file": "projects/design-system/src/lib/molecole/header-items/components/cart/cart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-cart",
            "styleUrls": [
                "./cart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "externalBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "externalHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "show",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openOverlay",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, TemplateRef } from '@angular/core';\r\nimport { HeaderItemsService } from '../../services/header-items.service';\r\n\r\n@Component({\r\n    selector: 'lib-cart',\r\n    templateUrl: './cart.component.html',\r\n    styleUrls: ['./cart.component.scss']\r\n})\r\nexport class CartComponent implements OnInit {\r\n    @Input() rows: any[] = [];\r\n    @Input() externalBody!: TemplateRef<any>;\r\n    @Input() externalHeader!: TemplateRef<any>;\r\n\r\n    protected show: boolean = false;\r\n\r\n\r\n    constructor(private headerItemsService: HeaderItemsService) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.headerItemsService.cartItems$.subscribe((value: any) => {\r\n            this.rows = [];\r\n            this.rows = [...value];\r\n        })\r\n    }\r\n\r\n    protected openOverlay(event: any) {\r\n        event.stopPropagation();\r\n        this.show = !this.show;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".cart-popup {\r\n    z-index: 1000;\r\n    position: absolute;\r\n    top: 150px;\r\n}\r\n",
                    "styleUrl": "./cart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "headerItemsService",
                        "type": "HeaderItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "headerItemsService",
                        "type": "HeaderItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"cart\" #cart (click)=\"openOverlay($event)\">\r\n    <span class=\"pi pi-shopping-cart\"></span>\r\n    <span class=\"small-semibold\">Carrello</span>\r\n    <span *ngIf=\"rows.length > 0\"><p-badge [value]=\"rows.length.toString()\" severity=\"danger\"></p-badge></span>\r\n    <div class=\"popup-cart\" [style.display]=\"show ? 'initial' : 'none'\">\r\n        <div class=\"container\">\r\n            <div>\r\n                <ng-content select=\"[header]\"></ng-content>\r\n            </div>\r\n            <div *ngFor=\"let row of rows; let i = index\">\r\n                <ng-template [ngTemplateOutlet]=\"externalBody ? externalBody : internalBody\"\r\n                    [ngTemplateOutletContext]=\"{data:row, i:i}\">\r\n                </ng-template>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<ng-template #internalHeader>\r\n    <lib-button [size]=\"'small'\" [label]=\"'Richiedi consultazione'\" [type]=\"'primary'\"></lib-button>\r\n</ng-template>\r\n<ng-template #internalBody let-data=\"data\" let-i=\"i\">\r\n    {{data.id}} / {{data.title}}\r\n    <lib-button [size]=\"'small'\" [label]=\"'Richiedi consultazione'\" [type]=\"'primary'\"></lib-button>\r\n</ng-template>"
        },
        {
            "name": "CheckboxButtonComponent",
            "id": "component-CheckboxButtonComponent-e9d4c6ea91d786104e3207d2374d0ed8ce486240087c90f870b5fe88fd85f33c1528cdbb48a276e8d17fcf00d14bb6968ae05433ef57806b0f4c0de7da09f8a6",
            "file": "projects/design-system/src/lib/atoms/checkbox/components/checkbox-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxButtonComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "lib-checkbox-button",
            "styleUrls": [
                "./checkbox-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "check",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "checked",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "AbstractControl",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "CheckBox[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rounded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emitChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "emitValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValueItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, SimpleChanges, ViewChild, OnInit, OnChanges, forwardRef } from '@angular/core';\r\n\r\nimport { AbstractControl, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { CheckBox } from '../models/checkbox.model';\r\n\r\n@Component({\r\n    selector: 'lib-checkbox-button',\r\n    templateUrl: './checkbox-button.component.html',\r\n    styleUrls: ['./checkbox-button.component.scss'],\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => CheckboxButtonComponent),\r\n        multi: true\r\n    }]\r\n})\r\nexport class CheckboxButtonComponent implements OnChanges {\r\n    //Insert in input checked status, disabled, and label\r\n    @Input() checked: any = [];\r\n    @Input() check: boolean = false;\r\n    @Input() disabled: boolean = false;\r\n    @Input() items!: CheckBox[];\r\n    @Input() rounded: boolean = false;\r\n    @Input() label: string = '';\r\n    @Input() control: AbstractControl = new FormControl();\r\n\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n      if (changes && changes['items']?.currentValue) {\r\n        this.items.forEach(element => {\r\n          if (element?.checked) {\r\n            this.checked.push(element);\r\n          } else {\r\n            element.checked = false;\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    //Return in output a boolean value\r\n    @Output() emitChange: EventEmitter<any> = new EventEmitter<any>();\r\n    value: any;\r\n    onChange: any = () => { }\r\n    onTouch: any = () => { }\r\n\r\n    get haveError() {\r\n        return this.control && this.control.errors && (!this.control.pristine || this.control.touched);\r\n    }\r\n\r\n\r\n    // this method sets the value programmatically\r\n    writeValue(value: string) {\r\n        this.value = value;\r\n    }\r\n\r\n    // set UI element value changes emit function\r\n    registerOnChange(fn: any) {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    // set touching element emit function\r\n    registerOnTouched(fn: any) {\r\n        this.onTouch = fn;\r\n    }\r\n\r\n    // upon disabled statu change, this method gets triggered\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    // upon UI element value change, this method gets triggered\r\n    emitValue(event: any, index: number) {\r\n        if (index !== -1) {\r\n            if (event.checked)\r\n                this.checked.push({...this.items[index]});\r\n            else {\r\n                const indexToRemove = this.checked.findIndex((item: any) => item === this.items[index]);\r\n                this.checked.splice(indexToRemove, 1);\r\n            }\r\n        }\r\n        this.value = index !== -1 ? this.checked : { checked: event.checked, defaultEvent: event.originalEvent as MouseEvent };\r\n        this.onChange(this.value);\r\n        this.emitChange.emit(this.value);\r\n    }\r\n\r\n    getValueItem(item) {\r\n      return this.checked.find(el => el === item) ? true : false;\r\n    }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "haveError": {
                    "name": "haveError",
                    "getSignature": {
                        "name": "haveError",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                }
            },
            "templateData": "<div class=\"check field\">\r\n    <label *ngIf=\"label && items\">{{label}}</label>\r\n    <div class=\"check-list\" *ngIf=\"items\">\r\n        <div *ngFor=\"let item of items; let i = index\">\r\n            <p-checkbox #checkboxInput [ngClass]=\"{'rounded': rounded}\" [label]=\"item?.label\" [(ngModel)]=\"item.checked\"\r\n                (onChange)=\"emitValue($event, i)\" [binary]=\"true\" [trueValue]=\"true\"\r\n                [falseValue]=\"false\" [disabled]=\"disabled || item?.disabled\"></p-checkbox>\r\n        </div>\r\n    </div>\r\n    <div class=\"check-list\" *ngIf=\"!items\">\r\n        <p-checkbox #checkboxInput [ngClass]=\"{'rounded': rounded}\" (onChange)=\"emitValue($event, -1)\" [binary]=\"true\"\r\n            [(ngModel)]=\"check\" [trueValue]=\"true\" [falseValue]=\"false\" [disabled]=\"disabled\"\r\n            [label]=\"label\"></p-checkbox>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ChipComponent",
            "id": "component-ChipComponent-e4d731a151d19ebe463e900e625ea76501b09c0db34823052e2030d6916936ec48638d009a29d1dcd886cdc3b1fa352edd0806461cb41f322e5465481cf91844",
            "file": "projects/design-system/src/lib/atoms/chip/components/chip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-chip",
            "styleUrls": [
                "./chip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "image",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "removable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "removeIcon",
                    "defaultValue": "\"pi pi-times-circle\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onRemoveEmit",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'lib-chip',\r\n    templateUrl: './chip.component.html',\r\n    styleUrls: ['./chip.component.scss']\r\n})\r\nexport class ChipComponent {\r\n\r\n    @Input() removable: boolean = false;\r\n    @Input() label: string = '';\r\n    @Input() icon: string = '';\r\n    @Input() image: string = '';\r\n    @Input() style: any;\r\n    @Input() styleClass: string = '';\r\n    @Input() removeIcon: string = \"pi pi-times-circle\";\r\n\r\n    @Output() onRemove: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    onRemoveEmit(event: any): void {\r\n        this.onRemove.emit(event);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./chip.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<p-chip [label]=\"label\" [icon]=\"icon\" [image]=\"image\" [removable]=\"removable\" [style]=\"style\" [styleClass]=\"styleClass\" [removeIcon]=\"removeIcon\" (onRemove)=\"onRemoveEmit($event)\" ></p-chip>\r\n"
        },
        {
            "name": "ChooseFileComponent",
            "id": "component-ChooseFileComponent-eba01455605339da58f4eca26e6cbfb8eb397be98b571a8d27b37d4eb9da89d8856626194abf1294895889efc1c97f11d2674d1a940b83066e5b45501b55871b",
            "file": "projects/design-system/src/lib/atoms/choose-file/components/choose-file.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ChooseFileComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "lib-choose-file",
            "styleUrls": [
                "./choose-file.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./choose-file.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "acceptExtensions",
                    "defaultValue": "'image/*'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "AbstractControl",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fileLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxFileSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onLoadFile",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "arrayFiles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "uploader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileUpload",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'uploader', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170,
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild, forwardRef } from '@angular/core';\r\nimport { AbstractControl, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FileUpload } from 'primeng/fileupload';\r\n\r\n@Component({\r\n  selector: 'lib-choose-file',\r\n  templateUrl: './choose-file.component.html',\r\n  styleUrls: ['./choose-file.component.scss'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => ChooseFileComponent),\r\n    multi: true\r\n  }]\r\n})\r\nexport class ChooseFileComponent implements OnChanges {\r\n  @Input() label!: string;\r\n  @Input() acceptExtensions: string = 'image/*';\r\n  @Input() maxFileSize!: number;\r\n  @Input() icon!: string;\r\n  @Input() disabled = false;\r\n  @Input() control: AbstractControl = new FormControl();\r\n  @Input() value: any;\r\n  @Input() multiple: boolean = true;\r\n  @Input() fileLimit!: number;\r\n  @Output() onLoadFile: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  protected arrayFiles: File[] = [];\r\n\r\n  @ViewChild('uploader', { static: false }) protected uploader!: FileUpload;\r\n\r\n  onChange: any = () => { }\r\n  onTouch: any = () => { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['value']?.currentValue?.length === 0) {\r\n      this.clearFile();\r\n    }\r\n  }\r\n\r\n  // get control() {\r\n  //     return this.controlContainer.control?.get(this.formControlName);\r\n  // }\r\n\r\n  get inputValue(): string {\r\n    return this.arrayFiles.map(el => el.name).join(',')\r\n  };\r\n  get haveError() {\r\n    return this.control && this.control.errors && (!this.control.pristine || this.control.touched);\r\n  }\r\n\r\n  // this method sets the value programmatically\r\n  writeValue(value: string) {\r\n    this.value = value;\r\n  }\r\n\r\n  // set UI element value changes emit function\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  // set touching element emit function\r\n  registerOnTouched(fn: any) {\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  // upon disabled statu change, this method gets triggered\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  onSelect(event: any) {\r\n    this.arrayFiles = [];\r\n    event.currentFiles.forEach((file: File) => {\r\n      this.arrayFiles.push(file);\r\n    })\r\n    this.uploader.clear();\r\n    this.onLoadFile.emit(event.currentFiles);\r\n  }\r\n\r\n  clearFile() {\r\n    this.uploader.clear();\r\n    this.arrayFiles = [];\r\n    this.onLoadFile.emit('');\r\n  }\r\n\r\n  uploadFiles() {\r\n    this.uploader.upload();\r\n  }\r\n\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./choose-file.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "inputValue": {
                    "name": "inputValue",
                    "getSignature": {
                        "name": "inputValue",
                        "type": "string",
                        "returnType": "string",
                        "line": 44
                    }
                },
                "haveError": {
                    "name": "haveError",
                    "getSignature": {
                        "name": "haveError",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                }
            },
            "templateData": "<div class=\"file-choose field\">\r\n  <div class=\"label\" *ngIf=\"label\">\r\n    <label [for]=\"uploader\">{{label}}</label>\r\n  </div>\r\n  <div class=\"input\">\r\n    <lib-input [disabled]=\"true\" class=\"lib-input\" [icon]=\"arrayFiles.length > 0 ? 'pi pi-times' : ''\"\r\n      [ngClass]=\"{'ng-invalid ng-dirty': haveError}\" (iconClicked)=\"clearFile()\" [iconPos]=\"'right'\"\r\n      [value]=\"inputValue\" [placeholder]=\"'Nome File'\"></lib-input>\r\n    <p-fileUpload #uploader [disabled]=\"disabled\" mode=\"basic\" [chooseLabel]=\"''\" [accept]=\"acceptExtensions\"\r\n      [maxFileSize]=\"maxFileSize\" [customUpload]=\"true\" [chooseIcon]=\"icon\" (onSelect)=\"onSelect($event)\"\r\n      [showCancelButton]=\"true\" [cancelIcon]=\"'pi pi-close'\" [showUploadButton]=\"false\" [uploadLabel]=\"''\"\r\n      [multiple]=\"multiple\" [fileLimit]=\"fileLimit\"></p-fileUpload>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CircleStatusComponent",
            "id": "component-CircleStatusComponent-0f54951cd696da9246f87d34980b83ee0c7ee053c6453da40d0e7153162be347232f82f48aec4a4d17ec33375ca773445902a076ac6833eb0d766f3fd53780ed",
            "file": "projects/design-system/src/lib/atoms/circle-status/components/circle-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-circle-status",
            "styleUrls": [
                "./circle-status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./circle-status.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "type",
                    "defaultValue": "'success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'lib-circle-status',\r\n    templateUrl: './circle-status.component.html',\r\n    styleUrls: ['./circle-status.component.scss']\r\n})\r\nexport class CircleStatusComponent {\r\n    @Input() type: string = 'success';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./circle-status.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<span\r\n    [ngClass]=\"{'circle-status': true, 'danger': type === 'danger', 'success': type === 'success', 'info': type === 'info', 'warning': type === 'warning'}\"></span>"
        },
        {
            "name": "CtaBarComponent",
            "id": "component-CtaBarComponent-efe770a141ada9059d2ece96876f0ecba143fb5967b21c250550736495f299520804ab6081fb9cb1ed72db4cc316747a96c7a8944f26be562145c8996f3ef1c6",
            "file": "projects/design-system/src/lib/molecole/cta-bar/components/cta-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-cta-bar",
            "styleUrls": [
                "./cta-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cta-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isMain",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'lib-cta-bar',\r\n    templateUrl: './cta-bar.component.html',\r\n    styleUrls: ['./cta-bar.component.scss']\r\n})\r\nexport class CtaBarComponent {\r\n    @Input() isMain: boolean = false;\r\n\r\n    constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./cta-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": [],
            "templateData": "<div class=\"cta-bar {{isMain}}\" [class.main]=\"isMain\">\r\n    <div>\r\n        <ng-content select=\"[back]\"></ng-content>\r\n    </div>\r\n    <div>\r\n        <ng-content select=\"[middle]\"></ng-content>\r\n    </div>\r\n    <div>\r\n        <ng-content select=\"[cta]\"></ng-content>\r\n    </div>\r\n</div>"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-14552a5749caec221430491ff03bcec3256e5445438a7c2a4fd1b412d482274781c2b0ac635cfdd654e520d687163bfa36d56bcadf60e4a641841346dd274eae",
            "file": "projects/design-system/src/lib/atoms/dialog/components/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-dialog",
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "closable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "externalHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "visibleChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "hideDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, TemplateRef } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"lib-dialog\",\r\n    templateUrl: \"./dialog.component.html\",\r\n    styleUrls: [\"./dialog.component.scss\"],\r\n})\r\nexport class DialogComponent {\r\n    @Input() visible: boolean = false;\r\n    @Output() visibleChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n    @Input() title: string = \"\";\r\n    @Input() subtitle: string = \"\";\r\n    @Input() closable: boolean = true;\r\n    @Input() externalHeader?: TemplateRef<any>;\r\n\r\n    hideDialog() {\r\n        this.visible = false;\r\n        this.visibleChange.emit(this.visible);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".background-modal {\r\n    /* Hidden by default */\r\n    position: fixed; /* Stay in place */\r\n    z-index: 1; /* Sit on top */\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%; /* Full width */\r\n    height: 100%; /* Full height */\r\n    overflow: auto; /* Enable scroll if needed */\r\n    background-color: rgb(0, 0, 0); /* Fallback color */\r\n    background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\r\n\r\n    .dialog {\r\n        background-color: #fefefe;\r\n        margin: 15% auto; /* 15% from the top and centered */\r\n        padding: 20px;\r\n        border: 1px solid #888;\r\n        width: 80%; /* Could be more or less, depending on screen size */\r\n    }\r\n}\r\n",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<p-dialog [header]=\"title\" [(visible)]=\"visible\" styleClass=\"'p-dialog--responsive'\" [modal]=\"true\" [draggable]=\"false\"\r\n    [resizable]=\"true\" [closable]=\"closable\" (onHide)=\"hideDialog()\">\r\n    <ng-template pTemplate=\"header\">\r\n        <ng-template [ngTemplateOutlet]=\"externalHeader ? externalHeader : defaultHeader\">\r\n\r\n        </ng-template>\r\n    </ng-template>\r\n    <ng-content select=\"[body]\"></ng-content>\r\n\r\n    <ng-template pTemplate=\"footer\">\r\n        <ng-content select=\"[footer]\">\r\n        </ng-content>\r\n    </ng-template>\r\n\r\n</p-dialog>\r\n\r\n<ng-template #defaultHeader>\r\n    <div class=\"header-dialog\">\r\n        <h6>{{title}}</h6>\r\n        <span class=\"subtitle-second-regular\">{{subtitle}}</span>\r\n    </div>\r\n</ng-template>"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-b96b27958006f3daebf62a7eda0c0f99051d065ccba3a38090d36bbf18cfd4b23d46f5e7e51cee7e2f80a30c7afc56b0ffcf370e5d07a1d3ef5aa3171a8a685e",
            "file": "projects/design-system/src/lib/atoms/dropdown/components/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DropdownComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "lib-dropdown",
            "styleUrls": [
                "./dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "clear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "codeString",
                    "defaultValue": "'code'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "AbstractControl",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filterPlaceholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nameString",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedItemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "valueDropdown",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "DropdownType[] | string[] | any",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "virtualScrollItemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isObject",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "values",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DropdownType[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "emitValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { AbstractControl, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DropdownType } from '../models/dropdown.model';\r\nimport { Dropdown } from 'primeng/dropdown';\r\n\r\n@Component({\r\n  selector: 'lib-dropdown',\r\n  templateUrl: './dropdown.component.html',\r\n  styleUrls: ['./dropdown.component.scss'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => DropdownComponent),\r\n    multi: true\r\n  }]\r\n})\r\nexport class DropdownComponent implements OnInit {\r\n  protected isObject: boolean = false;\r\n\r\n  @Input() valueDropdown: DropdownType[] | string[] | any = [];\r\n  @Input() label!: string;\r\n  @Input() appendTo!: string;\r\n  @Input() codeString: string = 'code';\r\n  @Input() nameString: string = 'name';\r\n  @Input() filter = false;\r\n  @Input() filterPlaceholder = '';\r\n  @Input() placeholder!: string;\r\n  @Input() clear: boolean = false;\r\n  @Input() virtualScroll: boolean = false;\r\n  @Input() virtualScrollItemSize!: number;\r\n  @Input() control: AbstractControl = new FormControl();\r\n  @Input() disabled: boolean = false;\r\n  @Input() value: any;\r\n  @Input() selectedItemTemplate!: TemplateRef<any>;\r\n  values: DropdownType[] = [];\r\n\r\n\r\n  @Output() selectedValue: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  ngOnInit() {\r\n    this.isObject = this.valueDropdown ? typeof this.valueDropdown[0] !== \"string\" : true;\r\n  }\r\n\r\n  get haveError() {\r\n    return this.control && this.control.errors && (!this.control.pristine || this.control.touched);\r\n  }\r\n\r\n  // upon UI element value change, this method gets triggered\r\n  protected emitValue(event: any) {\r\n    this.value = event.value;\r\n    this.selectedValue.emit(this.value);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "haveError": {
                    "name": "haveError",
                    "getSignature": {
                        "name": "haveError",
                        "type": "",
                        "returnType": "",
                        "line": 43
                    }
                }
            },
            "templateData": "<div class=\"dropdown-wrapper field\">\r\n  <label *ngIf=\"label\">{{label}}</label>\r\n  <p-dropdown [placeholder]=\"placeholder\" [ngClass]=\"{'ng-invalid ng-dirty': haveError}\" [appendTo]=\"appendTo\"\r\n    [disabled]=\"!valueDropdown || disabled\" [showClear]=\"clear\" [options]=\"valueDropdown\" [filter]=\"filter\"\r\n    [filterPlaceholder]=\"filterPlaceholder\" [virtualScroll]=\"virtualScroll\"\r\n    [virtualScrollItemSize]=\"virtualScrollItemSize\" (onChange)=\"emitValue($event)\"\r\n    [optionLabel]=\"isObject ? nameString : ''\" [(ngModel)]=\"value\" [optionValue]=\"isObject ? codeString : ''\">\r\n    <ng-template pTemplate=\"selectedItem\" *ngIf=\"selectedItemTemplate\">\r\n      <ng-container [ngTemplateOutlet]=\"selectedItemTemplate ? selectedItemTemplate : null\"></ng-container>\r\n    </ng-template>\r\n  </p-dropdown>\r\n</div>"
        },
        {
            "name": "ErrorInlineComponent",
            "id": "component-ErrorInlineComponent-fda0cb7038078780a3690833d1dc0503b0ef7221d80115d9e830c78342d693a7387821dbee120b5c7550f81ea58e6eaad2f23af395a2c4163f0d53c827da5f9e",
            "file": "projects/design-system/src/lib/atoms/error-inline/components/error-inline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-error-inline",
            "styleUrls": [
                "./error-inline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error-inline.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "controlName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { AbstractControl, FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'lib-error-inline',\r\n  templateUrl: './error-inline.component.html',\r\n  styleUrls: ['./error-inline.component.scss']\r\n})\r\nexport class ErrorInlineComponent {\r\n  @Input() control: FormControl = new FormControl();\r\n\r\n  @Input('controlName') formControlName: string = '';\r\n\r\n  get errorVal(): string {\r\n    if (this.control?.errors) {\r\n      if ('maxlength' in (this.control.errors)) {\r\n        return 'Lunghezza massima ' + this.control.errors['maxlength']['requiredLength'] + ' caratteri';\r\n      } else if ('required' in (this.control.errors)) {\r\n        return 'Campo obbligatorio';\r\n      } else if ('minlength' in (this.control.errors)) {\r\n        return 'Lunghezza minima ' + this.control.errors['minlength']['requiredLength'] + ' caratteri';\r\n      } else if ('min' in (this.control.errors)) {\r\n        return 'Valore minimo ' + this.control.errors['min']['min'];\r\n      } else if ('max' in (this.control.errors)) {\r\n        return 'Valore massimo ' + this.control.errors['max']['max'];\r\n      } else if ('email' in (this.control.errors)) {\r\n        return 'Indirizzo email non valido';\r\n      } else if ('email' in (this.control.errors)) {\r\n        return 'Indirizzo email non valido';\r\n      } else if ('fiscalCodeInvalid' in (this.control.errors)) {\r\n        return 'Codice fiscale non valido';\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ul {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n  ::ng-deep {\r\n    li {\r\n      position: relative;\r\n      font-size: 0.75rem;\r\n      text-transform: capitalize;\r\n\r\n      &::before {\r\n        content: \" \";\r\n        position: absolute;\r\n        top: 0px;\r\n        left: 5px;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./error-inline.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "errorVal": {
                    "name": "errorVal",
                    "getSignature": {
                        "name": "errorVal",
                        "type": "string",
                        "returnType": "string",
                        "line": 14
                    }
                }
            },
            "templateData": "<ul class=\"p-error\">\r\n  <li *ngIf=\"errorVal\">{{errorVal}}</li>\r\n\r\n  <ng-content></ng-content>\r\n</ul>"
        },
        {
            "name": "FileComponent",
            "id": "component-FileComponent-cdf110d6d4dea848cdd168af0fec0406222accb30b77468bb11141fadbc337dbb1e1c6a57640712aedb663abbfcd922ca0f0aa87858ecc92bc4e1051aca8a07d",
            "file": "projects/design-system/src/lib/molecole/file/components/file.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-file",
            "styleUrls": [
                "./file.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "checkboxDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "ellipsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "File",
                    "decorators": []
                },
                {
                    "name": "isBig",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fileSelected",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorIcon",
                    "defaultValue": "'assets/svg/info-circle.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "iconArray",
                    "defaultValue": "[\r\n        { extensions: ['doc', 'docx', 'txt', 'docm', 'dotm', 'dot', 'dotx'], path: 'assets/svg/microsoft-word.svg' },\r\n        { extensions: ['pdf'], path: 'assets/svg/pdf.svg' },\r\n        { extensions: ['xls', 'xlsx', 'xlsm', 'xlsb', 'xltx', 'xlt', 'csv'], path: 'assets/svg/microsoft-excel.svg' },\r\n        { extensions: ['ppt', 'pptx', 'pptm', 'xps', 'potx', 'ppsx', 'pps', 'odp', ''], path: 'assets/svg/microsoft-powerpoint.svg' },\r\n        { extensions: ['zip', 'rar'], path: 'assets/svg/zip.svg' },\r\n        { extensions: ['png', 'tiff', 'jpeg', 'jpg'], path: 'assets/svg/img.svg' },\r\n        //TIFF image to add\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "srcIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "fileToggle",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { File } from '../models/file.model';\r\n\r\n@Component({\r\n    selector: 'lib-file',\r\n    templateUrl: './file.component.html',\r\n    styleUrls: ['./file.component.scss']\r\n})\r\nexport class FileComponent implements OnInit {\r\n    @Input() file!: File;\r\n    @Input() checkable: boolean = false;\r\n    @Input() checkboxDisabled: boolean = false;\r\n    @Input() checked: boolean = false;\r\n    @Input() ellipsed: boolean = true;\r\n    @Input() isBig: boolean = true;\r\n    @Input() error: boolean = false;\r\n\r\n    errorIcon= 'assets/svg/info-circle.svg';\r\n    srcIcon!: string;\r\n\r\n    iconArray = [\r\n        { extensions: ['doc', 'docx', 'txt', 'docm', 'dotm', 'dot', 'dotx'], path: 'assets/svg/microsoft-word.svg' },\r\n        { extensions: ['pdf'], path: 'assets/svg/pdf.svg' },\r\n        { extensions: ['xls', 'xlsx', 'xlsm', 'xlsb', 'xltx', 'xlt', 'csv'], path: 'assets/svg/microsoft-excel.svg' },\r\n        { extensions: ['ppt', 'pptx', 'pptm', 'xps', 'potx', 'ppsx', 'pps', 'odp', ''], path: 'assets/svg/microsoft-powerpoint.svg' },\r\n        { extensions: ['zip', 'rar'], path: 'assets/svg/zip.svg' },\r\n        { extensions: ['png', 'tiff', 'jpeg', 'jpg'], path: 'assets/svg/img.svg' },\r\n        //TIFF image to add\r\n    ];\r\n\r\n    @Output() fileSelected: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n    ngOnInit() {\r\n        let lastIndex = this.file.title.lastIndexOf('.');\r\n        if (lastIndex > 0) {\r\n            const extension = this.iconArray.filter(item => item.extensions.includes(this.file.title.substring(lastIndex + 1, this.file.title.length).toLocaleLowerCase()));\r\n            if (extension.length > 0)\r\n                this.srcIcon = extension[0].path;\r\n        }\r\n\r\n    }\r\n\r\n    fileToggle(event: boolean) {\r\n        this.fileSelected.emit(event);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./file.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"file-wrapper\">\r\n    <div class=\"file-structure\">\r\n        <lib-checkbox-button *ngIf=\"checkable\" [check]=\"checked\" [disabled]=\"checkboxDisabled\"\r\n            (emitChange)=\"fileToggle($event)\"></lib-checkbox-button>\r\n        <img class=\"file-icon\" *ngIf=\"srcIcon || error\" [src]=\"error?errorIcon:srcIcon\" alt=\"file icon\" />\r\n        <div class=\"file-data\">\r\n            <div [ngClass]=\"{'title-icon': srcIcon && isBig, 'title': !srcIcon && isBig, 'small-title': !isBig, 'ellipsed': ellipsed, 'error': error}\"\r\n                [title]=\"file.title\">\r\n                {{file.title}}</div>\r\n            <div *ngIf=\"file.dimension\" class=\"dimension\">{{file.dimension}}</div>\r\n        </div>\r\n    </div>\r\n    <div class=\"file-actions\">\r\n        <ng-content select=\"[file-actions]\"></ng-content>\r\n    </div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "FileStatusComponent",
            "id": "component-FileStatusComponent-2a503b7682dcae6e7ed8723c09f641855f5eb1cdb87b219903d568d4d493821de91dead908a02dc9827e0cd24cbc79c128f8920ec32a9760f57250430410bb4e",
            "file": "projects/design-system/src/lib/molecole/file-status/components/file-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-file-status",
            "styleUrls": [
                "./file-status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-status.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "FileStatus[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { FileStatus } from '../models/fileStatus.model';\r\n\r\n@Component({\r\n  selector: 'lib-file-status',\r\n  templateUrl: './file-status.component.html',\r\n  styleUrls: ['./file-status.component.scss']\r\n})\r\nexport class FileStatusComponent {\r\n    @Input() fileList: FileStatus[] = [];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./file-status.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"wrapper-file-list\">\r\n    <div *ngFor=\"let file of fileList; let i = index\">\r\n        <lib-file [checkable]=\"false\" [file]=\"file\">\r\n            <ng-container file-actions>\r\n                <lib-tag [tagSeverity]=\"file.status == 'OK' ? 'success' : 'danger'\" [tagLabel]=\"file.status\"></lib-tag>\r\n            </ng-container>\r\n        </lib-file>\r\n    </div>\r\n\r\n</div>"
        },
        {
            "name": "FiltersChipsComponent",
            "id": "component-FiltersChipsComponent-8ff67e977e1971c5d9e6091cdf06cc4151887fd6a2130dfc143094e1a87bffe6faa1cd86eebf8c252763cb4e997d62555d1b4e33c78fb6346342f29e45b94905",
            "file": "projects/design-system/src/lib/micro-organismi/filters/components/filters-chips/filters-chips.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-filters-chips",
            "styleUrls": [
                "./filters-chips.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filters-chips.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "chipsList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "OnlyFiltersChip[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'Filtri attivi'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter<OnlyFiltersChip>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<OnlyFiltersChip>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "resetDropdown",
                    "args": [
                        {
                            "name": "chipValue",
                            "type": "FiltersChip",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "chipValue",
                            "type": "FiltersChip",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FiltersChip, OnlyFiltersChip } from '../../models/filters.model';\r\n\r\n@Component({\r\n    selector: 'lib-filters-chips',\r\n    templateUrl: './filters-chips.component.html',\r\n    styleUrls: ['./filters-chips.component.scss']\r\n})\r\nexport class FiltersChipsComponent {\r\n    @Input() chipsList: OnlyFiltersChip[] = [];\r\n    @Input() title: string = 'Filtri attivi';\r\n\r\n    @Output() onRemove: EventEmitter<OnlyFiltersChip> = new EventEmitter<OnlyFiltersChip>();\r\n\r\n    get resultsActive(): boolean {\r\n        return (this.chipsList && this.chipsList.length > 0 && this.chipsList.filter(item => item && item.result && item.result.length > 0).length > 0);\r\n    }\r\n\r\n    resetDropdown(chipValue: FiltersChip, filterId: number): void {\r\n        this.onRemove.emit({ id: filterId, result: [chipValue], data: [] });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./filters-chips.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "resultsActive": {
                    "name": "resultsActive",
                    "getSignature": {
                        "name": "resultsActive",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 15
                    }
                }
            },
            "templateData": "<div *ngIf=\"resultsActive\" class=\"chips-title\">{{title}}</div>\r\n<div class=\"chips-container\">\r\n    <span *ngFor=\"let singleFilter of chipsList; let j = index\" class=\"chips-container\">\r\n        <lib-chip class=\"single-chip\" *ngFor=\"let singleChip of singleFilter.result; let i = index\"\r\n            (onRemove)=\"resetDropdown(singleChip, singleFilter.id)\" [label]=\"singleChip.chipsLabel\" [removable]=\"true\"\r\n            removeIcon=\"pi pi-times\"></lib-chip>\r\n    </span>\r\n</div>\r\n"
        },
        {
            "name": "FiltersComponent",
            "id": "component-FiltersComponent-11d276e0a79cfbada7a7c9d5835a0876b310cbf3ab5f594c2f3f7bb7de59226aeac6943491025ad7df05e1b38188bf7203633d61e451da17a9c9e990c529796c",
            "file": "projects/design-system/src/lib/micro-organismi/filters/components/filters/filters.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-filters",
            "styleUrls": [
                "./filters.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filters.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "dropdownValues",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "FiltersModel[]",
                    "decorators": []
                },
                {
                    "name": "inputSelectedValues",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "TreeSelectModel[][]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chipsValues",
                    "defaultValue": "new EventEmitter<FiltersChip[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<FiltersChip[]>"
                },
                {
                    "name": "filterValues",
                    "defaultValue": "new EventEmitter<FiltersResult>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<FiltersResult>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "calendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<CalendarComponent>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'calendar'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "chipsExport",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "chipsList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FiltersChip[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "dropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<DropdownComponent>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'dropdown'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "resetCalendarValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Date> | null",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "selectedValues",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeSelectModel[][]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "createCalendarChip",
                    "args": [
                        {
                            "name": "event",
                            "type": "Array<object>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownOption",
                            "type": "FiltersModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "calendar",
                            "type": "CalendarComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Array<object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownOption",
                            "type": "FiltersModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "calendar",
                            "type": "CalendarComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDropChip",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectionType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectionType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTreeChip",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectionType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectionType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetDropdown",
                    "args": [
                        {
                            "name": "chipIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chipValue",
                            "type": "FiltersChip",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "chipIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chipValue",
                            "type": "FiltersChip",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unselectOption",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport { FiltersChip, FiltersModel, FiltersResult } from '../../models/filters.model';\r\nimport { DropdownComponent, TreeSelectModel } from '../../../../../public-api';\r\nimport { CalendarComponent } from '../../../../../public-api';\r\n\r\n@Component({\r\n  selector: 'lib-filters',\r\n  templateUrl: './filters.component.html',\r\n  styleUrls: ['./filters.component.scss']\r\n})\r\nexport class FiltersComponent implements OnInit {\r\n  @Input() dropdownValues: FiltersModel[] = [];\r\n  @Input() inputSelectedValues: TreeSelectModel[][] = [];\r\n\r\n  selectedValues: TreeSelectModel[][] = [];\r\n  @Output() filterValues: EventEmitter<FiltersResult> = new EventEmitter<FiltersResult>();\r\n  @Output() chipsValues: EventEmitter<FiltersChip[]> = new EventEmitter<FiltersChip[]>();\r\n\r\n  chipsList: FiltersChip[] = [];\r\n  chipsExport: any = {};\r\n\r\n  resetCalendarValue!: Array<Date> | null;\r\n\r\n  @ViewChildren('calendar') calendar!: QueryList<CalendarComponent>;\r\n  @ViewChildren('dropdown') dropdown!: QueryList<DropdownComponent>;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.inputSelectedValues) {\r\n      this.selectedValues = this.inputSelectedValues;\r\n    }\r\n    this.dropdownValues.forEach((item) => this.chipsExport[item.field] = []);\r\n    this.dropdownValues.filter((item, index) => {\r\n      if (item.type === 'treeselect' || item.type === 'dropdown')\r\n        this.selectedValues[index] = []\r\n    });\r\n  }\r\n\r\n\r\n  createTreeChip(event: { originalEvent: PointerEvent, node: TreeSelectModel }, dropdownIndex: number, dropdownField: string, selectionType: string): void {\r\n    if (event.node) {\r\n      if (selectionType === 'single') {\r\n        let indexToRemove = this.chipsList.findIndex(item => item.field == dropdownField);\r\n        if (indexToRemove !== -1)\r\n          this.chipsList.splice(indexToRemove, 1);\r\n      }\r\n      this.chipsList.push({ chipsLabel: event.node.label, dropdownIndex: dropdownIndex, field: dropdownField, data: event.node.data, type: \"treeselect\", value: event.node.label });\r\n      this.chipsList.sort((a, b) => a.dropdownIndex - b.dropdownIndex);\r\n      if (selectionType === 'single')\r\n        this.chipsExport[dropdownField][0] = event.node.data;\r\n      else\r\n        this.chipsExport[dropdownField].push(event.node.data);\r\n      this.filterValues.emit(this.chipsExport);\r\n      if (selectionType == 'single') {\r\n        this.selectedValues[dropdownIndex][0] = event.node;\r\n      } else {\r\n        this.selectedValues[dropdownIndex].push(event.node);\r\n      }\r\n    }\r\n  }\r\n\r\n  createDropChip(event: any, dropdownIndex: number, dropdownField: string, selectionType: string): void {\r\n    if (event != null) {\r\n      if (selectionType === 'single') {\r\n        let indexToRemove = this.chipsList.findIndex(item => item.field == dropdownField);\r\n        if (indexToRemove !== -1)\r\n          this.chipsList.splice(indexToRemove, 1);\r\n      }\r\n      const label = this.dropdownValues[dropdownIndex].data?.filter(item => item.data === event)[0].label;\r\n      this.chipsList.push({ chipsLabel: label || '', dropdownIndex: dropdownIndex, field: dropdownField, data: event, type: \"dropdown\", value: label || '' });\r\n      this.chipsList.sort((a, b) => a.dropdownIndex - b.dropdownIndex);\r\n      if (selectionType === 'single')\r\n        this.chipsExport[dropdownField][0] = event;\r\n      else\r\n        this.chipsExport[dropdownField].push(event);\r\n      this.filterValues.emit(this.chipsExport);\r\n      if (selectionType == 'single') {\r\n        this.selectedValues[dropdownIndex][0] = { data: event, label: label || '' };\r\n      } else {\r\n        this.selectedValues[dropdownIndex].push({ data: event, label: label || '' });\r\n      }\r\n      this.dropdownValues[dropdownIndex].data?.forEach(item => {\r\n        if (item.data === event)\r\n          item.disabled = true;\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  createCalendarChip(event: Array<object>, dropdownIndex: number, dropdownOption: FiltersModel, calendar: CalendarComponent): void {\r\n    //verifico che non ci sia già la chip per il selettore specificato\r\n    const EXIST = this.chipsList.some((d: any) => d.dropdownIndex == dropdownIndex);\r\n    if (event[0] && event[1]) {\r\n      const DATE_RANGE = `${dropdownOption.placeholder}: ${event[0].toLocaleString().split(',')[0]} - ${event[1].toLocaleString().split(',')[0]}`;\r\n      if (EXIST) {\r\n        //elimina quello esistente\r\n        const C_INDEX = this.chipsList.findIndex(c => c.dropdownIndex == dropdownIndex);\r\n        this.chipsList.splice(C_INDEX, 1);\r\n      }\r\n      //Crea il chip\r\n      this.chipsList.push({ chipsLabel: DATE_RANGE, dropdownIndex: dropdownIndex, field: dropdownOption.field, data: event, type: \"calendar\", value: DATE_RANGE });\r\n      this.chipsList.sort((a, b) => a.dropdownIndex - b.dropdownIndex);\r\n      //Emette il valore\r\n      this.chipsExport[dropdownOption.field] = event;\r\n      this.filterValues.emit(this.chipsExport);\r\n      //this.resetCalendarValue = null;\r\n      calendar.pcalendar.value = null;\r\n      //const CAL = this.calendar.toArray();\r\n      //const CAL_INDEX = CAL.findIndex(c => c.value == event.node.label);\r\n\r\n      calendar.toggleCalendar();\r\n    }\r\n  }\r\n\r\n  unselectOption(event: { originalEvent: PointerEvent, node: TreeSelectModel }, dropdownIndex: number, dropdownField: string): void {\r\n    const C_INDEX = this.chipsList.findIndex(c => c.chipsLabel == event.node.label);\r\n    this.chipsList.splice(C_INDEX, 1);\r\n    const E_INDEX = this.chipsExport[dropdownField].findIndex((d: string) => d == event.node.data);\r\n    this.chipsExport[dropdownField].splice(E_INDEX, 1);\r\n    this.filterValues.emit(this.chipsExport);\r\n    const N_INDEX = this.selectedValues[dropdownIndex].indexOf(event.node);\r\n    this.selectedValues[dropdownIndex].splice(N_INDEX, 1);\r\n  }\r\n\r\n  resetDropdown(chipIndex: number, chipValue: FiltersChip): void {\r\n    this.chipsList.splice(chipIndex, 1);\r\n    const E_INDEX = this.chipsExport[chipValue.field].findIndex((d: string) => d == chipValue.data); //add data to chipValue\r\n\r\n\r\n\r\n    if (chipValue.type == \"treeselect\") {\r\n      this.chipsExport[chipValue.field].splice(E_INDEX, 1);\r\n      const N_INDEX = this.selectedValues[chipValue.dropdownIndex].findIndex(n => n.label == chipValue.chipsLabel);\r\n      this.selectedValues[chipValue.dropdownIndex].splice(N_INDEX, 1);\r\n      this.selectedValues[chipValue.dropdownIndex] = [...this.selectedValues[chipValue.dropdownIndex]];\r\n    }\r\n    else if (chipValue.type == \"calendar\") {\r\n      this.chipsExport[chipValue.field] = [];\r\n      //this.resetCalendarValue = null;\r\n    } else if (chipValue.type === 'dropdown') {\r\n      this.chipsExport[chipValue.field].splice(E_INDEX, 1);\r\n      const dropdownFilteredArray = this.dropdownValues.filter(item => item.type === 'dropdown');\r\n      const index = dropdownFilteredArray.findIndex(item => item.field === chipValue.field);\r\n      const dropdown = this.dropdown.get(index);\r\n      if (dropdown)\r\n        dropdown.value = null;\r\n      this.dropdownValues[chipValue.dropdownIndex].data?.forEach(item => {\r\n        if (item.data === chipValue.data)\r\n          item.disabled = false;\r\n      });\r\n    }\r\n    this.filterValues.emit(this.chipsExport);\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./filters.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"filters-wrapper\">\r\n    <div class=\"dropdown-title\">Filtra per</div>\r\n    <div class=\"dropdown-container\">\r\n\r\n        <div *ngFor=\"let dropdownOptions of dropdownValues; let i = index\">\r\n            <lib-tree-select class=\"single-dropdown\"\r\n                *ngIf=\"dropdownOptions.type == 'treeselect' && dropdownOptions.data\"\r\n                [selectionType]=\"dropdownOptions.selectionType || 'multiple'\" [nodes]=\"dropdownOptions.data\"\r\n                (emitSelectedOption)=\"createTreeChip($event, i, dropdownOptions.field, (dropdownOptions.selectionType || 'multiple'))\"\r\n                [(selectedNodes)]=\"selectedValues[i]\" (emitUnselect)=\"unselectOption($event, i, dropdownOptions.field)\"\r\n                [placeholder]=\"dropdownOptions.placeholder\" [valueTemplate]=\"valueTemplate\">\r\n\r\n                <ng-template #valueTemplate value>\r\n                    {{selectedValues[i].length > 0 && dropdownOptions.selectionType === 'single' ?\r\n                    selectedValues[i][0].label : dropdownOptions.placeholder}}\r\n                </ng-template>\r\n            </lib-tree-select>\r\n\r\n            <lib-dropdown [virtualScroll]=\"true\" [valueDropdown]=\"dropdownOptions.data\" [codeString]=\"'data'\" #dropdown\r\n                *ngIf=\"dropdownOptions.type == 'dropdown' && dropdownOptions.data\" [nameString]=\"'label'\"\r\n                [placeholder]=\"dropdownOptions.placeholder\" [virtualScrollItemSize]=\"38\"\r\n                (selectedValue)=\"createDropChip($event, i, dropdownOptions.field, (dropdownOptions.selectionType || 'multiple'))\"\r\n                [selectedItemTemplate]=\"selectedItemTemplate\">\r\n                <ng-template #selectedItemTemplate pTemplate=\"selectedItem\">\r\n                    {{dropdownOptions.placeholder}}\r\n                </ng-template>\r\n            </lib-dropdown>\r\n            <lib-calendar #calendar *ngIf=\"dropdownOptions.type == 'calendar'\" [dropdownMode]=\"true\"\r\n                [placeholder]=\"dropdownOptions.placeholder\" [selectionType]=\"'range'\"\r\n                (selectedValue)=\"createCalendarChip($event, i, dropdownOptions, calendar)\"></lib-calendar>\r\n        </div>\r\n\r\n    </div>\r\n    <div *ngIf=\"chipsList.length>0\" class=\"chips-title\">Filtri attivi</div>\r\n    <div class=\"chips-container\">\r\n        <lib-chip class=\"single-chip\" *ngFor=\"let singleChip of chipsList; let j = index\"\r\n            (onRemove)=\"resetDropdown(j, singleChip)\" [label]=\"singleChip.value\" [removable]=\"true\"\r\n            removeIcon=\"pi pi-times\"></lib-chip>\r\n    </div>\r\n</div>"
        },
        {
            "name": "HeaderActionsComponent",
            "id": "component-HeaderActionsComponent-aa3c545d8a4d0aaf493c962b96d5def806b89fa40eca7e6c6f1002352da7de4d13a34c6edacd6262b561e08f6b18a72a4e9ceeb9efc91da08dc4d6da83efc7ed",
            "file": "projects/design-system/src/lib/molecole/header-items/components/header-actions/header-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-header-actions",
            "styleUrls": [
                "./header-actions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-actions.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "enableDate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableSubtitle",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "externalFooter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "externalItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "formattedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "Function",
                    "decorators": []
                },
                {
                    "name": "isExternalNumber",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isHelp",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "languages",
                    "defaultValue": "[\r\n    { code: 'it', name: 'it' },\r\n    { code: 'en', name: 'en' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "Language[]",
                    "decorators": []
                },
                {
                    "name": "notificationsEnabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "notificationsNumber",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "paramToNumber",
                    "defaultValue": "'isRead'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readAllLabel",
                    "defaultValue": "'Mostra di più'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedOption",
                    "defaultValue": "{ code: 'fr', name: 'fr' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "Language",
                    "decorators": []
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "valueDropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "DropdownType[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dropdownSelection",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "emitHelp",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "emitNotificationClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter"
                },
                {
                    "name": "emitOpenOverlay",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                },
                {
                    "name": "emitPageClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter"
                },
                {
                    "name": "languageChange",
                    "defaultValue": "new EventEmitter<Language>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "EventEmitter<Language>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "fileUpload",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileUpload[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLanguage",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitDropdownSelection",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\r\nimport { FileUpload } from '../../../upload-file/models/file-upload.model';\r\nimport { Language } from '../../models/language.model';\r\nimport { MenuItem } from '../../models/menuItem.model';\r\nimport { HeaderItemsService } from '../../services/header-items.service';\r\nimport { DropdownType } from '../../../../atoms/dropdown/models/dropdown.model';\r\n\r\n@Component({\r\n  selector: 'lib-header-actions',\r\n  templateUrl: './header-actions.component.html',\r\n  styleUrls: ['./header-actions.component.scss']\r\n})\r\nexport class HeaderActionsComponent implements OnInit {\r\n  fileUpload: FileUpload[] = [];\r\n\r\n  @Input() notificationsEnabled: boolean = true;\r\n  @Input() isHelp: boolean = false;\r\n  @Input() valueDropdown!: DropdownType[];\r\n  @Input() value!: string;\r\n  @Input() pageUrl!: string;\r\n  @Input() readAllLabel: string = 'Mostra di più';\r\n  @Input() externalItems!: TemplateRef<any>;\r\n  @Input() externalFooter!: TemplateRef<any>;\r\n\r\n  @Input() user!: MenuItem[];\r\n\r\n  @Input() languages: Language[] = [\r\n    { code: 'it', name: 'it' },\r\n    { code: 'en', name: 'en' },\r\n  ]\r\n\r\n  @Input() notificationsNumber: number = 0;\r\n  @Input() isExternalNumber: boolean = false;\r\n  @Input() paramToNumber: string = 'isRead';\r\n  @Input() enableSubtitle: boolean = true;\r\n  @Input() enableDate: boolean = false;\r\n  @Input() enableIcon: boolean = false;\r\n  @Input() formattedDate!: Function;\r\n\r\n  @Input() selectedOption: Language = { code: 'fr', name: 'fr' };\r\n\r\n  @Output() languageChange: EventEmitter<Language> = new EventEmitter<Language>();\r\n  @Output() dropdownSelection: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() emitHelp: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() emitPageClick = new EventEmitter<void>();\r\n  @Output() emitNotificationClick = new EventEmitter<any>();\r\n  @Output() emitOpenOverlay = new EventEmitter<void>();\r\n  \r\n\r\n  constructor(private headerItemsService: HeaderItemsService) { }\r\n\r\n  ngOnInit() {\r\n    this.headerItemsService.uploadFiles$.subscribe(values => {\r\n      this.fileUpload = [...values];\r\n    })\r\n  }\r\n\r\n  emitDropdownSelection(event: string) {\r\n    this.dropdownSelection.emit(event);\r\n  }\r\n\r\n  changeLanguage(event) {\r\n    this.languageChange.emit(event);\r\n    if (this.notificationsEnabled) {\r\n      this.notificationsEnabled = false;\r\n      this.notificationsEnabled = true;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n",
                    "styleUrl": "./header-actions.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "headerItemsService",
                        "type": "HeaderItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "headerItemsService",
                        "type": "HeaderItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header-actions\">\r\n  <div *ngIf=\"isHelp\">\r\n    <lib-icon-circle icon=\"pi pi-question-circle\" type=\"help\" size=\"small\"\r\n      (onClick)=\"emitHelp.emit()\"></lib-icon-circle>\r\n  </div>\r\n  <div *ngIf=\"fileUpload.length > 0\">\r\n    <lib-icon-circle icon=\"pi pi-upload\" type=\"help\" size=\"small\" (click)=\"op.toggle($event)\"></lib-icon-circle>\r\n    <p-overlayPanel #op>\r\n      <ng-template pTemplate=\"content\">\r\n        <span *ngFor=\"let file of fileUpload\">\r\n          <lib-upload-file [file]=\"file\"></lib-upload-file>\r\n        </span>\r\n      </ng-template>\r\n    </p-overlayPanel>\r\n  </div>\r\n  <div *ngIf=\"notificationsEnabled\">\r\n    <lib-header-notifications [pageUrl]=\"pageUrl\" [readAllLabel]=\"readAllLabel\" [externalItems]=\"externalItems\"\r\n      (emitNotificationClick)=\"emitNotificationClick.emit($event)\" (emitPageClick)=\"emitPageClick.emit()\"\r\n      (emitOpenOverlay)=\"emitOpenOverlay.emit()\" [notificationsNumber]=\"notificationsNumber\"\r\n      [isExternalNumber]=\"isExternalNumber\" [paramToNumber]=\"paramToNumber\" [enableSubtitle]=\"enableSubtitle\" [formattedDate]=\"formattedDate\"\r\n      [enableDate]=\"enableDate\" [enableIcon]=\"enableIcon\" [externalFooter]=\"externalFooter\"></lib-header-notifications>\r\n  </div>\r\n  <div *ngIf=\"languages.length > 1\">\r\n    <lib-language-selector [options]=\"languages\" [selectedOption]=\"selectedOption\" placeholder=\"Seleziona lingua\"\r\n      (selectedOptionChange)=\"changeLanguage($event)\"></lib-language-selector>\r\n  </div>\r\n  <div *ngIf=\"valueDropdown?.length > 0\">\r\n    <lib-header-menu-user [menuNavbar]=\"user\" [valueDropdown]=\"valueDropdown\" [value]=\"value\"\r\n      (dropdownSelection)=\"emitDropdownSelection($event)\"></lib-header-menu-user>\r\n  </div>\r\n</div>"
        },
        {
            "name": "HeaderMenuComponent",
            "id": "component-HeaderMenuComponent-8e0827e492090b9563bcd649e573a969a72b7a2f1d0970658b6f44fca5aba91fc5751b00b5524b3a708c4dc2a003f01b872e9956c178af9020ebb9f63e3aa08e",
            "file": "projects/design-system/src/lib/molecole/header-menu/components/header-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-header-menu",
            "styleUrls": [
                "./header-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "informationflows",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "MenubarItem[]",
                    "decorators": []
                },
                {
                    "name": "usermanagement",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { MenubarItem } from '../models/menu-item.model';\r\n\r\n@Component({\r\n    selector: 'lib-header-menu',\r\n    templateUrl: './header-menu.component.html',\r\n    styleUrls: ['./header-menu.component.scss']\r\n})\r\nexport class HeaderMenuComponent {\r\n    constructor() { /* TODO document why this constructor is empty */ }\r\n\r\n    @Input() informationflows: string = '';\r\n    @Input() usermanagement: string = '';\r\n    @Input() items!: MenubarItem[];\r\n\r\n    ngOnDestroy() {\r\n        // TODO document why this method 'ngOnDestroy' is empty    \r\n    }\r\n\r\n    ngOnInit() {\r\n        // TODO document why this method 'ngOnInit' is empty\r\n    }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./header-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": [],
            "templateData": "<div class=\"menu-bar-container\">\r\n    <p-menubar [model]=\"items\">\r\n        <ng-template pTemplate=\"end\">\r\n            <div class=\"wrapper\">\r\n                <ng-content [select]=\"[endTemp]\"></ng-content>\r\n            </div>\r\n        </ng-template>\r\n    </p-menubar>\r\n</div>"
        },
        {
            "name": "HeaderMenuUserComponent",
            "id": "component-HeaderMenuUserComponent-81617212b6f62df74c81ce5eadafe637e200ab7129e240e8890b85aef79d6a1628b2cc59ae80db19b4ead38975c8fa20b43f3edbed525227006b3ddc1dbac408",
            "file": "projects/design-system/src/lib/molecole/header-items/components/header-menu-user/header-menu-user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-header-menu-user",
            "styleUrls": [
                "./header-menu-user.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-menu-user.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "menuNavbar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "valueDropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "DropdownType[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dropdownSelection",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroySub$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isMobile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectDropdownValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { MenuItem } from 'primeng/api';\r\nimport { DropdownType } from '../../../../atoms/dropdown/models/dropdown.model';\r\n\r\n\r\n@Component({\r\n  selector: 'lib-header-menu-user',\r\n  templateUrl: './header-menu-user.component.html',\r\n  styleUrls: ['./header-menu-user.component.scss']\r\n})\r\nexport class HeaderMenuUserComponent implements OnInit {\r\n\r\n  isMobile?: boolean\r\n  destroySub$ = new Subject<void>()\r\n  @Input() menuNavbar?: MenuItem[];\r\n  @Input() valueDropdown?: DropdownType[];\r\n  @Input() value?: string;\r\n\r\n  @Output() dropdownSelection = new EventEmitter<string>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnDestroy() {\r\n    this.destroySub$.next()\r\n    this.destroySub$.complete()\r\n  }\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  protected selectDropdownValue(event: string) {\r\n    this.value = event;\r\n    this.dropdownSelection.emit(this.value);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./header-menu-user.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"!isMobile; else responsiveView\">\r\n  <nav *ngIf=\"menuNavbar\">\r\n    <p-menubar [model]=\"menuNavbar\">\r\n    </p-menubar>\r\n  </nav>\r\n  <nav *ngIf=\"valueDropdown\">\r\n    <lib-dropdown [valueDropdown]=\"valueDropdown\" [value]=\"value\"\r\n      (selectedValue)=\"selectDropdownValue($event)\"></lib-dropdown>\r\n  </nav>\r\n</ng-container>\r\n\r\n\r\n<ng-template #responsiveView>\r\n  <!-- <ng-container *ngIf=\"menuNavbar\">\r\n        <p-menu [model]=\"menuNavbar\" #menu [popup]=\"true\" styleClass=\"p-button-menu-top\">\r\n        </p-menu>\r\n        <button pButton pRipple type=\"button\" icon=\"pi pi-user \" class=\"p-button-outlined p-button-rounded\" (click)=\"menu.toggle($event)\"></button>\r\n    </ng-container> -->\r\n</ng-template>"
        },
        {
            "name": "HeaderNotificationsComponent",
            "id": "component-HeaderNotificationsComponent-5e545a9e069b98d0b83a4c5a63b95bc873b960f582bd2efd4b84fa176fc588d631465316d7e9bf1605d70b9d2807e5c1efb15666e2a33d63c586717f4acdd215",
            "file": "projects/design-system/src/lib/molecole/header-items/components/header-notifications/header-notifications.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-header-notifications",
            "styleUrls": [
                "./header-notifications.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-notifications.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "enableDate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableSubtitle",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "externalFooter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "externalItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "formattedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Function",
                    "decorators": []
                },
                {
                    "name": "isExternalNumber",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "notificationsNumber",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "paramToNumber",
                    "defaultValue": "'isRead'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readAllLabel",
                    "defaultValue": "'Mostra di più'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emitNotificationClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                },
                {
                    "name": "emitOpenOverlay",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "emitPageClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "notifications$",
                    "defaultValue": "this.headerItemsService.notifications$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectedNotification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserNotification",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "getFormattedDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, TemplateRef, Output, EventEmitter } from '@angular/core';\r\nimport { UserNotification } from '../../models/user-notification.model';\r\nimport { HeaderItemsService } from '../../services/header-items.service';\r\nimport moment from 'moment';\r\n\r\n@Component({\r\n  selector: 'lib-header-notifications',\r\n  templateUrl: './header-notifications.component.html',\r\n  styleUrls: ['./header-notifications.component.scss']\r\n})\r\nexport class HeaderNotificationsComponent implements OnInit {\r\n  @Input() pageUrl: string = '';\r\n  @Input() readAllLabel: string = 'Mostra di più';\r\n  @Input() externalItems!: TemplateRef<any>;\r\n  @Input() externalFooter!: TemplateRef<any>;\r\n  @Input() notificationsNumber: number = 0;\r\n  @Input() isExternalNumber: boolean = false;\r\n  @Input() paramToNumber: string = 'isRead';\r\n  @Input() enableSubtitle: boolean = true;\r\n  @Input() enableDate: boolean = false;\r\n  @Input() enableIcon: boolean = false;\r\n  @Input() formattedDate!: Function;\r\n\r\n  @Output() emitPageClick = new EventEmitter<void>();\r\n  @Output() emitNotificationClick = new EventEmitter<any>();\r\n  @Output() emitOpenOverlay = new EventEmitter<void>();\r\n\r\n  notifications$ = this.headerItemsService.notifications$;\r\n  selectedNotification!: UserNotification;\r\n\r\n  constructor(protected headerItemsService: HeaderItemsService) { }\r\n\r\n  getFormattedDate(date: Date) {\r\n    if (this.formattedDate) {\r\n      return this.formattedDate(date);\r\n    }\r\n    const momentDate = moment(date);\r\n    const newDate = new Date();\r\n    const momentNewDate = moment(newDate);\r\n    if (momentNewDate.subtract(5, 'm') < momentDate && momentDate >= momentNewDate ) {\r\n      return 'adesso';\r\n    } else if (moment(newDate).subtract(10, 'm') < momentDate && momentDate >= moment(newDate).subtract(5, 'm') ) {\r\n      return '10 minuti fa';\r\n    } else if (moment(newDate).subtract(20, 'm') < momentDate && momentDate >= moment(newDate).subtract(10, 'm') ) {\r\n      return '20 minuti fa';\r\n    } else if (moment(newDate).subtract(30, 'm') < momentDate && momentDate >= moment(newDate).subtract(30, 'm') ) {\r\n      return 'mezzora fa';\r\n    } else if (moment(newDate).subtract(60, 'm') < momentDate && momentDate >= moment(newDate).subtract(30, 'm') ) {\r\n      return 'un\\'ora fa';\r\n    } else if (moment(newDate).subtract(120, 'm') < momentDate && momentDate >= moment(newDate).subtract(60, 'm') ) {\r\n      return 'due ore fa';\r\n    } else if (moment(newDate).subtract(240, 'm') < momentDate && momentDate >= moment(newDate).subtract(120, 'm') ) {\r\n      return 'tre ore fa';\r\n    } else if (moment(newDate).subtract(1, 'day').date() === momentDate.date() ) {\r\n      return 'ieri';\r\n    } else if (moment(newDate).subtract(2, 'day').date() === momentDate.date() ) {\r\n      return '2 giorni fa';\r\n    } else if (moment(newDate).subtract(3, 'day').date() === momentDate.date() ) {\r\n      return '3 giorni fa';\r\n    } else if (moment(newDate).subtract(4, 'day').date() === momentDate.date() ) {\r\n      return '4 giorni fa';\r\n    } else if (moment(newDate).subtract(5, 'day').date() === momentDate.date() ) {\r\n      return '5 giorni fa';\r\n    } else if (moment(newDate).subtract(6, 'day').date() === momentDate.date() ) {\r\n      return '6 giorni fa';\r\n    } else if (moment(newDate).subtract(7, 'day').date() <= momentDate.date() && momentDate >= moment(newDate).subtract(10, 'day') ) {\r\n      return 'una settimana fa';\r\n    } else {\r\n      return momentDate.format('DD MMM yyyy - hh:mm');\r\n    }\r\n  } \r\n\r\n  ngOnInit() {\r\n    this.headerItemsService.notifications$.subscribe(values => {\r\n      if (!this.isExternalNumber) {\r\n        this.notificationsNumber = values.filter(el => el[this.paramToNumber] === false).length;\r\n      }\r\n    })\r\n\r\n    this.headerItemsService.notifications = {\r\n      title: 'Prova notifica più lunga del solito, ancora più lunga del solito',\r\n      subtitle: 'Prova messaggio più lungo del solito',\r\n      id: 0, // parametro della rotta verso cui andare per leggere le notifiche\r\n      isRead: false, // true se la notifica è stata già cliccata, false altrimenti\r\n      url: '',\r\n      icon: 'pi pi-wrench',\r\n      date: new Date(1711731361000)\r\n    }\r\n    this.headerItemsService.notifications = {\r\n      title: 'Prova notifica',\r\n      subtitle: 'Prova messaggio',\r\n      id: 1, // parametro della rotta verso cui andare per leggere le notifiche\r\n      isRead: false, // true se la notifica è stata già cliccata, false altrimenti\r\n      url: '',\r\n      date: new Date(1711795058000)\r\n    }\r\n    this.headerItemsService.notifications = {\r\n      title: 'Prova notifica',\r\n      subtitle: 'Prova messaggio',\r\n      id: 2, // parametro della rotta verso cui andare per leggere le notifiche\r\n      isRead: true, // true se la notifica è stata già cliccata, false altrimenti\r\n      url: '/notifiche',\r\n      icon: 'pi pi-bolt'\r\n    }\r\n    this.headerItemsService.notifications = {\r\n      title: 'Prova notifica',\r\n      subtitle: 'Prova messaggio',\r\n      id: 3, // parametro della rotta verso cui andare per leggere le notifiche\r\n      isRead: true, // true se la notifica è stata già cliccata, false altrimenti\r\n      url: '/notifiche',\r\n      icon: 'pi pi-bell',\r\n      date: new Date(1711355858000)\r\n    }\r\n    this.headerItemsService.notifications = {\r\n      title: 'Prova notifica',\r\n      subtitle: 'Prova messaggio',\r\n      id: 4, // parametro della rotta verso cui andare per leggere le notifiche\r\n      isRead: true, // true se la notifica è stata già cliccata, false altrimenti\r\n      url: '/notifiche'\r\n    }\r\n    this.headerItemsService.notifications = {\r\n      title: 'Prova notifica',\r\n      subtitle: 'Prova messaggio',\r\n      id: 5, // parametro della rotta verso cui andare per leggere le notifiche\r\n      isRead: true, // true se la notifica è stata già cliccata, false altrimenti\r\n      url: '/notifiche'\r\n    }\r\n    this.headerItemsService.notifications = {\r\n      title: 'Prova notifica',\r\n      subtitle: 'Prova messaggio',\r\n      id: 6, // parametro della rotta verso cui andare per leggere le notifiche\r\n      isRead: true, // true se la notifica è stata già cliccata, false altrimenti\r\n      url: '/notifiche'\r\n    }\r\n    this.headerItemsService.notifications = {\r\n      title: 'Prova notifica',\r\n      subtitle: 'Prova messaggio',\r\n      id: 7, // parametro della rotta verso cui andare per leggere le notifiche\r\n      isRead: true, // true se la notifica è stata già cliccata, false altrimenti\r\n      url: '/notifiche'\r\n    }\r\n    this.headerItemsService.notifications = {\r\n      title: 'Prova notifica',\r\n      subtitle: 'Prova messaggio',\r\n      id: 8, // parametro della rotta verso cui andare per leggere le notifiche\r\n      isRead: true, // true se la notifica è stata già cliccata, false altrimenti\r\n      url: '/notifiche'\r\n    }\r\n    this.headerItemsService.notifications = {\r\n      title: 'Prova notifica',\r\n      subtitle: 'Prova messaggio',\r\n      id: 9, // parametro della rotta verso cui andare per leggere le notifiche\r\n      isRead: true, // true se la notifica è stata già cliccata, false altrimenti\r\n      url: '/notifiche'\r\n    }\r\n    this.headerItemsService.notifications = {\r\n      title: 'Prova notifica',\r\n      subtitle: 'Prova messaggio',\r\n      id: 10, // parametro della rotta verso cui andare per leggere le notifiche\r\n      isRead: true, // true se la notifica è stata già cliccata, false altrimenti\r\n      url: '/notifiche'\r\n    }\r\n    this.headerItemsService.notifications = {\r\n      title: 'Prova notifica',\r\n      subtitle: 'Prova messaggio',\r\n      id: 11, // parametro della rotta verso cui andare per leggere le notifiche\r\n      isRead: true, // true se la notifica è stata già cliccata, false altrimenti\r\n      url: '/notifiche'\r\n    }\r\n    this.headerItemsService.notifications = {\r\n      title: 'Prova notifica',\r\n      subtitle: 'Prova messaggio',\r\n      id: 12, // parametro della rotta verso cui andare per leggere le notifiche\r\n      isRead: true, // true se la notifica è stata già cliccata, false altrimenti\r\n      url: '/notifiche'\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./header-notifications.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "headerItemsService",
                        "type": "HeaderItemsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "headerItemsService",
                        "type": "HeaderItemsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<lib-badge (click)=\"overlaynotifications.toggle($event);notificationsNumber = 0;emitOpenOverlay.emit();\" [menuBadge]=\"notificationsNumber.toString()\"></lib-badge>\r\n\r\n<p-overlayPanel styleClass=\"p-overlaypanel p-overlaypanel--notifications\" #overlaynotifications>\r\n\r\n    <ng-template pTemplate>\r\n        <ng-container *ngIf=\"(notifications$ | async) as notify\">\r\n            <p-listbox [options]=\"notify\" [(ngModel)]=\"selectedNotification\" optionLabel=\"title\" optionValue=\"id\"\r\n                styleClass=\"p-listbox p-listbox--notifications\" [listStyleClass]=\"\">\r\n\r\n                <ng-template let-notification pTemplate=\"item\">\r\n\r\n                    <ng-template [ngTemplateOutlet]=\"externalItems ? externalItems : internalItems\"\r\n                        [ngTemplateOutletContext]=\"{notification: notification}\">\r\n\r\n                    </ng-template>\r\n                </ng-template>\r\n\r\n                <ng-template pTemplate=\"footer\" *ngIf=\"externalFooter || pageUrl\">\r\n                    <ng-template [ngTemplateOutlet]=\"externalFooter ? externalFooter : internalFooter\">\r\n\r\n                    </ng-template>\r\n                </ng-template>\r\n\r\n            </p-listbox>\r\n\r\n        </ng-container>\r\n\r\n    </ng-template>\r\n\r\n</p-overlayPanel>\r\n<ng-template #internalItems let-notification=\"notification\">\r\n  <span class=\"notification-container\">\r\n    <div *ngIf=\"enableIcon\">\r\n      <span [class]=\"'icon' + ' ' + (notification?.icon || 'pi pi-bell') + ' ' + (notification?.class || '')\"></span>\r\n    </div>\r\n    <div class=\"notification\"\r\n        (click)=\"emitNotificationClick.emit(notification.id)\"\r\n        title=\"{{ 'Apri la notifica: ' + notification.title }}\">\r\n        <strong *ngIf=\"!notification.isRead\">{{ notification.title }}</strong>\r\n        <div *ngIf=\"notification.isRead\">{{ notification.title }}</div>\r\n        <ng-container *ngIf=\"enableSubtitle\">\r\n          <strong *ngIf=\"notification.subtitle !== '' && !notification.isRead\" class=\"notifications-text subtitle\">{{ notification.subtitle }}</strong>\r\n          <span *ngIf=\"notification.subtitle !== '' && notification.isRead\" class=\"notifications-text subtitle\">{{ notification.subtitle }}</span>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"enableDate\">\r\n          <strong *ngIf=\"notification.date !== '' && !notification.isRead\" class=\"notifications-text date\">{{ getFormattedDate(notification.date) }}</strong>\r\n          <span *ngIf=\"notification.date !== '' && notification.isRead\" class=\"notifications-text date\">{{ getFormattedDate(notification.date) }}</span>\r\n        </ng-container>\r\n    </div>\r\n    <div *ngIf=\"!notification.isRead\" class=\"p-listbox-dot\"></div>\r\n  </span>\r\n\r\n</ng-template>\r\n\r\n<ng-template #internalFooter>\r\n    <strong>\r\n        <div [routerLink]=\"pageUrl\" title=\"Leggi tutte le notifiche\" (click)=\"emitPageClick.emit()\">{{readAllLabel}}</div>\r\n    </strong>\r\n</ng-template>"
        },
        {
            "name": "IconCircleComponent",
            "id": "component-IconCircleComponent-0c394424df52b6129df37ce8bd6da16b07e6dd32d8dc69e1c4486d79ea2f919a57de51397216e177d9600edcce28beadb9a9c1333d63147c6dfbda6fe69bbeae",
            "file": "projects/design-system/src/lib/atoms/icon-circle/components/icon-circle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-icon-circle",
            "styleUrls": [
                "./icon-circle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-circle.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "\"small\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "\"help\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tooltip",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "Tooltip"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "showTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild } from \"@angular/core\";\r\nimport { Tooltip } from \"primeng/tooltip\";\r\n\r\n@Component({\r\n  selector: \"lib-icon-circle\",\r\n  templateUrl: \"./icon-circle.component.html\",\r\n  styleUrls: [\"./icon-circle.component.scss\"],\r\n})\r\n/*\r\n * for tooltip text formatting we can take the tooltipText variable in the foreign-model.component.ts as an example.\r\n * the \"escape\" property of primeNg allows the tooltip to read html tags and special characters present in the string we are going to pass\r\n */\r\nexport class IconCircleComponent {\r\n  // viewChild used to read primeng tooltip component, will be used for toggle on click\r\n  @ViewChild(Tooltip) tooltip!: Tooltip;\r\n\r\n  // the only mandatory variable for the component to function properly, refer to the ICONS enum\r\n  @Input() icon!: string;\r\n\r\n  //  defines the type of icon that will be printed, use 'info' for a white circular icon with blue background, for other info see icon-circle.component\r\n  @Input() type: string = \"help\";\r\n\r\n  // defines the size of the icon, accepts the string 'big' or 'small'\r\n  @Input() size: string = \"small\";\r\n\r\n  // this variable defines the size of the tooltip container and accepts \"md-tooltip\" (width:300px) or \"lg-tooltip\" (width:500px)\r\n  @Input() tooltipSize?: string;\r\n\r\n  /*\r\n   * The tooltip works you value both tooltip variables\r\n   */\r\n  // this optional variable defines the text that will be printed within the tooltip\r\n  @Input() tooltipText?: string;\r\n\r\n  // this variable defines the position of the tooltip and can be 'top', 'right', 'bottom' or 'left'\r\n  @Input() tooltipPosition?: string;\r\n\r\n  // tooltip toggle method\r\n  showTooltip() {\r\n    // I check if the tooltip is active and turn it off\r\n    if (this.tooltip.active) {\r\n      this.tooltip.deactivate();\r\n    }\r\n    // if the tooltip is deactivated it will be activated\r\n    else {\r\n      this.tooltip.activate();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./icon-circle.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- icon with associated tooltips -->\r\n<i [class]=\"icon\"\r\n  [class.info]=\"type == 'info'\" [pTooltip]=\"tooltipText!\" [tooltipPosition]=\"tooltipPosition!\" (click)=\"showTooltip()\"\r\n  tooltipEvent=\"focus\" [escape]=\"false\" [ngClass]=\"tooltipText && tooltipPosition? 'tooltip-pointer':''\"\r\n  [tooltipStyleClass]=\"tooltipSize!\"></i>\r\n\r\n<!-- \r\n    The click event toggles the tooltip;\r\n    The escape=false property allows the tooltip to read HTML tags for formatting and special HTML characters\r\n    The tooltip-pointer class toggles only if the tooltip is active and sets the cursor: pointer\r\n  -->"
        },
        {
            "name": "InplaceComponent",
            "id": "component-InplaceComponent-e69f94d6924801355bad4091e9b4f9b9eb04a1d5cf86a9fb241a72749e2d40a17465d52afae1478f06ae12d2ea851614be1bd0b70d2eefd146ded8f5b232bc0f",
            "file": "projects/design-system/src/lib/atoms/inplace/components/inplace.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-inplace",
            "styleUrls": [
                "./inplace.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./inplace.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "externalContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "externalDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isClosable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, TemplateRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-inplace',\r\n  templateUrl: './inplace.component.html',\r\n  styleUrls: ['./inplace.component.scss'],\r\n})\r\nexport class InplaceComponent {\r\n  @Input() isClosable: boolean = false;\r\n  @Input() isActive: boolean = false;\r\n  @Input() externalDisplay!: TemplateRef<any>;\r\n  @Input() externalContent!: TemplateRef<any>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n",
                    "styleUrl": "./inplace.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<p-inplace [closable]=\"isClosable\" [active]=\"isActive\">\r\n  <ng-template pTemplate=\"display\">\r\n    <ng-content select=\"[displayTemplate]\"></ng-content>\r\n  </ng-template>\r\n  <ng-template pTemplate=\"content\">\r\n    <ng-content select=\"[contentTemplate]\"></ng-content>\r\n  </ng-template>\r\n</p-inplace>"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-05f9ff0053ec81cd958c849301e5239b9d8c293a4ebb3b93c74692a31bc0342291a73b8716da4c93830fd58e7d98e9495661caa9b39fb7c790ab548e96a17cdf",
            "file": "projects/design-system/src/lib/atoms/input/components/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "lib-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actionIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "clear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "AbstractControl",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconPos",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emitClear",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "emitInput",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "handlerInputClicked",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "iconClicked",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "selectedValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "emitClearEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "emitValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitValueNg",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "iconClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "inputClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\nimport { AbstractControl, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'lib-input',\r\n  templateUrl: './input.component.html',\r\n  styleUrls: ['./input.component.scss'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => InputComponent),\r\n    multi: true\r\n  }]\r\n})\r\n\r\nexport class InputComponent {\r\n\r\n  @Input() label: string = '';\r\n  @Input() placeholder: string = '';\r\n  // @Input('controlName') formControlName: string = '';\r\n  @Input() clear: boolean = false;\r\n  @Input() actionIcon: boolean = false;\r\n  @Input() control: AbstractControl = new FormControl();\r\n\r\n  @Output() emitInput: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() selectedValue: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() iconClicked: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() handlerInputClicked: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() emitClear: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  @Input() value: any;\r\n  @Input() type: string = 'text';\r\n  @Input() iconPos: string = 'left'\r\n  @Input() icon: string = '';\r\n\r\n  @Input() disabled: boolean = false;\r\n  @Input() readonly: boolean = false;\r\n  onChange: any = () => { }\r\n  onTouch: any = () => { }\r\n\r\n\r\n  // get control() {\r\n  //     return this.controlContainer.control?.get(this.formControlName);\r\n  // }\r\n\r\n  get haveError() {\r\n    return this.control && this.control.errors && (!this.control.pristine || this.control.touched);\r\n  }\r\n\r\n  ngOnInit() {\r\n    switch (this.iconPos) {\r\n      case 'left':\r\n        this.iconPos = 'p-input-icon-left';\r\n        break;\r\n      case 'right':\r\n        this.iconPos = 'p-input-icon-right';\r\n        break;\r\n    }\r\n  }\r\n\r\n  getInput(event: any) {\r\n    this.emitInput.emit(event);\r\n  }\r\n\r\n  iconClick() {\r\n    this.iconClicked.emit();\r\n  }\r\n\r\n  inputClicked() {\r\n    this.handlerInputClicked.emit();\r\n  }\r\n\r\n  // this method sets the value programmatically\r\n  writeValue(value: string) {\r\n    this.value = value;\r\n  }\r\n\r\n  // set UI element value changes emit function\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  // set touching element emit function\r\n  registerOnTouched(fn: any) {\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  // upon disabled statu change, this method gets triggered\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  // upon UI element value change, this method gets triggered\r\n  emitValue(event: any) {\r\n    this.value = event ? event.target.value : '';\r\n    this.onChange(this.value);\r\n    this.selectedValue.emit(this.value);\r\n  }\r\n\r\n  /* numberPattern(event: any) {\r\n      if (event.keyCode === 101 || event.keyCode === 69)\r\n          return\r\n          event.charCode >= 48 && event.charCode <= 57\r\n  } */\r\n\r\n  // upon UI element value change, this method gets triggered\r\n  emitValueNg(event: any) {\r\n    this.value = event;\r\n    this.onChange(event);\r\n\r\n  }\r\n\r\n  emitClearEvent(){\r\n    this.emitClear.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "haveError": {
                    "name": "haveError",
                    "getSignature": {
                        "name": "haveError",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                }
            },
            "templateData": "<div class=\"field\">\r\n    <label *ngIf=\"label\">{{label}}</label>\r\n    <input *ngIf=\"!(icon || clear)\" [type]=\"type\" [placeholder]=\"placeholder\"\r\n        [ngClass]=\"{'ng-invalid ng-dirty': haveError}\" (change)=\"emitValue($event)\" [(ngModel)]=\"value\" [id]=\"label\"\r\n        (input)=\"getInput(value)\" [disabled]=\"disabled\" class=\"p-inputtext-sm\" pInputText [readonly]=\"readonly\" />\r\n\r\n    <span *ngIf=\"icon || clear\" [class]=\"iconPos\" [ngClass]=\"{iconPos: true, 'showClear': clear, 'action-icon':actionIcon}\">\r\n        <i *ngIf=\"icon && iconPos.includes('left')\" [class]=\"icon\" (click)=\"iconClick()\"></i>\r\n        <input [type]=\"type\" [placeholder]=\"placeholder\" [ngClass]=\"{'ng-invalid ng-dirty': haveError}\"\r\n            (input)=\"getInput(value)\" (change)=\"emitValue($event)\" [(ngModel)]=\"value\" [id]=\"label\"\r\n            [disabled]=\"disabled\" class=\"p-inputtext-sm\" pInputText (click)=\"inputClicked()\" [readonly]=\"readonly\" />\r\n      <div class=\"icon-clear\">\r\n        <i *ngIf=\"value && clear\" [class]=\"'pi pi-times clear-action-icon'\" (click)=\"emitValue($event); emitClearEvent()\"></i>\r\n        <i class=\"{{icon}} button-action-icon\" *ngIf=\"icon && iconPos.includes('right')\" (click)=\"iconClick()\"></i>\r\n        </div>\r\n    </span>\r\n</div>\r\n"
        },
        {
            "name": "InputFormComponent",
            "id": "component-InputFormComponent-7ad0a17a65f180e446c186b66834075d164d9ecd03bfbc517bcfa1f52c94f7ab3a8fe506aed7edf560feb0384c6f54fbfdb1ea94e1bc5df15fd3247bd9b7240d",
            "file": "projects/design-system/src/lib/atoms/input-form/components/input-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lib-input-form",
            "styleUrls": [
                "./input-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actionIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocompleteLazy",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "calendarDropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "calendarShowIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "calendarView",
                    "defaultValue": "'date'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "CalendarTypeView",
                    "decorators": []
                },
                {
                    "name": "checkboxValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "CheckBox[]",
                    "decorators": []
                },
                {
                    "name": "clear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dataType",
                    "defaultValue": "'date'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "defaultDateFormat",
                    "defaultValue": "'dd-mm-yy'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dropdownFilter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdownFilterPlaceholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "field",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fieldAutocompleteCard",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "fileAcceptExtensions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "firstDayOfWeek",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "formControlName",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "highlightedDays",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "Array<string>",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconPos",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inlineCal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inputDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inputFiltered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "maxFileSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "minLenghtDigits",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "multiSelectFilterActive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "\"Inserisci un valore\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "radioColSize",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectionType",
                    "defaultValue": "'single'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showButtonBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sortParam",
                    "defaultValue": "\"nome\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "timeOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "\"text\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "uploadFileLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "uploadMultipleFiles",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "valueInput",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "autocompleteLazyValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "iconClicked",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "selectedValue",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methodsClass": [
                {
                    "name": "emitValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValueControl",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "iconClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetCalendarValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DatePipe } from \"@angular/common\";\r\nimport { Component, EventEmitter, forwardRef, Input, Output, TemplateRef } from \"@angular/core\";\r\nimport { ControlContainer, ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, Validators } from \"@angular/forms\";\r\nimport { CheckBox } from \"../../checkbox/models/checkbox.model\";\r\nimport {CalendarTypeView} from \"primeng/calendar\";\r\n\r\n@Component({\r\n  selector: \"lib-input-form\",\r\n  templateUrl: \"./input-form.component.html\",\r\n  styleUrls: [\"./input-form.component.scss\"],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputFormComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class InputFormComponent implements ControlValueAccessor {\r\n  @Input() value!: string;\r\n  @Input() valueInput: any[] = [];\r\n  @Input() checkboxValue!: CheckBox[];\r\n  @Input() clear: boolean = false;\r\n  @Input() appendTo!: string;\r\n  @Input() icon: string = \"\";\r\n  @Input() iconPos: string = \"\";\r\n  @Input() sortParam: string = \"nome\";\r\n  @Input() label: string = \"\";\r\n  @Input() type: string = \"text\";\r\n  @Input() error: boolean = false;\r\n  @Input() calendarShowIcon: boolean = false;\r\n  @Input() calendarDropdown: boolean = false;\r\n  @Input() dropdownFilter = false;\r\n  @Input() dropdownFilterPlaceholder = '';\r\n  @Input() inputDisabled: boolean = false;\r\n  @Input() inputFiltered: boolean = false;\r\n  @Input() placeholder: string = \"Inserisci un valore\";\r\n  @Input() formControlName: string = \"\";\r\n  @Input() field: string = '';\r\n  @Input() fieldAutocompleteCard: string[] = [];\r\n  @Input() inlineCal: boolean = false;\r\n  @Input() selectionType: string = 'single';\r\n  @Input() defaultDateFormat: string = 'dd-mm-yy';\r\n  @Input() minDate!: Date;\r\n  @Input() maxDate!: Date;\r\n  @Input() showButtonBar!: boolean;\r\n  @Input() readonly: boolean = false;\r\n  @Input() uploadMultipleFiles: boolean = false;\r\n  @Input() actionIcon: boolean = false;\r\n  @Input() multiSelectFilterActive: boolean = true;\r\n  @Input() autocompleteLazy: boolean = false;\r\n  @Input() minLenghtDigits: number = 3;\r\n  @Input() fileAcceptExtensions!: string;\r\n  @Input() maxFileSize!: number;\r\n  @Input() uploadFileLimit!: number;\r\n  @Input() firstDayOfWeek!: number;\r\n  @Input() errorTemplate!: TemplateRef<any>;\r\n  @Input() highlightedDays: Array<string> = [];\r\n  @Input() timeOnly: boolean = false;\r\n  @Input() dataType: string = 'date';\r\n  @Input() radioColSize: string = '3';\r\n  @Input() calendarView: CalendarTypeView = 'date';\r\n\r\n  //@Input() formControl: FormControl = new FormControl();\r\n  @Output() selectedValue: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() iconClicked: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() autocompleteLazyValue: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  disabled: boolean = false;\r\n  touched = false;\r\n\r\n  onChange: any = () => { };\r\n  onTouch: any = () => { };\r\n\r\n  constructor(\r\n    private controlContainer: ControlContainer,\r\n    private datePipe: DatePipe\r\n  ) { }\r\n\r\n  get control() {\r\n    return this.controlContainer.control!.get(\r\n      this.formControlName\r\n    ) as FormControl;\r\n  }\r\n\r\n  get haveError() {\r\n    return (\r\n      this.control &&\r\n      this.control.errors &&\r\n      (!this.control.pristine || this.control.touched)\r\n    );\r\n  }\r\n\r\n  get required() {\r\n    return (\r\n      this.control &&\r\n      this.control.hasValidator(Validators.required)\r\n    );\r\n  }\r\n  get haveErrorParent() {\r\n    return (\r\n      this.control.parent &&\r\n      this.control.parent.errors &&\r\n      (!this.control.pristine || this.control.touched)\r\n    );\r\n  }\r\n\r\n  getValueControl() {\r\n    if (this.control!.value) {\r\n      try {\r\n        return this.datePipe.transform(this.control.value, \"dd/MM/yyyy\")!;\r\n      } catch {\r\n        return this.control!.value;\r\n      }\r\n    } else {\r\n      return \"--\";\r\n    }\r\n  }\r\n\r\n  // this method sets the value programmatically\r\n  writeValue(value: string) {\r\n    this.value = value;\r\n  }\r\n\r\n  // set UI element value changes emit function\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  // set touching element emit function\r\n  registerOnTouched(fn: any) {\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  // upon disabled statu change, this method gets triggered\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  // upon UI element value change, this method gets triggered\r\n  emitValue(event: any, type?: string) {\r\n    if (type) {\r\n      if ((event && type == 'autocomplete') || type !== \"autocomplete\")\r\n        this.value = event;\r\n\r\n      if (type == 'choose-file')\r\n        this.value = event.files;\r\n\r\n      this.onChange(event);\r\n      this.selectedValue.emit(event);\r\n\r\n    } else {\r\n      this.value = event.target.value;\r\n      this.onChange(event.target.value);\r\n      this.selectedValue.emit(event);\r\n    }\r\n  }\r\n\r\n  resetCalendarValue() {\r\n    this.control.reset();\r\n    this.value = '';\r\n    this.onChange(this.value);\r\n    this.selectedValue.emit(this.value);\r\n  }\r\n\r\n  iconClick() {\r\n    this.iconClicked.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./input-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "",
                        "line": 80
                    }
                },
                "haveError": {
                    "name": "haveError",
                    "getSignature": {
                        "name": "haveError",
                        "type": "",
                        "returnType": "",
                        "line": 86
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 94
                    }
                },
                "haveErrorParent": {
                    "name": "haveErrorParent",
                    "getSignature": {
                        "name": "haveErrorParent",
                        "type": "",
                        "returnType": "",
                        "line": 100
                    }
                }
            },
            "templateData": "<div [ngSwitch]=\"type\" class=\"show-error\" [class.p-input-icon-right]=\"icon !== ''\">\r\n\r\n  <!-- Input statica -->\r\n  <div class=\"field\" *ngSwitchCase=\"'static'\">\r\n    <label *ngIf=\"label\" [for]=\"formControlName\" id=\"{{formControlName}}-label'\">{{label}}\r\n      {{required ? '*' : ''}}</label>\r\n    <div class=\"static\">{{getValueControl()}}</div>\r\n  </div>\r\n\r\n  <!-- Input listBox -->\r\n  <lib-listbox *ngSwitchCase=\"'listbox'\" [items]=\"valueInput\" [control]=\"control\" [value]=\"control.value\"\r\n    (valueChange)=\"emitValue($event, type)\" [disabled]=\"inputDisabled\" [filtered]=\"inputFiltered\"\r\n    [label]=\"label ? label + (required ? ' *' : '') : ''\">\r\n  </lib-listbox>\r\n\r\n  <div class=\"field\" *ngSwitchCase=\"'listBox'\">\r\n    <label *ngIf=\"label\" [for]=\"formControlName\" id=\"{{formControlName}}-label'\">{{label}}\r\n      {{required ? '*' : ''}}</label>\r\n    <div class=\"static\">{{getValueControl()}}</div>\r\n  </div>\r\n\r\n  <!-- Input number -->\r\n  <lib-input *ngSwitchCase=\"'number'\" [placeholder]=\"placeholder\" [icon]=\"icon\" [iconPos]=\"iconPos\" [clear]=\"clear\"\r\n    [value]=\"value\" (selectedValue)=\"emitValue($event, type)\" [control]=\"control\" [id]=\"formControlName\"\r\n    [label]=\"label ? label + (required ? ' *' : '') : ''\" type=\"number\" />\r\n\r\n  <!-- dropdown  -->\r\n  <lib-dropdown *ngSwitchCase=\"'dropdown'\" [value]=\"control.value\" (selectedValue)=\"emitValue($event, 'dropdown')\"\r\n    [filter]=\"dropdownFilter\" [filterPlaceholder]=\"dropdownFilterPlaceholder\"\r\n    [label]=\"label ? label + (required ? ' *' : '') : ''\" [appendTo]=\"appendTo\" [clear]=\"clear\"\r\n    [placeholder]=\"placeholder\" [control]=\"control\" [valueDropdown]=\"valueInput\"\r\n    [disabled]=\"inputDisabled\"></lib-dropdown>\r\n\r\n  <!-- multi-select  -->\r\n  <lib-multi-select *ngSwitchCase=\"'multi-select'\" [value]=\"control.value\"\r\n    (selectedValue)=\"emitValue($event, 'dropdown')\" [label]=\"label ? label + (required ? ' *' : '') : ''\"\r\n    [filterActive]=\"multiSelectFilterActive\" [appendTo]=\"appendTo\" [clear]=\"clear\" [placeholder]=\"placeholder\"\r\n    [control]=\"control\" [valueDropdown]=\"valueInput\" [disabled]=\"inputDisabled\"></lib-multi-select>\r\n\r\n  <!-- Input calendar -->\r\n  <lib-calendar *ngSwitchCase=\"'calendar'\" [value]=\"control.value\" [control]=\"control\" [showIcon]=\"calendarShowIcon\"\r\n    [appendTo]=\"appendTo\" [defaultDateFormat]=\"defaultDateFormat\" [dropdownMode]=\"calendarDropdown\"\r\n    (clearCalendarValue)=\"resetCalendarValue()\" (selectedValue)=\"emitValue($event, 'calendar')\" [firstDayOfWeek]=\"firstDayOfWeek\"\r\n    [label]=\"label ? label + (required ? ' *' : '') : ''\" [inlineCal]=\"inlineCal\" [selectionType]=\"selectionType\"\r\n    [placeholder]=\"placeholder\" [minDate]=\"minDate\" [maxDate]=\"maxDate\" [showButtonBar]=\"showButtonBar\"\r\n    [highlightedDays]=\"highlightedDays\" [disabled]=\"inputDisabled\" [timeOnly]=\"timeOnly\" [dataType]=\"dataType\" [view]=\"calendarView\"></lib-calendar>\r\n\r\n  <!-- Input autocomplete  -->\r\n  <lib-autocomplete *ngSwitchCase=\"'autocomplete'\" [value]=\"control.value\" [placeholder]=\"placeholder\"\r\n    [label]=\"label ? label + (required ? ' *' : '') : ''\" [appendTo]=\"appendTo\" [minLength]=\"minLenghtDigits\"\r\n    (selectedValue)=\"emitValue( $event, 'autocomplete')\" [control]=\"control\" [valueAutocomplete]=\"valueInput\"\r\n    [lazy]=\"autocompleteLazy\" (emitLazyValue)=\"autocompleteLazyValue.emit($event)\" [disabled]=\"inputDisabled\"\r\n    [icon]=\"icon\" [field]=\"field\"></lib-autocomplete>\r\n\r\n  <!-- Input checkbox -->\r\n  <div *ngSwitchCase=\"'checkbox'\">\r\n    <lib-checkbox-button (emitChange)=\"emitValue($event, type)\" [items]=\"checkboxValue\"\r\n      [label]=\"label ? label + (required ? ' *' : '') : ''\"></lib-checkbox-button>\r\n  </div>\r\n\r\n  <!-- Choose file-->\r\n  <lib-choose-file *ngSwitchCase=\"'choose-file'\" [acceptExtensions]=\"fileAcceptExtensions\" [control]=\"control\"\r\n    [disabled]=\"inputDisabled\" [value]=\"value\" [icon]=\"icon\" [maxFileSize]=\"maxFileSize\" [multiple]=\"uploadMultipleFiles\"\r\n    [label]=\"label ? label + (required ? ' *' : '') : ''\" (onLoadFile)=\"emitValue($event, type)\" [fileLimit]=\"uploadFileLimit\"></lib-choose-file>\r\n\r\n  <!-- Input radio -->\r\n  <div class=\"field-radio\" *ngSwitchCase=\"'radio'\">\r\n    <lib-radio-button [control]=\"control\" [items]=\"valueInput\" [disabled]=\"disabled\" [colSize]=\"radioColSize\" [value]=\"value\"\r\n      (selectedValue)=\"emitValue($event, type)\" [label]=\"label ? label + (required ? ' *' : '') : ''\"\r\n      [id]=\"formControlName+'-label'\"></lib-radio-button>\r\n  </div>\r\n\r\n  <lib-autocomplete-card *ngSwitchCase=\"'autocomplete-card'\" [value]=\"control.value\" [placeholder]=\"placeholder\"\r\n    [label]=\"label ? label + (required ? ' *' : '') : ''\" [appendTo]=\"appendTo\" [minLength]=\"minLenghtDigits\"\r\n    (selectedValue)=\"emitValue( $event, 'autocomplete')\" [control]=\"control\" [valueAutocomplete]=\"valueInput\"\r\n    [disabled]=\"inputDisabled\" [icon]=\"icon\" [field]=\"fieldAutocompleteCard\"></lib-autocomplete-card>\r\n\r\n  <!-- Input Textarea  -->\r\n  <lib-textarea *ngSwitchCase=\"'textarea'\" (change)=\"emitValue($event)\" [control]=\"control\" [value]=\"value\"\r\n    [label]=\"label ? label + (required ? ' *' : '') : ''\" [placeholder]=\"placeholder\"></lib-textarea>\r\n\r\n  <lib-input type=\"password\" *ngSwitchCase=\"'password'\" [placeholder]=\"placeholder\" [clear]=\"clear\"\r\n    (selectedValue)=\"emitValue($event, type)\" [label]=\"label ? label + (required ? ' *' : '') : ''\"\r\n    [control]=\"control\"></lib-input>\r\n\r\n  <lib-input type=\"text\" *ngSwitchDefault [placeholder]=\"placeholder\" (selectedValue)=\"emitValue($event, type)\"\r\n    [icon]=\"icon\" [iconPos]=\"iconPos\" [clear]=\"clear\" [label]=\"label ? label + (required ? ' *' : '') : ''\"\r\n    [control]=\"control\" [disabled]=\"inputDisabled\" [value]=\"value\" [readonly]=\"readonly\" (iconClicked)=\"iconClick()\"\r\n    [actionIcon]=\"actionIcon\"></lib-input>\r\n\r\n  <lib-error-inline *ngIf=\"control && haveError || control.parent && haveErrorParent\" [control]=\"control\"\r\n    [controlName]=\"formControlName\">\r\n    <ng-template [ngTemplateOutlet]=\"errorTemplate ? errorTemplate : null\">\r\n      <ng-content></ng-content>\r\n    </ng-template>\r\n  </lib-error-inline>\r\n</div>\r\n"
        },
        {
            "name": "LanguageSelectorComponent",
            "id": "component-LanguageSelectorComponent-7ea8d491aa84f2496a9f0a2442f918e1a8397c2dbc8116295ed6787ee6fb7f91443f7f273f58a589cbe666c9802b394b4da7207896e5e0543a130d8e2ab6db33",
            "file": "projects/design-system/src/lib/molecole/header-items/components/language-selector/language-selector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-language-selector",
            "styleUrls": [
                "./language-selector.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./language-selector.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "optionLabel",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedOption",
                    "defaultValue": "{code: 'it', name: 'it'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Language",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedOptionChange",
                    "defaultValue": "new EventEmitter<Language>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<Language>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getLanguageChange",
                    "args": [
                        {
                            "name": "lang",
                            "type": "Language",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "Language",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {FormControl} from \"@angular/forms\";\r\nimport { Language } from '../../models/language.model';\r\n\r\n@Component({\r\n  selector: 'lib-language-selector',\r\n  templateUrl: './language-selector.component.html',\r\n  styleUrls: ['./language-selector.component.scss']\r\n})\r\nexport class LanguageSelectorComponent {\r\n  @Input() options: { name: string; code: string; }[] = [];\r\n  @Input() selectedOption: Language = {code: 'it', name: 'it'};\r\n  @Output() selectedOptionChange: EventEmitter<Language> = new EventEmitter<Language>();\r\n  @Input() placeholder: string = 'Label';\r\n  @Input() optionLabel: string = 'name';\r\n\r\n\tpublic getLanguageChange(lang: Language): void {\r\n\t\tthis.selectedOptionChange.next(lang);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "    ",
                    "styleUrl": "./language-selector.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"language-selector\">\r\n    <p-dropdown [options]=\"options\" [ngModel]=\"selectedOption\" (onChange)=\"selectedOptionChange.next($event.value)\" placeholder=\"{{placeholder}}\"\r\n        optionLabel=\"{{optionLabel}}\"></p-dropdown>\r\n</div>"
        },
        {
            "name": "ListboxComponent",
            "id": "component-ListboxComponent-b92997217edc4e84942f3c880393762ec423e2840250fe56750396b3f890b1ddb8c696e5c23d664e1d5a67dc96e57d57eb32276e52b3b8f6b1a1b713485f656e",
            "file": "projects/design-system/src/lib/atoms/listbox/components/listbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ListboxComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "lib-listbox",
            "styleUrls": [
                "./listbox.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./listbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "AbstractControl",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filtered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nameString",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'lib-listbox',\r\n  templateUrl: './listbox.component.html',\r\n  styleUrls: ['./listbox.component.css'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => ListboxComponent),\r\n    multi: true\r\n  }]\r\n})\r\nexport class ListboxComponent {\r\n  @Input() items!: any[];\r\n  @Input() value: any;\r\n  @Input() label: string = '';\r\n  @Input() control: AbstractControl = new FormControl();\r\n  @Input() nameString: string = 'name';\r\n  @Input() disabled: boolean = false;\r\n  @Input() filtered: boolean = false;\r\n\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  formData!: FormGroup;\r\n\r\n  onChange: any = () => {\r\n  }\r\n  onTouch: any = () => {\r\n  }\r\n\r\n  get haveError() {\r\n    return this.control?.errors && (!this.control?.pristine || this.control?.touched);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./listbox.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "haveError": {
                    "name": "haveError",
                    "getSignature": {
                        "name": "haveError",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                }
            },
            "templateData": "<div class=\"field\">\r\n  <label *ngIf=\"label && items\">{{label}}</label>\r\n  <div class=\"listbox\" *ngIf=\"items\">\r\n    <p-listbox\r\n      [options]=\"items\"\r\n      [(ngModel)]=\"value\"\r\n      [optionLabel]=\"nameString\"\r\n      [disabled]=\"disabled\"\r\n      [filter]=\"filtered\"\r\n      [ngClass]=\"{'ng-invalid ng-dirty': haveError}\"\r\n      (onChange)=\"this.valueChange.emit(this.value);\">\r\n    </p-listbox>\r\n  </div>\r\n</div>"
        },
        {
            "name": "LoaderComponent",
            "id": "component-LoaderComponent-9a5cdd79df57c31966a2a7eea36a4a597c07a29de9bd3827ecbeb8eb097865d4c8d6bb6bfa47405cede504e01f28074b3834e3c036763b063f3df7a355011212",
            "file": "projects/design-system/src/lib/atoms/loader/components/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-loader",
            "styleUrls": [
                "./loader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "animation",
                    "defaultValue": "'.3s'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fillColor",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { LoaderService } from '../services/loader.service';\r\n\r\n@Component({\r\n    selector: 'lib-loader',\r\n    templateUrl: './loader.component.html',\r\n    styleUrls: ['./loader.component.scss']\r\n})\r\nexport class LoaderComponent implements OnInit {\r\n    protected loading = true;\r\n\r\n    @Input() fillColor: string = '';\r\n    @Input() animation: string = '.3s';\r\n\r\n    constructor(protected loaderService: LoaderService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.loaderService.loading.subscribe(load => {\r\n            this.loading = load;\r\n        })\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container-loader {\r\n    background: rgba($color: #ffffff, $alpha: 0.7);\r\n    z-index: 1500;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n",
                    "styleUrl": "./loader.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-loader\" *ngIf=\"loaderService.loading | async\">\r\n    <p-progressSpinner [animationDuration]=\"animation\" [fill]=\"fillColor\" aria-label=\"Loading\"></p-progressSpinner>\r\n</div>"
        },
        {
            "name": "LogoComponent",
            "id": "component-LogoComponent-933e4f82a29dd558d7e49b17e40061d0e90f1783b52e7e3aa679c35187f448f446a846174cf63a5515a997781e25b78fc93ce7b648f5833487088549b648ccb4",
            "file": "projects/design-system/src/lib/molecole/header-items/components/logo/logo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-logo",
            "styleUrls": [
                "./logo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./logo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "logoPath",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "secondLogo",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "secondLogoPath",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "text1",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "text2",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-logo',\r\n  templateUrl: './logo.component.html',\r\n  styleUrls: ['./logo.component.scss']\r\n})\r\nexport class LogoComponent {\r\n  @Input() text1: string = '';\r\n  @Input() text2: string = '';\r\n  @Input() logoPath: string = '';\r\n  @Input() secondLogo: boolean = false;\r\n  @Input() secondLogoPath: string = '';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".logo-box {\r\n  display: flex;\r\n.first-logo {\r\nmargin-right: 19px;\r\n}\r\n\r\n  .second-logo {\r\nmargin-left: 19px;\r\n  }\r\n\r\n.text-box {\r\n  margin-left: 19px;\r\n  font-family: 'EniExpBold';\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 19px;\r\n  line-height: 20px;\r\n  .first-text {\r\n\r\n  }\r\n\r\n  .second-text {\r\ncolor: #939393;\r\n  }\r\n}\r\n}\r\n\r\n",
                    "styleUrl": "./logo.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"logo-box\">\r\n    <img class=\"first-logo\" [src]=\"logoPath ? logoPath : 'assets/svg/logo.svg'\" />\r\n    <img [src]=\"'assets/svg/line1.svg'\" />\r\n    <div class=\"text-box\" *ngIf=\"!secondLogo\">\r\n        <div class=\"first-text\">{{text1}}</div>\r\n        <div class=\"second-text\">{{text2}}</div>\r\n    </div>\r\n    <img class=\"second-logo\" [src]=\"logoPath\" *ngIf=\"secondLogo\" />\r\n</div>"
        },
        {
            "name": "MessageComponent",
            "id": "component-MessageComponent-094d41b8b68d24a6fa035606080fd11d2cc6087e4fc03b49f2161bb43d1a57871467674b3c9633f2c97e5c79109b56fd92a3262239d40346b2749272faf185bb",
            "file": "projects/design-system/src/lib/molecole/messages/components/message/message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-message",
            "styleUrls": [
                "./message.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./message.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "key",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "messages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Message[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { Message } from 'primeng/api';\r\n// import { Message } from 'primeng/api';\r\n\r\n@Component({\r\n    selector: 'lib-message',\r\n    templateUrl: './message.component.html',\r\n    styleUrls: ['./message.component.scss']\r\n})\r\nexport class MessageComponent {\r\n\r\n    // msgs1!: Message[];\r\n    @Input() key: string = '';\r\n    @Input() messages: Message[] = [];\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./message.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- <p-messages [(value)]=\"msgs1\" [enableService]=\"false\"></p-messages> -->\r\n<ng-container *ngIf=\"messages.length > 0; else nomessages\">\r\n  <p-messages [key]=\"key\" [(value)]=\"messages\"></p-messages>\r\n\r\n</ng-container>\r\n<ng-template #nomessages>\r\n  <p-messages [key]=\"key\"></p-messages>\r\n</ng-template>"
        },
        {
            "name": "MessagesComponent",
            "id": "component-MessagesComponent-dbf92ac2692b22fb7f1d9c856e406314ff8518e8d1dc0e79b4d35b39888cace03510bcdf050a54df47c082019019533cb40237739766ab8a69b763fa7ee70683",
            "file": "projects/design-system/src/lib/molecole/messages/components/messages/messages.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MessageService",
                    "type": "injectable"
                }
            ],
            "selector": "lib-messages",
            "styleUrls": [
                "./messages.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./messages.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertKey",
                    "defaultValue": "'message-item'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "alertMsg",
                    "defaultValue": "ALERTS_GENERAL.error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "toastKey",
                    "defaultValue": "'general-toast'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "toastMsg",
                    "defaultValue": "MESSAGES_GENERAL.info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "toastPosition",
                    "defaultValue": "'bottom-center'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showAlertMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showToastMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Message, MessageService } from 'primeng/api';\r\nimport { ALERTS_GENERAL, MESSAGES_GENERAL } from '../../models/messages.model';\r\n\r\n@Component({\r\n    selector: 'lib-messages',\r\n    templateUrl: './messages.component.html',\r\n    providers: [MessageService],\r\n    styleUrls: ['./messages.component.scss'],\r\n})\r\nexport class MessagesComponent {\r\n\r\n    // Alert/Message config\r\n    alertKey: string = 'message-item';\r\n    alertMsg: Message = ALERTS_GENERAL.error;\r\n\r\n    // Toast config\r\n    toastPosition: string = 'bottom-center';\r\n    toastKey: string = 'general-toast';\r\n    toastMsg: Message = MESSAGES_GENERAL.info;\r\n\r\n    constructor(\r\n        private messageService: MessageService,\r\n    ) { }\r\n\r\n    ngOnInit() { }\r\n\r\n    showToastMessage(): void {\r\n        const msg = { ...this.toastMsg, key: this.toastKey };\r\n        this.messageService.add(msg);\r\n    }\r\n\r\n    showAlertMessage(): void {\r\n        const msg = { ...this.alertMsg, key: this.alertKey };\r\n        this.messageService.add(msg);\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./messages.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<lib-message [key]=\"alertKey\"></lib-message>\r\n<button type=\"button\" pButton (click)=\"showAlertMessage()\" label=\"Mostra alert/messaggio\" aria-label=\"Mostra alert/messaggio\"></button>\r\n\r\n&nbsp;\r\n\r\n<lib-toast [position]=\"toastPosition\" [key]=\"toastKey\"></lib-toast>\r\n<button type=\"button\" pButton (click)=\"showToastMessage()\" label=\"Mostra messaggio toast\" aria-label=\"Mostra messaggio toast\"></button>\r\n"
        },
        {
            "name": "MultiSelectComponent",
            "id": "component-MultiSelectComponent-af53f1ff7fa114b67f80ce4ffe84feef10bc998bb830f34db3064db6bf37b8edda8d223a674ba69e02360c410c76cd111f88e95778946506b9d1481d4805ec8b",
            "file": "projects/design-system/src/lib/atoms/multi-select/components/multi-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => MultiSelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "lib-multi-select",
            "styleUrls": [
                "./multi-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "clear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "codeString",
                    "defaultValue": "'code'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "AbstractControl",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filterActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nameString",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedItemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "valueDropdown",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "DropdownType[] | string[] | any",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "virtualScrollItemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isObject",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "values",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DropdownType[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "emitValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, TemplateRef, forwardRef } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, AbstractControl, FormControl } from '@angular/forms';\r\nimport { DropdownType } from '../../dropdown/models/dropdown.model';\r\n\r\n@Component({\r\n    selector: 'lib-multi-select',\r\n    templateUrl: './multi-select.component.html',\r\n    styleUrls: ['./multi-select.component.scss'],\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => MultiSelectComponent),\r\n        multi: true\r\n    }]\r\n})\r\nexport class MultiSelectComponent implements OnInit {\r\n    protected isObject: boolean = false;\r\n\r\n    @Input() valueDropdown: DropdownType[] | string[] | any = [];\r\n    @Input() label!: string;\r\n    @Input() appendTo!: string;\r\n    @Input() codeString: string = 'code';\r\n    @Input() nameString: string = 'name';\r\n    @Input() placeholder!: string;\r\n    @Input() clear: boolean = false;\r\n    @Input() filterActive: boolean = false;\r\n    @Input() virtualScroll: boolean = false;\r\n    @Input() virtualScrollItemSize!: number;\r\n    @Input() control: AbstractControl = new FormControl();\r\n    @Input() disabled: boolean = false;\r\n    @Input() value: any;\r\n    @Input() selectedItemTemplate!: TemplateRef<any>;\r\n    values: DropdownType[] = [];\r\n\r\n\r\n    @Output() selectedValue: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n    ngOnInit() {\r\n        this.isObject = typeof this.valueDropdown[0] !== \"string\";\r\n    }\r\n\r\n    get haveError() {\r\n        return this.control && this.control.errors && (!this.control.pristine || this.control.touched);\r\n    }\r\n\r\n    // upon UI element value change, this method gets triggered\r\n    protected emitValue(event: any) {\r\n        this.value = event.value;\r\n        this.selectedValue.emit(this.value);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./multi-select.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "haveError": {
                    "name": "haveError",
                    "getSignature": {
                        "name": "haveError",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                }
            },
            "templateData": "<div class=\"dropdown-wrapper field\">\r\n    <label *ngIf=\"label\">{{label}}</label>\r\n    <p-multiSelect [placeholder]=\"placeholder\" [ngClass]=\"{'ng-invalid ng-dirty': haveError}\" [appendTo]=\"appendTo\"\r\n        [disabled]=\"!valueDropdown || disabled\" [showClear]=\"clear\" [options]=\"valueDropdown\" [filter]=\"filterActive\"\r\n        [virtualScroll]=\"virtualScroll\" [virtualScrollItemSize]=\"virtualScrollItemSize\" (onChange)=\"emitValue($event)\"\r\n        [optionLabel]=\"isObject ? nameString : ''\" [(ngModel)]=\"value\" [optionValue]=\"isObject ? codeString : ''\">\r\n        <ng-template pTemplate=\"selectedItem\" *ngIf=\"selectedItemTemplate\">\r\n            <ng-container [ngTemplateOutlet]=\"selectedItemTemplate ? selectedItemTemplate : null\"></ng-container>\r\n        </ng-template>\r\n    </p-multiSelect>\r\n</div>"
        },
        {
            "name": "OnlyFiltersComponent",
            "id": "component-OnlyFiltersComponent-b6e014b82a39e635c1434aea005a683e0a7604b0951fe0d2f759477c89e70b297ac174e7ce61f357116c3ceade574be4195a08793ffca5699f949af4625e6c29",
            "file": "projects/design-system/src/lib/micro-organismi/filters/components/only-filters/only-filters.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-only-filters",
            "styleUrls": [
                "./only-filters.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./only-filters.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "chipsList",
                    "defaultValue": "{} as OnlyFiltersChip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "OnlyFiltersChip",
                    "decorators": []
                },
                {
                    "name": "disableAll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdownValues",
                    "defaultValue": "{} as OnlyFiltersModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "OnlyFiltersModel",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chipsListChange",
                    "defaultValue": "new EventEmitter<OnlyFiltersChip>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<OnlyFiltersChip>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_dateFrom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 143,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_dateTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 144,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_numberFrom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 130,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_numberTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "calendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<CalendarComponent>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'calendar'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "doubleRangeFromMaxDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "doubleRangeToMinDate",
                    "defaultValue": "new Date('01/01/1900')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "dropdownSelectedValues",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "requiredAIsEmpty",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "requiredDaIsEmpty",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "showDialog",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "treeSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeSelectComponent",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'treeSelect'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkValue",
                    "args": [
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createCalendarChip",
                    "args": [
                        {
                            "name": "event",
                            "type": "Array<object>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownOption",
                            "type": "FiltersModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "calendar",
                            "type": "CalendarComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Array<object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownOption",
                            "type": "FiltersModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "calendar",
                            "type": "CalendarComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTreeChip",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectionType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectionType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitInputEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isFirst",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isFirst",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exist",
                    "args": [
                        {
                            "name": "val0",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "val1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "val0",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "val1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "existOnlyOne",
                    "args": [
                        {
                            "name": "val0",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "val1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 360,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "val0",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "val1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAvailableData",
                    "args": [
                        {
                            "name": "data",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChildConfig",
                    "args": [
                        {
                            "name": "dropdownOption",
                            "type": "FiltersModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dropdownOption",
                            "type": "FiltersModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChildEnum",
                    "args": [
                        {
                            "name": "dropdownOption",
                            "type": "FiltersModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TreeSelectModel[]",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dropdownOption",
                            "type": "FiltersModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChildType",
                    "args": [
                        {
                            "name": "dropdownOption",
                            "type": "FiltersModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dropdownOption",
                            "type": "FiltersModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTreeSelectValue",
                    "args": [
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTreeValue",
                    "args": [
                        {
                            "name": "indexDropdown",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 352,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "indexDropdown",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMin",
                    "args": [
                        {
                            "name": "val0",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "val1",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 364,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "val0",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "val1",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "printData",
                    "args": [
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdown",
                            "type": "DropdownComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdown",
                            "type": "DropdownComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedDialog",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectionType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 306,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectionType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCalendarChild",
                    "args": [
                        {
                            "name": "event",
                            "type": "string | Array<object>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string | Array<object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCalendarDoubleRangeChild",
                    "args": [
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rangeNum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rangeNum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setChildValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDropdownValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 333,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setInterval",
                    "args": [
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isMin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isMin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNumberRangeValue",
                    "args": [
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rangeNum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rangeNum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unselectOption",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 294,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dropdownIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, QueryList, ViewChildren } from '@angular/core';\r\nimport {\r\n  CalendarComponent,\r\n  DropdownComponent,\r\n  TreeMenu,\r\n  TreeSelectComponent,\r\n  TreeSelectModel\r\n} from '../../../../../public-api';\r\nimport { FiltersModel, OnlyFiltersChip, OnlyFiltersModel } from '../../models/filters.model';\r\nimport { DatePipe } from '@angular/common';\r\n\r\n\r\n@Component({\r\n  selector: 'lib-only-filters',\r\n  templateUrl: './only-filters.component.html',\r\n  styleUrls: ['./only-filters.component.scss']\r\n})\r\nexport class OnlyFiltersComponent implements OnInit {\r\n  protected dropdownSelectedValues: { label: string, value: any, childValue: string | number }[] = [];\r\n  protected requiredDaIsEmpty: boolean = true;\r\n  protected requiredAIsEmpty: boolean = true;\r\n  protected showDialog: boolean = false;\r\n\r\n  @Input() title: string = '';\r\n  @Input() disableAll: boolean = false;\r\n  @Input() dropdownValues: OnlyFiltersModel = {} as OnlyFiltersModel;\r\n  @Input() chipsList: OnlyFiltersChip = {} as OnlyFiltersChip;\r\n\r\n  @Output() chipsListChange: EventEmitter<OnlyFiltersChip> = new EventEmitter<OnlyFiltersChip>();\r\n\r\n  @ViewChildren('calendar') calendar!: QueryList<CalendarComponent>;\r\n  @ViewChildren('treeSelect') treeSelect!: TreeSelectComponent;\r\n\r\n  protected getChildType(dropdownOption: FiltersModel, value: string): string {\r\n    if (dropdownOption && dropdownOption.data && value !== '') {\r\n      let index = dropdownOption.data.findIndex(item => item.data == value);\r\n      if (index !== -1)\r\n        return dropdownOption.data[index].type || '';\r\n      else return '';\r\n    } else\r\n      return '';\r\n  }\r\n\r\n  protected doubleRangeFromMaxDate: Date = new Date();\r\n\r\n  protected doubleRangeToMinDate: Date = new Date('01/01/1900');\r\n\r\n\r\n  protected getTreeSelectValue(dropdownIndex: number): string {\r\n    if (this.chipsList.result.length > 0) {\r\n      let value = this.chipsList.result.filter(item => item.dropdownIndex == dropdownIndex);\r\n      if (value.length > 0)\r\n        return value[0].chipsLabel;\r\n      else return '';\r\n    } else return '';\r\n  }\r\n\r\n  protected getChildEnum(dropdownOption: FiltersModel, value: string): TreeSelectModel[] {\r\n    if (dropdownOption && dropdownOption.data) {\r\n      let index = dropdownOption.data?.findIndex(item => item.data == value);\r\n      return dropdownOption.data[index].enumValues || [];\r\n    } else\r\n      return [];\r\n  }\r\n\r\n  protected getChildConfig(dropdownOption: FiltersModel, value: string): any {\r\n    if (dropdownOption && dropdownOption.data) {\r\n      let index = dropdownOption.data?.findIndex(item => item.data == value);\r\n      return dropdownOption.data[index].config;\r\n    } else\r\n      return null;\r\n  }\r\n\r\n  protected getAvailableData(data: string | number): boolean {\r\n    return this.chipsList.result.filter(value => value.data === data).length > 0;\r\n  }\r\n\r\n  protected setChildValue(event: string | number, dropdownIndex: number) {\r\n    this.dropdownSelectedValues[dropdownIndex].childValue = \"\";\r\n    this.dropdownSelectedValues[dropdownIndex].value = event;\r\n    this.dropdownSelectedValues[dropdownIndex].label = this.dropdownValues.filters[dropdownIndex].data?.filter(item => item.data == event)[0].label || '';\r\n  }\r\n\r\n  protected setCalendarChild(event: string | Array<object>, dropdownIndex: number) {\r\n    if (Array.isArray(event)) {\r\n      if (event[1]) {\r\n        this.dropdownSelectedValues[dropdownIndex].childValue = event[0].toString().split(',')[0] + \" - \" + event[1].toString().split(',')[0];\r\n      } else {\r\n        this.dropdownSelectedValues[dropdownIndex].childValue = event[0].toString().split(',')[0];\r\n      }\r\n    } else {\r\n      this.dropdownSelectedValues[dropdownIndex].childValue = event;\r\n    }\r\n  }\r\n\r\n  protected setInterval(dropdownIndex: number, event: string, isMin: boolean) {\r\n    let val = this.dropdownSelectedValues[dropdownIndex].childValue.toString().split(' - ');\r\n    if (isMin)\r\n      val[0] = event;\r\n\r\n    else\r\n      val[1] = event;\r\n\r\n    this.dropdownSelectedValues[dropdownIndex].childValue = val.join(' - ');\r\n  }\r\n\r\n  constructor(private datePipe: DatePipe) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.chipsList.id = this.dropdownValues.id;\r\n    this.chipsList.result = [];\r\n    this.chipsList.data = [];\r\n\r\n    this.dropdownValues.filters.filter((item, index) => {\r\n      if (item.type == 'treeselect') {\r\n\r\n        this.chipsList.data[index] = [];\r\n      }\r\n      if (item.type == 'dialog') {\r\n\r\n        this.chipsList.data[index] = item.selectionType !== 'multiple' ? {} as TreeSelectModel[] : [];\r\n      }\r\n      if (item.type == 'children') {\r\n        this.dropdownSelectedValues[index] = { label: '', value: null, childValue: '' };\r\n      }\r\n    });\r\n  }\r\n\r\n  private _numberFrom!: string;\r\n  private _numberTo!: string;\r\n  protected setNumberRangeValue(dropdownIndex: number, rangeNum: number, value: string) {\r\n    if (rangeNum === 0) {\r\n      this._numberFrom = value;\r\n    }\r\n    if (rangeNum === 1) {\r\n      this._numberTo = value;\r\n    }\r\n\r\n    this.dropdownSelectedValues[dropdownIndex].childValue = `${this._numberFrom ? this._numberFrom : ''} | ${this._numberTo ? this._numberTo : ''}`;\r\n  }\r\n\r\n  private _dateFrom!: string;\r\n  private _dateTo!: string;\r\n  protected setCalendarDoubleRangeChild(dropdownIndex: number, rangeNum: number, value: string) {\r\n    if (rangeNum === 0) {\r\n      this.doubleRangeToMinDate = new Date(value);\r\n      this._dateFrom = this.datePipe.transform(value, 'YYYY-MM-ddTHH:mm:ss') || '';\r\n      this.requiredDaIsEmpty = !this._dateFrom;\r\n    }\r\n    if (rangeNum === 1) {\r\n      this.doubleRangeFromMaxDate = new Date(value);\r\n      this._dateTo = this.datePipe.transform(value, 'YYYY-MM-ddTHH:mm:ss') || '';\r\n      this.requiredAIsEmpty = !this._dateTo;\r\n\r\n    }\r\n\r\n    this.dropdownSelectedValues[dropdownIndex].childValue = `${this._dateFrom ? this._dateFrom : ''} | ${this._dateTo ? this._dateTo : ''}`;\r\n  }\r\n\r\n  protected checkValue(dropdownIndex: number, type: string, config: any) {\r\n    if ((type === 'number' && config && config['selection'] === 'range') || (type === 'calendar' && config && config['selection'] === 'double-range')) {\r\n      return this.requiredAIsEmpty && this.requiredDaIsEmpty;\r\n    } else if (type === 'calendar' && config && config['selection'] === 'range') {\r\n      let splittedValue = this.dropdownSelectedValues[dropdownIndex].childValue.toString().split(' - ');\r\n      if (splittedValue[0]?.length > 0 || splittedValue[1]?.length > 0) {\r\n        return false\r\n      } else {\r\n        return true;\r\n      }\r\n    } else if (this.dropdownSelectedValues[dropdownIndex].childValue?.toString().length > 0) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  protected printData(dropdownIndex: number, dropdown: DropdownComponent, type: string, config: any) {\r\n    const date = this.dropdownValues.filters[dropdownIndex].data?.filter(item => item.label === this.dropdownSelectedValues[dropdownIndex].label);\r\n    let value = this.dropdownSelectedValues[dropdownIndex].childValue;\r\n    if (config['selection'] === 'double-range') {\r\n      value = !this._dateTo && this._dateFrom ? 'Dal ' : '';\r\n      value += this._dateFrom ? this.datePipe.transform(new Date(this._dateFrom), 'dd/MM/yyyy') : '';\r\n      value += this._dateTo && this._dateFrom ? '-' : '';\r\n      value += this._dateTo && !this._dateFrom ? 'Fino al ' : '';\r\n      value += this._dateTo ? this.datePipe.transform(new Date(this._dateTo), 'dd/MM/yyyy') : '';\r\n    } else if (config['selection'] === 'range') {\r\n      value = !this._numberTo && this._numberFrom ? 'Dal ' : '';\r\n      value += this._numberFrom || '';\r\n      value += this._numberTo && this._numberFrom ? '-' : '';\r\n      value += this._numberTo && !this._numberFrom ? 'Fino al ' : '';\r\n      value += this._numberTo || '';\r\n    } else {\r\n      if (date && date.length > 0 && date[0].type === 'calendar') {\r\n        value = this.datePipe.transform(new Date(value), 'dd/MM/yyyy') || '';\r\n      }\r\n    }\r\n\r\n    this.chipsList.result.push({\r\n      dropdownIndex: dropdownIndex,\r\n      data: this.dropdownSelectedValues[dropdownIndex].value,\r\n      field: this.dropdownValues.filters[dropdownIndex].field,\r\n      type: 'children',\r\n      chipsLabel: `${this.dropdownSelectedValues[dropdownIndex].label}: ${value}`,\r\n      value: this.dropdownSelectedValues[dropdownIndex].childValue.toString()\r\n    });\r\n\r\n    this.dropdownValues.filters[dropdownIndex].data?.forEach(item => {\r\n      this.chipsList.result.forEach(element => {\r\n        if (element.data === item.data)\r\n          item.disabled = true;\r\n      })\r\n    })\r\n    this.dropdownSelectedValues[dropdownIndex] = JSON.parse(JSON.stringify({\r\n      label: '', value: null, childValue: ''\r\n    }));\r\n    dropdown.value = null;\r\n    this._dateFrom = '';\r\n    this._dateTo = '';\r\n    this._numberFrom = '';\r\n    this._numberTo = '';\r\n    this.requiredAIsEmpty = true;\r\n    this.requiredDaIsEmpty = true;\r\n    this.doubleRangeFromMaxDate = new Date();\r\n    this.doubleRangeToMinDate = new Date('01/01/1900');\r\n    this.chipsListChange.emit(this.chipsList);\r\n  }\r\n\r\n  emitInputEvent(event: string, isFirst: boolean) {\r\n    if (isFirst) {\r\n      this.requiredDaIsEmpty = !(event.length > 0);\r\n    } else {\r\n      this.requiredAIsEmpty = !(event.length > 0);\r\n    }\r\n  }\r\n\r\n  protected createTreeChip(event: {\r\n    originalEvent: PointerEvent,\r\n    node: TreeSelectModel\r\n  }, dropdownIndex: number, dropdownField: string, selectionType: string): void {\r\n    if (event.node) {\r\n      if (selectionType === 'single') {\r\n        let indexToRemove = this.chipsList.result.findIndex(item => item.field == dropdownField);\r\n        if (indexToRemove !== -1)\r\n          this.chipsList.result.splice(indexToRemove, 1);\r\n\r\n        //this.chipsList.data[dropdownIndex] = [];\r\n      }\r\n      let fieldSplitted: string[] = [];\r\n      if (this.dropdownValues.filters[dropdownIndex].type === 'dialog' && selectionType === 'multiple') {\r\n        fieldSplitted = dropdownField.split('');\r\n        fieldSplitted[0] = fieldSplitted[0].toLocaleUpperCase();\r\n      }\r\n      this.chipsList.result.push({\r\n        chipsLabel: fieldSplitted.length ? fieldSplitted?.join('') + ': ' + event.node.label : event.node.label,\r\n        dropdownIndex: dropdownIndex,\r\n        field: dropdownField,\r\n        data: event.node.data,\r\n        type: \"treeselect\",\r\n        value: event.node.label\r\n      });\r\n      //(this.chipsList.data[dropdownIndex] as TreeSelectModel[]).push(event.node);\r\n      this.chipsListChange.emit(this.chipsList);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  protected createCalendarChip(event: Array<object>, dropdownIndex: number, dropdownOption: FiltersModel, calendar: CalendarComponent): void {\r\n    //verifico che non ci sia già la chip per il selettore specificato\r\n    const EXIST = this.chipsList.result.some((d: any) => d.dropdownIndex == dropdownIndex);\r\n    if (event[0] && event[1]) {\r\n      const DATE_RANGE = `${dropdownOption.placeholder}: ${event[0].toLocaleString().split(',')[0]} - ${event[1].toLocaleString().split(',')[0]}`;\r\n      if (EXIST) {\r\n        //elimina quello esistente\r\n        const C_INDEX = this.chipsList.result.findIndex(c => c.dropdownIndex == dropdownIndex);\r\n        this.chipsList.result.splice(C_INDEX, 1);\r\n      }\r\n      //Crea il chip\r\n      this.chipsList.result.push({\r\n        chipsLabel: DATE_RANGE,\r\n        dropdownIndex: dropdownIndex,\r\n        field: dropdownOption.field,\r\n        data: event,\r\n        type: \"calendar\",\r\n        value: DATE_RANGE\r\n      });\r\n      this.chipsListChange.emit(this.chipsList);\r\n      calendar.pcalendar.value = null;\r\n      calendar.toggleCalendar();\r\n    }\r\n  }\r\n\r\n  protected unselectOption(event: { originalEvent: PointerEvent, node: TreeSelectModel }, dropdownIndex: number): void {\r\n    const C_INDEX = this.chipsList.result.findIndex(c => c.chipsLabel == event.node.label && c.dropdownIndex == dropdownIndex);\r\n    this.chipsList.result.splice(C_INDEX, 1);\r\n    if (Array.isArray(this.chipsList.data[dropdownIndex])) {\r\n      const N_INDEX = (this.chipsList.data[dropdownIndex] as TreeSelectModel[]).indexOf(event.node);\r\n      (this.chipsList.data[dropdownIndex] as TreeSelectModel[]).splice(N_INDEX, 1);\r\n    } else {\r\n      this.chipsList.data[dropdownIndex] = undefined;\r\n    }\r\n    this.chipsListChange.emit(this.chipsList);\r\n  }\r\n\r\n  protected selectedDialog(event: any, dropdownIndex: number, dropdownField: string, selectionType: string) {\r\n    if (event) {\r\n      if (event) {\r\n        /* if (selectionType === 'single') {\r\n            let indexToRemove = this.chipsList.result.findIndex(item => item.field == dropdownField);\r\n            if (indexToRemove !== -1)\r\n                this.chipsList.result.splice(indexToRemove, 1);\r\n \r\n            //this.chipsList.data[dropdownIndex] = [];\r\n        } */\r\n        let indexToRemove = this.chipsList.result.findIndex(item => item.field == dropdownField);\r\n        this.chipsList.result.splice(indexToRemove, 1);\r\n        this.chipsList.result.push({\r\n          chipsLabel: event.label || '',\r\n          dropdownIndex: dropdownIndex,\r\n          field: dropdownField,\r\n          data: event.data,\r\n          type: \"dialog\",\r\n          value: event.label || ''\r\n        });\r\n        (this.chipsList.data[dropdownIndex]) = { label: event.label || '', data: event.data };\r\n        this.chipsListChange.emit(this.chipsList);\r\n      }\r\n      this.chipsListChange.emit(this.chipsList);\r\n    }\r\n  }\r\n\r\n  protected setDropdownValue(event: any, dropdownField: string, dropdownIndex: number) {\r\n    let indexToRemove = this.chipsList.result.findIndex(item => item.field == dropdownField);\r\n    if (indexToRemove !== -1)\r\n      this.chipsList.result.splice(indexToRemove, 1);\r\n\r\n    let value = this.dropdownValues.filters.filter(item => item.field == dropdownField)[0].data?.filter(element => element.data == event)[0];\r\n    (this.chipsList.data[dropdownIndex]) = { label: value?.label || '', data: value?.data };\r\n    this.chipsList.result.push({\r\n      chipsLabel: value?.label || '',\r\n      dropdownIndex: dropdownIndex,\r\n      field: dropdownField,\r\n      data: value?.data || '',\r\n      type: \"dialog\",\r\n      value: value?.label || ''\r\n    });\r\n    this.chipsListChange.emit(this.chipsList);\r\n    //(this.chipsList.data[dropdownIndex]) = { label: value?.label || '', data: value?.data };\r\n  }\r\n\r\n  protected getTreeValue(indexDropdown: number, field: string) {\r\n    return this.dropdownValues.filters[indexDropdown].children?.filter((element: any) => element.data === this.chipsList.data[indexDropdown].data);\r\n  }\r\n\r\n  private exist(val0: string, val1: string) {\r\n    return val0?.length > 0 && val1?.length > 0\r\n  }\r\n\r\n  private existOnlyOne(val0: string, val1: string) {\r\n    return (val0?.length > 0 || val1?.length > 0) && !this.exist(val0, val1);\r\n  }\r\n\r\n  private isMin(val0: number, val1: number) {\r\n    return val0 < val1;\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./only-filters.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 105,
                "jsdoctags": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"filters-wrapper\">\r\n  <div class=\"dropdown-title\">{{title}}</div>\r\n  <div class=\"dropdown-container\">\r\n\r\n    <div *ngFor=\"let dropdownOptions of dropdownValues.filters; let i = index\">\r\n      <ng-container [ngSwitch]=\"dropdownOptions.type\">\r\n        <ng-container *ngIf=\"chipsList?.data?.length\">\r\n          <!-- TREESELECT -->\r\n          <p-treeSelect class=\"single-dropdown\" *ngSwitchCase=\"'treeselect'\" [(ngModel)]=\"chipsList.data[i]\" [disabled]=\"disableAll\"\r\n            [appendTo]=\"'body'\" [options]=\"dropdownOptions.data || []\" [metaKeySelection]=\"false\"\r\n            [filter]=\"dropdownOptions.filter || false\" [filterInputAutoFocus]=\"dropdownOptions.filter || false\"\r\n            [selectionMode]=\"dropdownOptions.selectionType || 'multiple'\" [placeholder]=\"dropdownOptions.placeholder\"\r\n            [propagateSelectionDown]=\"dropdownOptions?.propagateSelection?.down || false\"\r\n            [propagateSelectionUp]=\"dropdownOptions?.propagateSelection?.up || false\"\r\n            (onNodeSelect)=\"createTreeChip($event, i, dropdownOptions.field, (dropdownOptions.selectionType || 'multiple'))\"\r\n            (onNodeUnselect)=\"unselectOption($event, i)\">\r\n            <ng-container *ngIf=\"dropdownOptions.selectionType !== 'single'\">\r\n              <ng-template pTemplate=\"value\">\r\n                {{dropdownOptions.placeholder}}\r\n              </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"dropdownOptions.selectionType == 'single'\">\r\n              <ng-template pTemplate=\"value\">\r\n                {{getTreeSelectValue(i) !== '' ? getTreeSelectValue(i) : dropdownOptions.placeholder}}\r\n              </ng-template>\r\n            </ng-container>\r\n          </p-treeSelect>\r\n          <div *ngSwitchCase=\"'dialog'\" class=\"align-children\">\r\n            <p-treeSelect class=\"children-dropdown\" [options]=\"dropdownOptions.children || []\" [appendTo]=\"'body'\" [disabled]=\"disableAll\"\r\n              [propagateSelectionDown]=\"dropdownOptions?.propagateSelection?.down || false\"\r\n              [propagateSelectionUp]=\"dropdownOptions?.propagateSelection?.up || false\" [(ngModel)]=\"chipsList.data[i]\"\r\n              [metaKeySelection]=\"false\" [filter]=\"dropdownOptions.filter || false\"\r\n              [filterInputAutoFocus]=\"dropdownOptions.filter || false\"\r\n              [selectionMode]=\"dropdownOptions.selectionType || 'multiple'\" [placeholder]=\"dropdownOptions.placeholder\"\r\n              (onNodeSelect)=\"createTreeChip($event, i, dropdownOptions.field, (dropdownOptions.selectionType || 'multiple'))\"\r\n              (onNodeUnselect)=\"unselectOption($event, i)\">\r\n              <ng-container *ngIf=\"dropdownOptions.selectionType == 'single'\">\r\n                <ng-template pTemplate=\"value\">\r\n                  {{getTreeSelectValue(i) !== '' ? getTreeSelectValue(i) : dropdownOptions.placeholder}}\r\n                </ng-template>\r\n              </ng-container>\r\n              <ng-container *ngIf=\"dropdownOptions.selectionType !== 'single'\">\r\n                <ng-template pTemplate=\"value\">\r\n                  {{dropdownOptions.placeholder}}\r\n                </ng-template>\r\n              </ng-container>\r\n            </p-treeSelect>\r\n          </div>\r\n        </ng-container>\r\n\r\n        <!-- CALENDAR -->\r\n        <lib-calendar #calendar *ngSwitchCase=\"'calendar'\" [dropdownMode]=\"true\" [disabled]=\"disableAll\"\r\n          [placeholder]=\"dropdownOptions.placeholder\" [selectionType]=\"'range'\"\r\n          (selectedValue)=\"createCalendarChip($event, i, dropdownOptions, calendar)\"></lib-calendar>\r\n        <!-- CHILDREN -->\r\n        <div *ngSwitchCase=\"'children'\" class=\"align-children\">\r\n          <div class=\"same-line\">\r\n            <!-- CHILDREN DROPDOWN -->\r\n            <lib-dropdown #dropdown [valueDropdown]=\"dropdownOptions.data\" [placeholder]=\"dropdownOptions.placeholder\" [disabled]=\"disableAll\"\r\n              [appendTo]=\"'body'\" [codeString]=\"'data'\" [nameString]=\"'label'\"\r\n              [selectedItemTemplate]=\"selectedItemTemplate\" (selectedValue)=\"setChildValue($event, i)\">\r\n              <ng-template #selectedItemTemplate pTemplate=\"selectedItem\">\r\n                {{dropdownSelectedValues[i].label || dropdownOptions.placeholder}}\r\n              </ng-template>\r\n            </lib-dropdown>\r\n            <ng-container [ngSwitch]=\"getChildType(dropdownOptions, dropdownSelectedValues[i].value)\">\r\n              <div *ngSwitchCase=\"'text'\">\r\n                <!-- CHILDREN INPUT TEXT-->\r\n                <lib-input [placeholder]=\"dropdownSelectedValues[i].label\"\r\n                  (selectedValue)=\"dropdownSelectedValues[i].childValue = $event\"></lib-input>\r\n              </div>\r\n              <div *ngSwitchCase=\"'number'\" class=\"same-line\">\r\n                <!-- CHILDREN INPUT NUMBER -->\r\n                <ng-container\r\n                  *ngIf=\"getChildConfig(dropdownOptions, dropdownSelectedValues[i].value)?.selection==='range'\">\r\n                  <span class=\"flex-center\">Da:</span> <lib-input [type]=\"'number'\"\r\n                    (selectedValue)=\"setNumberRangeValue(i,0, $event)\"\r\n                    (emitInput)=\"emitInputEvent($event, true)\"></lib-input>\r\n                  <span class=\"flex-center\">A:</span><lib-input [type]=\"'number'\"\r\n                    (selectedValue)=\"setNumberRangeValue(i,1, $event)\"\r\n                    (emitInput)=\"emitInputEvent($event, false)\"></lib-input>\r\n                </ng-container>\r\n                <ng-container\r\n                  *ngIf=\"getChildConfig(dropdownOptions, dropdownSelectedValues[i].value)?.selection!=='range'\">\r\n                  <lib-input [type]=\"'number'\"\r\n                    (selectedValue)=\"dropdownSelectedValues[i].childValue = $event\"></lib-input>\r\n                </ng-container>\r\n              </div>\r\n              <div *ngSwitchCase=\"'enum'\">\r\n                <!-- CHILDREN INPUT DROPDOWN -->\r\n                <lib-dropdown [valueDropdown]=\"getChildEnum(dropdownOptions, dropdownSelectedValues[i].value)\"\r\n                  [appendTo]=\"'body'\" [codeString]=\"'data'\" [nameString]=\"'label'\"\r\n                  [placeholder]=\"getChildConfig(dropdownOptions, dropdownSelectedValues[i].value).placeholder\"\r\n                  (selectedValue)=\"dropdownSelectedValues[i].childValue = $event\"></lib-dropdown>\r\n              </div>\r\n              <div *ngSwitchCase=\"'calendar'\" class=\"same-line\">\r\n                <!-- CHILDREN INPUT CALENDAR -->\r\n                <ng-container\r\n                  *ngIf=\"getChildConfig(dropdownOptions, dropdownSelectedValues[i].value)?.selection==='double-range'\">\r\n                  <span class=\"flex-center\">Da:</span> <lib-calendar [dropdownMode]=\"true\" [placeholder]=\"'Da'\"\r\n                    [appendTo]=\"'body'\" (selectedValue)=\"setCalendarDoubleRangeChild(i, 0, $event)\"\r\n                    [maxDate]=\"doubleRangeFromMaxDate\" [selectionType]=\"'single'\"></lib-calendar>\r\n                  <span class=\"flex-center\">A:</span>\r\n                  <lib-calendar [dropdownMode]=\"true\" [placeholder]=\"'A'\" [minDate]=\"doubleRangeToMinDate \"\r\n                    [appendTo]=\"'body'\" (selectedValue)=\"setCalendarDoubleRangeChild(i, 1, $event)\"\r\n                    [selectionType]=\"'single'\"></lib-calendar>\r\n                </ng-container>\r\n                <ng-container\r\n                  *ngIf=\"getChildConfig(dropdownOptions, dropdownSelectedValues[i].value)?.selection!=='double-range'\">\r\n                  <lib-calendar [dropdownMode]=\"true\" [placeholder]=\"dropdownSelectedValues[i].label\"\r\n                    [appendTo]=\"'body'\" (selectedValue)=\"setCalendarChild($event, i)\"\r\n                    [selectionType]=\"getChildConfig(dropdownOptions, dropdownSelectedValues[i].value)?.selection\"></lib-calendar>\r\n                </ng-container>\r\n              </div>\r\n              <div *ngSwitchCase=\"'interval'\" class=\"same-line\">\r\n                <!-- CHILDREN INPUT INTERVAL -->\r\n                <lib-input #inputDa\r\n                  [placeholder]=\"getChildConfig(dropdownOptions, dropdownSelectedValues[i].value).placeholderDa\"\r\n                  [ngClass]=\"{'required-da': requiredDaIsEmpty}\"\r\n                  (selectedValue)=\"setInterval(i, $event, true)\"></lib-input>\r\n                <lib-input #inputA\r\n                  [placeholder]=\"getChildConfig(dropdownOptions, dropdownSelectedValues[i].value).placeholderA\"\r\n                  [ngClass]=\"{'required-a': requiredAIsEmpty}\"\r\n                  (selectedValue)=\"setInterval(i, $event, false)\"></lib-input>\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n          <div class=\"button-filtri\">\r\n            <lib-button *ngIf=\"dropdownSelectedValues[i].label\" [label]=\"dropdownOptions.addFilterButtonLabel || ''\"\r\n              (onClick)=\"printData(i, dropdown, getChildType(dropdownOptions, dropdownSelectedValues[i].value),  getChildConfig(dropdownOptions, dropdownSelectedValues[i].value))\"\r\n              [size]=\"'small'\"\r\n              [disabled]=\"checkValue(i, getChildType(dropdownOptions, dropdownSelectedValues[i].value),  getChildConfig(dropdownOptions, dropdownSelectedValues[i].value))\"></lib-button>\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-919d545d51a69b61171c2f5fe18b3c8b26c87aba3d9bb6ccaa6a3bbe2a4f0ef9ea60f452c8051d75cc5bb02ba8d54ae06fe02187fd6a230d6a71b7ccf1e37405",
            "file": "projects/design-system/src/lib/atoms/paginator/components/paginator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-paginator",
            "styleUrls": [
                "./paginator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentPageReportTemplate",
                    "defaultValue": "'{first} - {last} of {totalRecords}'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "first",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "rowsPerPageOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "showCurrentPageReport",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter<PageEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<PageEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "innerFirst",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "innerRows",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChangeEmit",
                    "args": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {PageEvent} from \"../models/paginator.model\";\r\n\r\n\r\n@Component({\r\n  selector: 'lib-paginator',\r\n  templateUrl: './paginator.component.html',\r\n  styleUrls: ['./paginator.component.scss']\r\n})\r\nexport class PaginatorComponent implements OnInit{\r\n\r\n  @Input() first: number = 0;\r\n  @Input() rows: number = 10;\r\n  @Input() totalRecords: number = 20;\r\n  @Input() showCurrentPageReport: boolean = true;\r\n  @Input() rowsPerPageOptions!: number[];\r\n  @Input() currentPageReportTemplate: string = '{first} - {last} of {totalRecords}';\r\n\r\n  protected innerFirst: number = 0;\r\n  protected innerRows: number = 10;\r\n\r\n  @Output() onPageChange: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\r\n\r\n\r\n  ngOnInit(){\r\n    this.innerFirst=this.first;\r\n    this.innerRows=this.rows;\r\n  }\r\n\r\n  onPageChangeEmit(event: PageEvent) {\r\n    this.innerFirst = event.first;\r\n    this.innerRows = event.rows;\r\n    this.onPageChange.emit(event);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./paginator.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<p-paginator (onPageChange)=\"onPageChangeEmit($event)\" [first]=\"innerFirst\" [rows]=\"innerRows\" [totalRecords]=\"totalRecords\" [rowsPerPageOptions]=\"rowsPerPageOptions\"\r\n             [showCurrentPageReport]=\"showCurrentPageReport\" [currentPageReportTemplate]=\"currentPageReportTemplate\">\r\n</p-paginator>\r\n\r\n"
        },
        {
            "name": "PickListComponent",
            "id": "component-PickListComponent-0952f763036344653c0dcc476a05ffe23f2d54c4ecf159907aff22080d1a17bbd7c26e6d765386776b1485a0262faa886b275e441fcc12ee26c08beeccdb2e27",
            "file": "projects/design-system/src/lib/atoms/pick-list/components/pick-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-pick-list",
            "styleUrls": [
                "./pick-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pick-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "dragDrop",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filterBy",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "metaKeySelection",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "responsive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSourceControl",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTargetControl",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sourceArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "sourceFilterPlaceholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "sourceLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "sourceStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "targetArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "targetFilterPlaceholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "targetLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "targetStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "sourceArrayChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                },
                {
                    "name": "sourceSelection",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "targetArrayChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "targetSelection",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "moveAllTo",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "position",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "position",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveOneTo",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "position",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "position",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSourceSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTargetSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-pick-list',\r\n  templateUrl: './pick-list.component.html',\r\n  styleUrls: ['./pick-list.component.scss']\r\n})\r\nexport class PickListComponent {\r\n  @Input() dragDrop: boolean = false;\r\n  @Input() responsive: boolean = false;\r\n  @Input() sourceLabel: string = '';\r\n  @Input() targetLabel: string = '';\r\n  @Input() filterBy: string = '';\r\n  @Input() sourceFilterPlaceholder: string = '';\r\n  @Input() targetFilterPlaceholder: string = '';\r\n  @Input() template!: TemplateRef<any>;\r\n  @Input() sourceArray: any[] = [];\r\n  @Input() targetStyle!: any;\r\n  @Input() metaKeySelection: boolean = true;\r\n  @Input() sourceStyle!: any;\r\n  @Input() targetArray: any[] = [];\r\n  @Input() showSourceControl: boolean = false;\r\n  @Input() showTargetControl: boolean = false;\r\n\r\n  @Output() sourceArrayChange = new EventEmitter<any>();\r\n  @Output() targetArrayChange = new EventEmitter<any>();\r\n  @Output() targetSelection = new EventEmitter<any>();\r\n  @Output() sourceSelection = new EventEmitter<any>();\r\n\r\n\r\n  moveAllTo(event: any, position: string) {\r\n    this.targetArrayChange.emit(this.targetArray);\r\n    this.sourceArrayChange.emit(this.sourceArray);\r\n  }\r\n\r\n  moveOneTo(event: any, position: string) {\r\n    this.targetArrayChange.emit(this.targetArray);\r\n    this.sourceArrayChange.emit(this.sourceArray);\r\n  }\r\n\r\n  onTargetSelect(event: any) {\r\n    this.targetSelection.emit(event.items);\r\n  }\r\n\r\n  onSourceSelect(event: any) {\r\n    this.sourceSelection.emit(event.items);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pick-list.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<p-pickList [source]=\"sourceArray\" [target]=\"targetArray\" [sourceHeader]=\"sourceLabel\" [targetHeader]=\"targetLabel\"\r\n    [dragdrop]=\"dragDrop\" [responsive]=\"responsive\" [filterBy]=\"filterBy\" [showSourceControls]=\"showSourceControl\"\r\n    [showTargetControls]=\"showTargetControl\" [sourceFilterPlaceholder]=\"sourceFilterPlaceholder\"\r\n    [sourceStyle]=\"sourceStyle\" [targetStyle]=\"targetStyle\" (onMoveAllToSource)=\"moveAllTo($event, 'source')\"\r\n    (onMoveAllToTarget)=\"moveAllTo($event, 'target')\" (onMoveToSource)=\"moveOneTo($event, 'source')\"\r\n    [metaKeySelection]=\"metaKeySelection\" (onSourceSelect)=\"onSourceSelect($event)\"\r\n    (onTargetSelect)=\"onTargetSelect($event)\" (onMoveToTarget)=\"moveOneTo($event, 'target')\"\r\n    [targetFilterPlaceholder]=\"targetFilterPlaceholder\">\r\n    <ng-template let-item pTemplate=\"item\">\r\n        <ng-template [ngTemplateOutlet]=\"template ? template : internalBody\" [ngTemplateOutletContext]=\"{data:item}\">\r\n\r\n        </ng-template>\r\n    </ng-template>\r\n</p-pickList>\r\n\r\n<ng-template #internalBody let-data=\"data\" let-columns=\"column\">\r\n    ciao\r\n</ng-template>"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-7928d1a356a8da9e09ab297f55313418b55b7d5fc2df94077b16b6cad323c31a1fc435fe460af737bd8200008043c3e1aad70aa596c3972787ad8fb67c30be49",
            "file": "projects/design-system/src/lib/atoms/progress-bar/components/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "progress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "showValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'lib-progress-bar',\r\n    templateUrl: './progress-bar.component.html',\r\n    styleUrls: ['./progress-bar.component.scss']\r\n})\r\nexport class ProgressBarComponent {\r\n    @Input() progress: number = 0;\r\n    @Input() showValue: boolean = true;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div [ngClass]=\"{'progress-bar': true, 'not-show-value': !showValue}\">\r\n    <p-progressBar [value]=\"progress\" [showValue]=\"showValue\"></p-progressBar>\r\n</div>"
        },
        {
            "name": "RadioButtonComponent",
            "id": "component-RadioButtonComponent-d22e8d28e860207e5939edfe5b2855762b360d1f192cf1bdc6ef50c12bc7293b236c8f075651cb62a2158b6f1849f083b0ca9f5dd0aca46c2f3ebeac2a961cc7",
            "file": "projects/design-system/src/lib/atoms/radio-button/components/radio-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RadioButtonComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "lib-radio-button",
            "styleUrls": [
                "./radio-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "colSize",
                    "defaultValue": "'3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formControlName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "RadioModel[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedValue",
                    "defaultValue": "new EventEmitter<RadioModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "loadLazyTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "quantity",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "emitValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitValueNg",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\nimport { ControlContainer, ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { RadioModel } from '../models/radio.model';\r\n\r\n@Component({\r\n    selector: 'lib-radio-button',\r\n    templateUrl: './radio-button.component.html',\r\n    styleUrls: ['./radio-button.component.scss'],\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => RadioButtonComponent),\r\n        multi: true\r\n    }]\r\n})\r\n\r\n\r\n\r\nexport class RadioButtonComponent {\r\n\r\n    @Input() items: RadioModel[] = [];\r\n    @Input() label: string = '';\r\n    @Input() formControlName: string = '';\r\n    @Input() disabled: boolean = false;\r\n    @Input() name: string = '';\r\n    @Input() colSize: string = '3';\r\n    @Input() value!: any;\r\n    @Input() control: FormControl = new FormControl();\r\n\r\n    @Output() selectedValue = new EventEmitter<RadioModel>();\r\n\r\n\r\n\r\n    id: string = '';\r\n    quantity: string = '';\r\n    touched = false;\r\n\r\n    onChange: any = () => { }\r\n    onTouch: any = () => { }\r\n\r\n    loading: boolean = false;\r\n    loadLazyTimeout: any;\r\n\r\n    get haveError() {\r\n        return this.control && this.control.errors && (!this.control.pristine || this.control.touched);\r\n\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    // this method sets the value programmatically\r\n    writeValue(value: string) {\r\n        this.value = value;\r\n    }\r\n\r\n    // set UI element value changes emit function\r\n    registerOnChange(fn: any) {\r\n        this.onChange = fn\r\n    }\r\n\r\n    // set touching element emit function\r\n    registerOnTouched(fn: any) {\r\n        this.onTouch = fn\r\n    }\r\n\r\n    // upon disabled statu change, this method gets triggered\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    // upon UI element value change, this method gets triggered\r\n    emitValue(event: any) {\r\n        this.value = event.value;\r\n        this.onChange(event.value);\r\n        this.selectedValue.emit(this.value);\r\n    }\r\n\r\n    // upon UI element value change, this method gets triggered\r\n    emitValueNg(event: any) {\r\n        this.value = event.value;\r\n        this.onChange(event.value);\r\n        this.selectedValue.emit(this.value);\r\n\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./radio-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 46
            },
            "extends": [],
            "accessors": {
                "haveError": {
                    "name": "haveError",
                    "getSignature": {
                        "name": "haveError",
                        "type": "",
                        "returnType": "",
                        "line": 43
                    }
                }
            },
            "templateData": "<div class=\"radiobutton-group field\">\r\n    <label *ngIf=\"label\">{{label}}</label>\r\n    <div *ngFor=\"let item of items; let i = index\" class=\"col-md-{{colSize}}\">\r\n        <p-radioButton [name]=\"name\" [value]=\"item\" [disabled]=\"disabled\" [(ngModel)]=\"value\"\r\n            [inputId]=\"item.data.toString()\" (onClick)=\"emitValue($event)\"></p-radioButton>\r\n        <label class=\"radio-button\" [for]=\"item.data\">{{item.label}}</label>\r\n    </div>\r\n</div>"
        },
        {
            "name": "RadioTileComponent",
            "id": "component-RadioTileComponent-fee5cb84320cbd25f8746a6eb92070dfbc9cf4cbc2dcfef721b8bf632b550956469cd5ff3d15f449060f38ae094e66549fc456d39a8b796b1d381676c137a37b",
            "file": "projects/design-system/src/lib/molecole/radio-tile/components/radio-tile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-radio-tile",
            "styleUrls": [
                "./radio-tile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-tile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "externalInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "showRadio",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tiles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "RadioTile[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emitSelected",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "emitToModify",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "valueSelected",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "buttonUpdateClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitRadioValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "rValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectObj",
                    "args": [
                        {
                            "name": "tile",
                            "type": "RadioTile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "RadioTile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\r\nimport { RadioTile } from '../models/radio-tile.model';\r\n\r\n@Component({\r\n  selector: 'lib-radio-tile',\r\n  templateUrl: './radio-tile.component.html',\r\n  styleUrls: ['./radio-tile.component.scss']\r\n})\r\nexport class RadioTileComponent {\r\n  @Input() tiles: RadioTile[] = [];\r\n  @Input() showRadio: boolean = true;\r\n  @Input() externalInfo!: TemplateRef<any>;\r\n\r\n  protected valueSelected: string = '';\r\n\r\n  @Output() emitToModify = new EventEmitter<number>();\r\n  @Output() emitSelected = new EventEmitter<string>();\r\n\r\n  isSelected(rValue: string): boolean {\r\n    return this.valueSelected === rValue;\r\n  }\r\n\r\n  emitRadioValue(event: any) {\r\n    this.valueSelected = event.value;\r\n    this.emitSelected.emit(this.valueSelected);\r\n  }\r\n  buttonUpdateClicked(event: number) {\r\n    this.emitToModify.emit(event);\r\n  }\r\n  selectObj(tile: RadioTile) {\r\n    this.valueSelected = tile.id.toString();\r\n    this.emitSelected.emit(this.valueSelected);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radio-tile.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"radio-tiles\">\r\n  <ng-container *ngFor=\"let tile of tiles\">\r\n    <div\r\n      [ngClass]=\"{'selected': isSelected(showRadio ? tile.radio.radioValue : tile.id.toString()), 'radio-tile row': true}\"\r\n      (click)=\"selectObj(tile)\">\r\n      <div class=\"col\">\r\n        <lib-card [cHeader]=\"''\" [cSubHeader]=\"''\" [cStyle]=\"''\" [cStyleClass]=\"''\">\r\n          <div cSubtitleTemplate class=\"headerActions\" *ngIf=\"tile.showHeaderAction\">\r\n            <p-button styleClass=\"p-button-link\" icon=\"pi pi-copy\" label=\"Copia negli appunti\" iconPos=\"right\">\r\n            </p-button>\r\n          </div>\r\n          <div cFooterTemplate>\r\n            <div class=\"bodyContainer row\">\r\n              <div class=\"col-1 bodyItem center\" *ngIf=\"showRadio\">\r\n                <p-radioButton [name]=\"tile.radio.radioName\" [value]=\"tile.radio.radioValue\"\r\n                  [disabled]=\"tile.radio.radioDisabled\" [(ngModel)]=\"valueSelected\" [inputId]=\"tile.radio.radioName\"\r\n                  (onClick)=\"emitRadioValue($event)\">\r\n                </p-radioButton>\r\n              </div>\r\n              <div class=\"col-8\">\r\n                <label [for]=\"tile.radio.radioName\">\r\n                  <div class=\"titleBody\">\r\n                    <strong>{{tile.title}}</strong>\r\n                  </div>\r\n                  <div class=\"contentBody\">\r\n                    {{tile.content}}\r\n                  </div>\r\n                  <div class=\"contentBody\">\r\n                    <ng-template [ngTemplateOutlet]=\"externalInfo ? externalInfo : null\"\r\n                      [ngTemplateOutletContext]=\"{data:tile}\">\r\n\r\n                    </ng-template>\r\n                  </div>\r\n                </label>\r\n              </div>\r\n              <div class=\"row\">\r\n\r\n\r\n              </div>\r\n              <div class=\"footerActions bodyItem end\">\r\n                <p-button styleClass=\"p-button-link\" label=\"Modifica\" (click)=\"buttonUpdateClicked(tile.id)\">\r\n                </p-button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </lib-card>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>"
        },
        {
            "name": "SearchBarComponent",
            "id": "component-SearchBarComponent-399cd7c7fa8cdc23936eba4b3b908f59b1edd36bb3842cd69078833b6059d7b267e7553609664c70a01df2ab9b84f5ea95bc7de784c5187d685ffd724b2a32a9",
            "file": "projects/design-system/src/lib/molecole/header-items/components/search-bar/search-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-search-bar",
            "styleUrls": [
                "./search-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonLabel",
                    "defaultValue": "'Cerca'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "dropdownPlaceholder",
                    "defaultValue": "'Categorie'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onSearch",
                    "defaultValue": "new EventEmitter<{ category: string, text: string }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "searchForm",
                    "defaultValue": "this.fb.group({\r\n        categorie: [''],\r\n        text: ['']\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "search",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'lib-search-bar',\r\n    templateUrl: './search-bar.component.html',\r\n    styleUrls: ['./search-bar.component.scss']\r\n})\r\nexport class SearchBarComponent {\r\n    searchForm: FormGroup = this.fb.group({\r\n        categorie: [''],\r\n        text: ['']\r\n    })\r\n\r\n    @Input() categories: string[] = [];\r\n    @Input() dropdownPlaceholder: string = 'Categorie';\r\n    @Input() buttonLabel: string = 'Cerca';\r\n\r\n    @Output() onSearch = new EventEmitter<{ category: string, text: string }>();\r\n\r\n    constructor(private fb: FormBuilder) { }\r\n\r\n    search() {\r\n        this.onSearch.emit({ category: this.searchForm.get('categorie')?.value, text: this.searchForm.get('text')?.value });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n",
                    "styleUrl": "./search-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"search-bar\">\r\n    <form [formGroup]=\"searchForm\">\r\n        <lib-input-form type=\"dropdown\" [valueInput]=\"categories\" [placeholder]=\"dropdownPlaceholder\"\r\n            class=\"search-bar-category\" [appendTo]=\"'body'\" formControlName=\"categorie\"></lib-input-form>\r\n        <lib-input-form type=\"text\" formControlName=\"text\" placeholder=\"Cerca\"\r\n            class=\"search-bar-input\"></lib-input-form>\r\n        <lib-button type=\"primary\" [label]=\"buttonLabel\" size=\"small\" icon=\"pi pi-search\" class=\"search-bar-button\"\r\n            (onClick)=\"search()\"></lib-button>\r\n    </form>\r\n\r\n</div>"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-d4c6f7badfa4fb0e96997786f36d44d082cb0351d8abafc076c3747234d535b5df913357e0de3954e88fc6eb3390a3bc7c25479aa9f1d81c2a9e8d02827f0a55",
            "file": "projects/design-system/src/lib/atoms/sidebar/components/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-sidebar",
            "styleUrls": [
                "./sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "items",
                    "defaultValue": "[{ \"label\": \"Tipologia documento\" }, { \"label\": \"Impostazioni\" }, { \"label\": \"Titolario\" }, { \"label\": \"Flusso\" }, { \"label\": \"Anagrafiche società\", \"items\": [{ \"label\": \"Società\", \"routerLink\": \"/configurazione-di-base/societa\" }, { \"label\": \"Profilo di contratto\" }, { \"label\": \"Contratti\" }, { \"label\": \"Profili utente \" }, { \"label\": \"Centro di costo\" }] }, { \"label\": \"Mista\", \"items\": [{ \"label\": \"Interfacce\" }] }, { \"label\": \"Anagrafiche impianti\", \"items\": [{ \"label\": \"Impianto\" }, { \"label\": \"Tipologia impianto\" }, { \"label\": \"DPI\" }, { \"label\": \"Varchi\" }, { \"label\": \"Associazioni\" }] }, { \"label\": \"Operatori\" }, { \"label\": \"Supporto utente\" }, { \"label\": \"Fatturazione\", \"items\": [{ \"label\": \"Gestori\" }, { \"label\": \"Fornitori\" }, { \"label\": \"Servizi a richiesta\" }, { \"label\": \"Materiali d'uso\" }, { \"label\": \"Listini SAP\" }, { \"label\": \"Listini GD\" }] }, { \"label\": \"Tipologia documento\" }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "SidebarItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { SidebarItem } from '../models/sidebar-item.model';\r\n\r\n@Component({\r\n    selector: 'lib-sidebar',\r\n    templateUrl: './sidebar.component.html',\r\n    styleUrls: ['./sidebar.component.scss']\r\n})\r\nexport class SidebarComponent {\r\n\r\n    @Input() items: SidebarItem[] = [{ \"label\": \"Tipologia documento\" }, { \"label\": \"Impostazioni\" }, { \"label\": \"Titolario\" }, { \"label\": \"Flusso\" }, { \"label\": \"Anagrafiche società\", \"items\": [{ \"label\": \"Società\", \"routerLink\": \"/configurazione-di-base/societa\" }, { \"label\": \"Profilo di contratto\" }, { \"label\": \"Contratti\" }, { \"label\": \"Profili utente \" }, { \"label\": \"Centro di costo\" }] }, { \"label\": \"Mista\", \"items\": [{ \"label\": \"Interfacce\" }] }, { \"label\": \"Anagrafiche impianti\", \"items\": [{ \"label\": \"Impianto\" }, { \"label\": \"Tipologia impianto\" }, { \"label\": \"DPI\" }, { \"label\": \"Varchi\" }, { \"label\": \"Associazioni\" }] }, { \"label\": \"Operatori\" }, { \"label\": \"Supporto utente\" }, { \"label\": \"Fatturazione\", \"items\": [{ \"label\": \"Gestori\" }, { \"label\": \"Fornitori\" }, { \"label\": \"Servizi a richiesta\" }, { \"label\": \"Materiali d'uso\" }, { \"label\": \"Listini SAP\" }, { \"label\": \"Listini GD\" }] }, { \"label\": \"Tipologia documento\" }];\r\n\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidebar {\r\n    height: 100%;\r\n}",
                    "styleUrl": "./sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"sidebar\">\r\n    <p-panelMenu [model]=\"items\"></p-panelMenu>\r\n</div>"
        },
        {
            "name": "StepperComponent",
            "id": "component-StepperComponent-3ad56f4e0ed0f095ef6aa1f3be84d170182161826fd669108b42b4d13687eb214762f2dd316e0a649aa1abb55138b109f52c8a2ed9da170508ea07722642f5da",
            "file": "projects/design-system/src/lib/atoms/stepper/components/stepper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-stepper",
            "styleUrls": [
                "./stepper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stepper.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "activeIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "disableNext",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disablePrevious",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disableSave",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "nextLabel",
                    "defaultValue": "'Avanti'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "previousLabel",
                    "defaultValue": "'Indietro'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "saveLabel",
                    "defaultValue": "'Salva'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showButtons",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "activeIndexChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "index",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeStep",
                    "args": [
                        {
                            "name": "step",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "step",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recursiveStepMajor",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recursiveStepMinor",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { MenuItem } from 'primeng/api';\n\n@Component({\n  selector: 'lib-stepper',\n  templateUrl: './stepper.component.html',\n  styleUrls: ['./stepper.component.scss']\n})\nexport class StepperComponent implements OnChanges {\n  @Input() activeIndex: number = 0;\n  @Input() items: MenuItem[] = [];\n  @Input() readonly: boolean = false;\n  @Input() previousLabel: string = 'Indietro';\n  @Input() nextLabel: string = 'Avanti';\n  @Input() saveLabel: string = 'Salva';\n  @Input() disablePrevious: boolean = false;\n  @Input() disableNext: boolean = false;\n  @Input() disableSave: boolean = false;\n  @Input() showButtons: boolean = true;\n\n\n  @Output() activeIndexChange = new EventEmitter<number>();\n\n  protected index: number = 0;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['activeIndex'].previousValue >= 0 && changes['activeIndex'].previousValue < changes['activeIndex'].currentValue) {\n      this.items[changes['activeIndex'].previousValue].styleClass = 'success';\n    }\n    this.index = this.activeIndex;\n    this.items[this.index].styleClass = '';\n  }\n\n  public changeStep(step: string) {\n    if (step === 'next') {\n      this.recursiveStepMajor(this.index);\n    } else if (step === 'previous') {\n      this.recursiveStepMinor(this.index);\n    }\n\n    this.activeIndexChange.emit(this.index);\n  }\n\n  private recursiveStepMajor(index: number) {\n    if (this.items[index + 1]?.disabled) {\n      this.recursiveStepMajor(index + 1);\n    } else {\n      this.items[this.index].styleClass = 'success';\n      this.index = index + 1;\n    }\n  }\n\n  private recursiveStepMinor(index: number) {\n    if (this.items[index - 1]?.disabled) {\n      this.recursiveStepMinor(index - 1);\n    } else {\n      this.index = index - 1;\n      this.items[this.index].styleClass = '';\n    }\n  }\n\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./stepper.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"stepper\">\n  <p-steps [model]=\"items\" [readonly]=\"readonly\"\n    [activeIndex]=\"activeIndex\"></p-steps>\n</div>\n<div class=\"step-buttons\" *ngIf=\"showButtons\">\n  <lib-cta-bar [isMain]=\"true\">\n    <ng-container back>\n      <lib-button [size]=\"'small'\" [label]=\"previousLabel\" [disabled]=\"activeIndex === 0 || disablePrevious\" (onClick)=\"changeStep('previous')\"></lib-button>\n    </ng-container>\n    <ng-container cta>\n      <lib-button [size]=\"'small'\" [disabled]=\"disableNext\" *ngIf=\"activeIndex < (items.length-1)\" [label]=\"nextLabel\" (onClick)=\"changeStep('next')\"></lib-button>\n      <lib-button [size]=\"'small'\" [disabled]=\"disableSave\" *ngIf=\"activeIndex === (items.length-1)\" [label]=\"saveLabel\" (onClick)=\"changeStep('next')\"></lib-button>\n    </ng-container>\n  </lib-cta-bar>\n</div>"
        },
        {
            "name": "SwitchComponent",
            "id": "component-SwitchComponent-644c9bc39eb7be4de27758987b3929c2946efd690594333ab659df3b6c9f88c5d660bd18bd06c97f2511eede9f89c59f5efb985e3c71e750a3474044f7d38da1",
            "file": "projects/design-system/src/lib/atoms/switch/components/switch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SwitchComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "lib-switch",
            "styleUrls": [
                "./switch.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./switch.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "AbstractControl",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "checkedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onToggle",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';\r\nimport { AbstractControl, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'lib-switch',\r\n    templateUrl: './switch.component.html',\r\n    styleUrls: ['./switch.component.scss'],\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => SwitchComponent),\r\n        multi: true\r\n    }]\r\n})\r\nexport class SwitchComponent {\r\n    @Input() label: string = '';\r\n    @Input() checked: boolean = false;\r\n    @Input() disabled: boolean = false;\r\n    @Input() control: AbstractControl = new FormControl();\r\n\r\n    @Output() checkedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n    onToggle(event: any) {\r\n        this.checkedChange.emit(this.checked);\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./switch.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"switch-wrapper\">\r\n    <p-inputSwitch #switch [(ngModel)]=\"checked\" (onChange)=\"onToggle($event)\" [disabled]=\"disabled\"\r\n        [id]=\"label\"></p-inputSwitch>\r\n    <label [for]=\"switch\">{{label}}</label>\r\n</div>"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-f9516eb2da2a8edeece44cd15ededc3563efebe41a583a81581403adfd7ee146cd6ec023da53bcf545cde3e4ab41b98641fc89380158839cc844a55b857ddcd9",
            "file": "projects/design-system/src/lib/molecole/table/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "Table"
                },
                {
                    "name": "TableService",
                    "type": "injectable"
                }
            ],
            "selector": "lib-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "alwaysShowPaginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "checked",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "columnResizeMode",
                    "defaultValue": "'fit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "Cols[]",
                    "decorators": []
                },
                {
                    "name": "columnsSelectorPlaceholder",
                    "defaultValue": "'Seleziona colonne'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dataKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "emitLazy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "externalBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "externalHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "isScrollable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelectable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "lazy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "lazyOnInit",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nRowsPerPage",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "reportString",
                    "defaultValue": "'Showing {first} to {last} of {totalRecords} entries'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "resizableColumns",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "responsive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "responsiveLayout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rowsPerPage",
                    "defaultValue": "[10, 25, 50]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "scrollHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectableColumns",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectedValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "selectionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "serverSort",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showPaginator",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showReportPage",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sortable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "totalRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "checkedRowValues",
                    "defaultValue": "new EventEmitter<any[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "EventEmitter<any[]>"
                },
                {
                    "name": "lazyLoadChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "pageChanged",
                    "defaultValue": "new EventEmitter<{ pageNumber: number, field: string, order: number }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter<literal type>"
                },
                {
                    "name": "selectedValueChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "sortValues",
                    "defaultValue": "new EventEmitter<{ field: string, order: number }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "EventEmitter<literal type>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "firstRowInPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "selectedColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Cols[]",
                    "optional": false,
                    "description": "",
                    "line": 88
                }
            ],
            "methodsClass": [
                {
                    "name": "check",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "checkType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "checkType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitSort",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFieldValue",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isChecked",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "lazyLoading",
                    "args": [
                        {
                            "name": "event",
                            "type": "LazyLoadEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "LazyLoadEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectedEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  TemplateRef\r\n} from \"@angular/core\";\r\nimport { LazyLoadEvent } from \"primeng/api\";\r\nimport { Table, TableService } from \"primeng/table\";\r\nimport { Cols } from \"../../models/table.model\";\r\nimport { LibTableService } from \"../../services/lib-table.service\";\r\n\r\n\r\n\r\n@Component({\r\n  selector: \"lib-table\",\r\n  templateUrl: \"./table.component.html\",\r\n  styleUrls: [\"./table.component.scss\"],\r\n  providers: [Table, TableService]\r\n})\r\n\r\nexport class TableComponent implements OnInit {\r\n  // azioni della tabella\r\n  @Input() actions?: TemplateRef<any>;\r\n  // campi della tabella\r\n  @Input() externalBody!: TemplateRef<any>;\r\n  // header tabella\r\n  @Input() externalHeader!: TemplateRef<any>;\r\n  //   valori della tabella\r\n  @Input() value!: any[];\r\n  //   colonne della tabella\r\n  @Input() columns!: Cols[];\r\n  //   lenght massima dei valori della tabela\r\n  @Input() totalRecords!: number;\r\n  //   boolenao se le colonne sono ordinabili o meno\r\n  @Input() sortable: boolean = false;\r\n\r\n  @Input() showHeader: boolean = true;\r\n  //    booleano se la tabella ha le checkbox\r\n  @Input() isSelectable!: boolean;\r\n  //    tipo di selezione della tabella, single o multiple\r\n  @Input() selectionType!: string;\r\n\r\n  @Input() rowsPerPage: any = [10, 25, 50];\r\n\r\n  @Input() showPaginator: boolean = true;\r\n\r\n  @Input() showReportPage: boolean = true;\r\n\r\n  @Input() nRowsPerPage: number = 50;\r\n\r\n  @Input() reportString: string = 'Showing {first} to {last} of {totalRecords} entries';\r\n\r\n  //Abilita il sorting lato backend\r\n  @Input() serverSort: boolean = false;\r\n  // righe della tabella preselezionate\r\n  @Input() selectedValue!: any;\r\n\r\n  @Input() filters!: any;\r\n\r\n  @Input() isScrollable!: boolean;\r\n\r\n  @Input() resizableColumns: boolean = false;\r\n\r\n  @Input() scrollHeight!: string;\r\n\r\n  @Input() dataKey!: string;\r\n\r\n  @Input() alwaysShowPaginator!: boolean;\r\n\r\n  @Input() loading!: boolean;\r\n\r\n  @Input() lazy!: boolean;\r\n  @Input() responsiveLayout!: string;\r\n  @Input() columnResizeMode: string = 'fit';\r\n  @Input() responsive: boolean = false;\r\n\r\n  @Input() lazyOnInit: boolean = true;\r\n\r\n  @Input() emitLazy!: boolean;\r\n\r\n  @Input() checked: any = [];\r\n\r\n  @Input() selectableColumns: boolean = false;\r\n  @Input() columnsSelectorPlaceholder: string = 'Seleziona colonne';\r\n\r\n  selectedColumns!: Cols[];\r\n\r\n  //    Output per triggerare il cambio pagina ( nuova chiamata al be)\r\n  @Output() pageChanged: EventEmitter<{ pageNumber: number, field: string, order: number }> = new EventEmitter<{ pageNumber: number, field: string, order: number }>();\r\n\r\n  @Output() lazyLoadChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  //    Output per aggiornare il valore delle checkbox in tabella\r\n  @Output() checkedRowValues: EventEmitter<any[]> = new EventEmitter<any[]>();\r\n\r\n  @Output() selectedValueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  //    Output per segnalare l'evento di sorting\r\n  @Output() sortValues: EventEmitter<{ field: string, order: number }> = new EventEmitter<{ field: string, order: number }>();\r\n\r\n  pageIndex: number = 0;\r\n  firstRowInPage: number = 0;\r\n  //environment = environment\r\n\r\n  get selectableColumnsList(): Cols[] {\r\n    return this.columns.filter((col: Cols) => col.selectable);\r\n  }\r\n\r\n  constructor(private tableService: LibTableService) { }\r\n\r\n  ngOnInit() {\r\n    if (!this.dataKey) {\r\n      this.dataKey = this.columns[0].field;\r\n    }\r\n    this.selectedColumns = this.columns;\r\n  }\r\n\r\n\r\n  protected getFieldValue(data: { [key: string]: any }, field: string): any {\r\n    // esempio con --> field country.name\r\n    return this.tableService.getFieldValue(data, field);\r\n  }\r\n\r\n  protected lazyLoading(event: LazyLoadEvent) {\r\n    let pageNumber = event.first && event.rows ? (event.first / event.rows + 1) : 1;\r\n\r\n    if (!this.emitLazy) {\r\n      this.pageChanged.emit({ pageNumber: pageNumber, field: event.sortField ? event.sortField : '', order: event.sortOrder ? event.sortOrder : 0 });\r\n    } else {\r\n      this.lazyLoadChange.emit(event);\r\n    }\r\n  }\r\n\r\n  selectedEvent(event?: any) {\r\n    this.selectedValueChange.emit(this.selectedValue);\r\n\r\n  }\r\n\r\n  emitSort(event: { field: string, order: number }): void {\r\n    if (!this.lazy) {\r\n      this.sortValues.emit(event);\r\n    }\r\n  }\r\n\r\n  check(event: any, checkType: string, rowData?: any) {\r\n    event.defaultEvent.stopPropagation();\r\n    if (checkType === 'all') {\r\n      this.checked = event.checked ? [...this.value.filter(el => el && !el.isDisabledChecked)] : [];\r\n    } else {\r\n      if (event.checked) {\r\n        this.checked.push(rowData);\r\n      } else {\r\n        const indexToRemove = this.checked.findIndex((item: any) => item[this.dataKey] === rowData[this.dataKey]);\r\n        this.checked.splice(indexToRemove, 1);\r\n      }\r\n    }\r\n\r\n    this.checkedRowValues.emit(this.checked);\r\n  }\r\n\r\n  isChecked(rowData: any): boolean {\r\n    return (this.checked.filter((item: any) => item[this.dataKey] === rowData[this.dataKey]).length > 0);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tableService",
                        "type": "LibTableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 109,
                "jsdoctags": [
                    {
                        "name": "tableService",
                        "type": "LibTableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "selectableColumnsList": {
                    "name": "selectableColumnsList",
                    "getSignature": {
                        "name": "selectableColumnsList",
                        "type": "[]",
                        "returnType": "Cols[]",
                        "line": 107
                    }
                }
            },
            "templateData": "<div class=\"table-wrapper\">\r\n\r\n\r\n\r\n    <p-table [selectionMode]=\"selectionType\" [filters]=\"filters\" [dataKey]=\"dataKey ? dataKey : columns[0].field\"\r\n        [resizableColumns]=\"resizableColumns\" [(selection)]=\"selectedValue\"\r\n        (selectionChange)=\"selectedEvent(selectedValue)\" [scrollable]=\"isScrollable\" [scrollHeight]=\"scrollHeight\"\r\n        [alwaysShowPaginator]=\"alwaysShowPaginator\" [columns]=\"selectedColumns\" [value]=\"value\" [paginator]=\"showPaginator\"\r\n        [rows]=\"nRowsPerPage\" [rowsPerPageOptions]=\"rowsPerPage\" [totalRecords]=\"totalRecords\"\r\n        [currentPageReportTemplate]=\"reportString\" [loading]=\"loading\" [showCurrentPageReport]=\"showReportPage\"\r\n        [(first)]=\"firstRowInPage\" [lazy]=\"lazy\" [lazyLoadOnInit]=\"lazyOnInit\" [customSort]=\"serverSort\"\r\n        (onSort)=\"emitSort($event)\" (onLazyLoad)=\"lazyLoading($event)\" [columnResizeMode]=\"columnResizeMode\"\r\n        [responsive]=\"responsive\" [responsiveLayout]=\"responsiveLayout\">\r\n\r\n      <ng-template pTemplate=\"caption\" *ngIf=\"selectableColumns\">\r\n      <p-multiSelect  [options]=\"selectableColumnsList\" [(ngModel)]=\"selectedColumns\" optionLabel=\"header\"\r\n                     selectedItemsLabel=\"{0} columns selected\" [style]=\"{'min-width': '200px'}\" [placeholder]=\"columnsSelectorPlaceholder\"></p-multiSelect>\r\n    </ng-template>\r\n        <ng-template pTemplate=\"header\" let-columns>\r\n            <tr>\r\n                <ng-container *ngIf=\"showHeader\">\r\n                    <th *ngIf=\"isSelectable\">\r\n                        <lib-checkbox-button (emitChange)=\"check($event, 'all')\"\r\n                            [check]=\"value.length === checked.length\"></lib-checkbox-button>\r\n                    </th>\r\n                    <th *ngFor=\"let col of columns\" pResizableColumn [pSortableColumn]=\"col.sort ? col.field : null\">\r\n                        {{col.header}}\r\n                        <p-sortIcon *ngIf=\"col.sort\" [field]=\"col.field\"></p-sortIcon>\r\n                    </th>\r\n                    <th *ngIf=\"actions\" pFrozenColumn [frozen]=\"true\" alignFrozen=\"right\">\r\n                        Operazioni\r\n                    </th>\r\n                </ng-container>\r\n            </tr>\r\n        </ng-template>\r\n\r\n        <ng-template pTemplate=\"body\" let-rowData let-i=\"rowIndex\" let-columns=\"columns\">\r\n            <tr [pSelectableRow]=\"rowData\" [pSelectableRowIndex]=\"i\">\r\n                <td *ngIf=\"isSelectable\">\r\n                    <lib-checkbox-button [check]=\"isChecked(rowData)\" [disabled]=\"rowData.isDisabledChecked || false\"\r\n                        (emitChange)=\"check($event, 'single', rowData)\"></lib-checkbox-button>\r\n                </td>\r\n                <ng-template [ngTemplateOutlet]=\"externalBody ? externalBody : internalBody\"\r\n                    [ngTemplateOutletContext]=\"{data:rowData, column:columns}\">\r\n\r\n                </ng-template>\r\n\r\n            </tr>\r\n        </ng-template>\r\n    </p-table>\r\n</div>\r\n\r\n<ng-template #internalBody let-data=\"data\" let-columns=\"column\">\r\n    <td *ngFor=\"let col of columns\" [class]=\"col.classes ? col.classes : ''\">\r\n        <!-- DATI DELLE COLONNE -->\r\n        <span [innerHTML]=\"getFieldValue(data, col.field)\">\r\n        </span>\r\n    </td>\r\n\r\n    <td *ngIf=\"actions\" pFrozenColumn [frozen]=\"true\" alignFrozen=\"right\">\r\n        <ng-container [ngTemplateOutlet]=\"actions\" [ngTemplateOutletContext]=\"{data:data}\">\r\n        </ng-container>\r\n    </td>\r\n</ng-template>\r\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-c72ae9577f8d0582526bbf6918ba3882565ac0386a378aa859c43a6749cc731510b449b911dacb6d296e3b8ee1ee3b3add84efce76422c6aad0be7f72f1510f5",
            "file": "projects/design-system/src/lib/atoms/tabs/components/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "contents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "index",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "sections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Tabs[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "indexChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "indexNotShow",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "changeIndex",
                    "args": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { Tabs } from '../models/tabs.model';\r\n\r\n@Component({\r\n    selector: 'lib-tabs',\r\n    templateUrl: './tabs.component.html',\r\n    styleUrls: ['./tabs.component.scss']\r\n})\r\nexport class TabsComponent {\r\n\r\n    @Input() sections!: Tabs[];\r\n    @Input() contents!: TemplateRef<any>;\r\n    @Input() index: number = 0;\r\n\r\n    indexNotShow: string = '';\r\n\r\n    @Output() indexChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n    ngOnInit() {\r\n        let indexSelected = this.sections.findIndex(el => el.isSelected);\r\n        this.sections.forEach((item, index) => {\r\n            if (item.hide) {\r\n                this.indexNotShow += ' not-show-' + index;\r\n            }\r\n            if (indexSelected < 0) {\r\n                if (!(item.hide || item.isDisabled)) {\r\n                    indexSelected = index;\r\n                }\r\n            }\r\n        })\r\n        this.index = indexSelected;\r\n        this.indexChange.emit(indexSelected);\r\n    }\r\n\r\n    changeIndex(event: number) {\r\n        this.indexChange.emit(event);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<p-tabView [(activeIndex)]=\"index\" (activeIndexChange)=\"changeIndex($event)\" [ngClass]=\"indexNotShow\">\r\n\r\n    <p-tabPanel *ngFor=\"let item of sections; let i = index\" [header]=\"item.header\" [selected]=\"i === index\"\r\n        [disabled]=\"item.isDisabled\">\r\n        <ng-container [ngTemplateOutlet]=\"contents ? contents : null\"\r\n            [ngTemplateOutletContext]=\"{data: item.content}\"></ng-container>\r\n\r\n    </p-tabPanel>\r\n\r\n</p-tabView>"
        },
        {
            "name": "TagComponent",
            "id": "component-TagComponent-429dbf3d451a34e5608c458855a2d2878f38e51d229da13f99c3950a47dcaaaaee9ebea1cb27efc096c7763c891160d92d948aef95aac314b8805aaae98cd0f7",
            "file": "projects/design-system/src/lib/atoms/tag/components/tag.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-tag",
            "styleUrls": [
                "./tag.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tag.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "tagIcon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tagLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tagRounded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tagSeverity",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tagStyle",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "object",
                    "decorators": []
                },
                {
                    "name": "tagStyleClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-tag',\r\n  templateUrl: './tag.component.html',\r\n  styleUrls: ['./tag.component.scss']\r\n})\r\nexport class TagComponent {\r\n  @Input() tagLabel: string = '';\r\n  @Input() tagSeverity: string = '';\r\n  @Input() tagRounded: boolean = false;\r\n  @Input() tagIcon: string = '';\r\n  @Input() tagStyleClass: string = '';\r\n  @Input() tagStyle: object = {};\r\n\r\n  constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./tag.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [],
            "templateData": "<div class=\"app-tag app-tag-{{tagSeverity}}\">\r\n  <p-tag [value]=\"tagLabel\" [severity]=\"tagSeverity\" [rounded]=\"tagRounded\" [icon]=\"tagIcon\"\r\n    [styleClass]=\"tagStyleClass\" [style]=\"tagStyle\"></p-tag>\r\n</div>\r\n"
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-3eba75e3ae20752ea82294e79afc3c7c93687a2ce8e17abf506d333b4abadb66a551691d45fbc50217a16d5a230dcb3eab9a46603d909e22a1627dc5bffcd8d1",
            "file": "projects/design-system/src/lib/atoms/textarea/components/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextareaComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "lib-textarea",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "AbstractControl",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Inserisci un testo'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "emitValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\r\nimport { AbstractControl, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'lib-textarea',\r\n  templateUrl: './textarea.component.html',\r\n  styleUrls: ['./textarea.component.scss'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TextareaComponent),\r\n    multi: true\r\n}]\r\n})\r\nexport class TextareaComponent {\r\n\r\n    @Input() value: string = '';\r\n    @Input() icon: string = '';\r\n    @Input() placeholder: string = 'Inserisci un testo';\r\n    @Input() label: string = '';\r\n    @Input() error: boolean = false;\r\n    @Input() disabled:boolean = false;\r\n    @Input() control: AbstractControl = new FormControl();\r\n    // @Input('controlName') formControlName: string = '';\r\n    \r\n    \r\n    touched = false;\r\n\r\n    onChange: any = () => { }\r\n    onTouch: any = () => { }\r\n\r\n    //@Input() formControl: FormControl = new FormControl();\r\n\r\n    \r\n    // get control() {\r\n    //     return this.controlContainer.control?.get(this.formControlName);\r\n    // }\r\n\r\n    get haveError() {\r\n        return this.control && this.control.errors && (!this.control.pristine || this.control.touched);\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n        \r\n    }\r\n\r\n    // this method sets the value programmatically\r\n    writeValue(value: string) {\r\n        this.value = value;\r\n    }\r\n    \r\n    // set UI element value changes emit function\r\n    registerOnChange(fn: any) {\r\n        this.onChange = fn\r\n    }\r\n\r\n    // set touching element emit function\r\n    registerOnTouched(fn: any) {\r\n        this.onTouch = fn\r\n    }\r\n\r\n    // upon disabled statu change, this method gets triggered\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    // upon UI element value change, this method gets triggered\r\n    emitValue(event: any) {\r\n        this.value = event;\r\n        this.onChange(event);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    ::ng-deep .p-inputtextarea {\r\n        overflow: unset;\r\n        max-height: 130px;\r\n        overflow-y: auto;\r\n    }\r\n\r\n    ::ng-deep .p-inputtextarea-resizable {\r\n        overflow: unset;\r\n    }\r\n}\r\n\r\n.wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 8px;\r\n}\r\n",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 40
            },
            "extends": [],
            "accessors": {
                "haveError": {
                    "name": "haveError",
                    "getSignature": {
                        "name": "haveError",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                }
            },
            "templateData": "<div class=\"wrapper field\">\r\n    <label *ngIf=\"label\">{{label}}</label>\r\n    <textarea [id]=\"control\" [ngClass]=\"{'ng-invalid ng-dirty': haveError}\" [placeholder]=\"placeholder\"\r\n        (ngModelChange)=\"emitValue($event)\" rows=\"5\" cols=\"20\" pInputTextarea [(ngModel)]=\"value\"></textarea>\r\n</div>"
        },
        {
            "name": "TimelineComponent",
            "id": "component-TimelineComponent-78d32e511280d7d2f39940921c8d2bf93374f9b234af4275bef9855019553ca376ae991a26a1de55bfa5d09dad06cd66142f29d304583ba80c5f413931dda170",
            "file": "projects/design-system/src/lib/atoms/timeline/components/timeline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-timeline",
            "styleUrls": [
                "./timeline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "externalContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "externalOpposite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, TemplateRef } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'lib-timeline',\r\n    templateUrl: './timeline.component.html',\r\n    styleUrls: ['./timeline.component.scss']\r\n})\r\nexport class TimelineComponent {\r\n    @Input() events!: any;\r\n    @Input() externalContent!: TemplateRef<any>;\r\n    // header tabella\r\n    @Input() externalOpposite!: TemplateRef<any>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".margin-on-top {\r\n    margin-top: 15px;\r\n}\r\n\r\n.margin-on-bottom {\r\n    margin-bottom: 15px;\r\n}\r\n",
                    "styleUrl": "./timeline.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"card\" *ngIf=\"events\">\r\n    <p-timeline [value]=\"events\">\r\n        <ng-template pTemplate=\"content\" let-event>\r\n            <ng-template [ngTemplateOutlet]=\"externalContent ? externalContent : internalContent\"\r\n                [ngTemplateOutletContext]=\"{data:event}\">\r\n\r\n            </ng-template>\r\n\r\n            <!-- <small class=\"p-text-secondary\">{{ event.date }}</small> -->\r\n        </ng-template>\r\n        <ng-template pTemplate=\"opposite\" let-event>\r\n            <ng-template [ngTemplateOutlet]=\"externalOpposite ? externalOpposite : internalOpposite\"\r\n                [ngTemplateOutletContext]=\"{data: event}\">\r\n\r\n            </ng-template>\r\n            <!-- {{ event.status }} -->\r\n        </ng-template>\r\n    </p-timeline>\r\n</div>\r\n\r\n<ng-template #internalContent let-data=\"data\">\r\n    <!-- <div>\r\n        {{data.date}} <br>\r\n        <div *ngFor=\"let label of data.labels, let i = index\" class=\"margin-on-bottom\"\r\n            [ngStyle]=\"{'visibility': i > 0 && label.address.label === data.labels[i-1].address.label ? 'hidden' : 'unset'}\">\r\n            {{label.address.label}}\r\n\r\n\r\n        </div>\r\n\r\n    </div> -->\r\n    <!-- <small class=\"p-text-secondary\">{{ data.date }}</small> -->\r\n</ng-template>\r\n<ng-template #internalOpposite let-data=\"data\">\r\n    <!-- {{ data.status }} -->\r\n    <!-- <div *ngFor=\"let label of data.labels\" class=\"margin-on-top\">\r\n        {{label.request.label}} <br>\r\n\r\n    </div> -->\r\n</ng-template>"
        },
        {
            "name": "ToastComponent",
            "id": "component-ToastComponent-1e2b2a847663440a180571f439c2982910f6077e2aa11cf152b50bf55a2f575a88cf5073f85c8f8db3674e504b82ecb4e7666c41791644174aa68fb49dd25fc0",
            "file": "projects/design-system/src/lib/molecole/messages/components/toast/toast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-toast",
            "styleUrls": [
                "./toast.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toast.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "key",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'top-right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n// import { Message, MessageService } from 'primeng/api';\r\n\r\n@Component({\r\n  selector: 'lib-toast',\r\n  templateUrl: './toast.component.html',\r\n  styleUrls: ['./toast.component.scss']\r\n})\r\nexport class ToastComponent {\r\n  @Input() position: string = 'top-right';\r\n  @Input() key: string = '';\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toast.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<p-toast [position]=\"position\" [key]=\"key\"></p-toast>\r\n"
        },
        {
            "name": "TreemenuComponent",
            "id": "component-TreemenuComponent-94c1eddd4d00bb062bfdaa5d6ded4e89e28879c160adc88cc6c51dc5c3fb30b51fd0e65e6e37903d18b3fec4ea5e76f9d659cd535b710b7c93a22093d678cee0",
            "file": "projects/design-system/src/lib/atoms/treemenu/components/treemenu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-treemenu",
            "styleUrls": [
                "./treemenu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./treemenu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkboxOnlyLeaf",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "draggableNodes",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "droppableNodes",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filterMode",
                    "defaultValue": "'lenient'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "filterPlaceholder",
                    "defaultValue": "'Search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "TreeMenu[]",
                    "decorators": []
                },
                {
                    "name": "lazy",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "lazyFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "Function",
                    "decorators": []
                },
                {
                    "name": "propagateSelectionDown",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "propagateSelectionUp",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "scrollHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "selectionMode",
                    "defaultValue": "'single'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emitSelect",
                    "defaultValue": "new EventEmitter<TreeSelectModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                },
                {
                    "name": "emitUnselect",
                    "defaultValue": "new EventEmitter<TreeSelectModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedChange",
                    "defaultValue": "new EventEmitter<TreeMenu[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<TreeMenu[]>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "changedSelection",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "expandNode",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "lazyLoad",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nodeCollapse",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectEmit",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unselectEmit",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { TreeMenu } from '../models/treemenu.model';\r\nimport { TreeSelectModel } from '../../tree-select/models/tree-select.model';\r\nimport { TreeDragDropService } from 'primeng/api';\r\n\r\n@Component({\r\n  selector: 'lib-treemenu',\r\n  templateUrl: './treemenu.component.html',\r\n  styleUrls: ['./treemenu.component.scss']\r\n})\r\nexport class TreemenuComponent {\r\n  @Input() items!: TreeMenu[];\r\n  @Input() filter: boolean = false;\r\n  @Input() scrollHeight!: string;\r\n  @Input() checkboxOnlyLeaf: boolean = false;\r\n  @Input() propagateSelectionUp: boolean = true;\r\n  @Input() lazy: boolean = false;\r\n  @Input() draggableNodes: boolean = false;\r\n  @Input() droppableNodes: boolean = false;\r\n  @Input() propagateSelectionDown: boolean = true;\r\n  @Input() selectionMode: string = 'single';\r\n  @Input() filterPlaceholder: string = 'Search';\r\n  @Input() filterMode: string = 'lenient';\r\n  @Input() selected!: any;\r\n  @Input() lazyFn: Function;\r\n\r\n  @Output() selectedChange: EventEmitter<TreeMenu[]> = new EventEmitter<TreeMenu[]>();\r\n  @Output() emitUnselect = new EventEmitter<TreeSelectModel>();\r\n  @Output() emitSelect = new EventEmitter<TreeSelectModel>();\r\n\r\n  constructor(protected dragservice: TreeDragDropService) {}\r\n\r\n  changedSelection(event: any) {\r\n    this.selectedChange.emit(event);\r\n  }\r\n\r\n  unselectEmit(event: { originalEvent: PointerEvent, node: TreeSelectModel }): void {\r\n    console.log(event);\r\n    this.emitUnselect.emit(event.node);\r\n  }\r\n \r\n  selectEmit(event: { originalEvent: PointerEvent, node: TreeSelectModel }): void {\r\n    console.log(event);\r\n    this.emitSelect.emit(event.node);\r\n  }\r\n\r\n  lazyLoad(event: any) {\r\n    console.log(event);\r\n  }\r\n\r\n  expandNode(event: any) {\r\n    this.lazyFn(event.node);\r\n  }\r\n\r\n  nodeCollapse(event: any) {\r\n    event.node.children = [];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./treemenu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dragservice",
                        "type": "TreeDragDropService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "dragservice",
                        "type": "TreeDragDropService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div [ngClass]=\"{'treemenu-wrapper':true, 'checkbox-on-leaf': checkboxOnlyLeaf}\">\r\n    <p-tree [value]=\"items\" [filter]=\"filter\" [selectionMode]=\"selectionMode\" [filterPlaceholder]=\"filterPlaceholder\"\r\n        [filterMode]=\"filterMode\" [(selection)]=\"selected\" (selectionChange)=\"changedSelection($event)\" [draggableNodes]=\"draggableNodes\" [droppableNodes]=\"droppableNodes\" [lazy]=\"lazy\" [draggableScope]=\"'self'\" [droppableScope]=\"'self'\"\r\n        [propagateSelectionUp]=\"propagateSelectionUp\" [propagateSelectionDown]=\"propagateSelectionDown\" (onNodeSelect)=\"selectEmit($event)\" (onNodeUnselect)=\"unselectEmit($event)\" (onNodeExpand)=\"lazy ? expandNode($event) : null\" (onNodeCollapse)=\"lazy ? nodeCollapse($event) : null\"\r\n        [scrollHeight]=\"scrollHeight\"></p-tree>\r\n\r\n</div>"
        },
        {
            "name": "TreeSelectComponent",
            "id": "component-TreeSelectComponent-2735a67d67196e54ed573a8582242b4b291776b760fea9b9d946b8948674bd8b5539f745ab3cd8505fbf33bc1bc90a81d14ca8de165e53382314d7715e54a8fa",
            "file": "projects/design-system/src/lib/atoms/tree-select/components/tree-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-tree-select",
            "styleUrls": [
                "./tree-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tree-select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "enableFilter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filterPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "lazy",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "lazyFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Function",
                    "decorators": []
                },
                {
                    "name": "nodes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TreeSelectModel[]",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "\"Select Item\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "propagateDown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "propagateUp",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectedNodes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "TreeSelectModel[]",
                    "decorators": []
                },
                {
                    "name": "selectionType",
                    "defaultValue": "\"multiple\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "valueTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emitSelectedOption",
                    "defaultValue": "new EventEmitter<{ originalEvent: PointerEvent, node: TreeSelectModel }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<literal type>"
                },
                {
                    "name": "emitSelectedValues",
                    "defaultValue": "new EventEmitter<Array<TreeSelectModel>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<Array<TreeSelectModel>>"
                },
                {
                    "name": "emitUnselect",
                    "defaultValue": "new EventEmitter<{ originalEvent: PointerEvent, node: TreeSelectModel }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<literal type>"
                },
                {
                    "name": "selectedNodesChange",
                    "defaultValue": "new EventEmitter<TreeSelectModel[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<TreeSelectModel[]>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "expandNode",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nodeCollapse",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "optionEmit",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedValuesEmit",
                    "args": [
                        {
                            "name": "event",
                            "type": "Array<TreeSelectModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Array<TreeSelectModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unselectEmit",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\r\nimport { TreeSelectModel } from \"../models/tree-select.model\";\r\n\r\n@Component({\r\n  selector: 'lib-tree-select',\r\n  templateUrl: './tree-select.component.html',\r\n  styleUrls: ['./tree-select.component.scss']\r\n})\r\nexport class TreeSelectComponent {\r\n\r\n  @Input() nodes: TreeSelectModel[] = [];\r\n\r\n  @Input() enableFilter = false;\r\n  @Input() propagateDown = false;\r\n  @Input() lazy = false;\r\n  @Input() lazyFn: Function;\r\n  @Input() propagateUp = false;\r\n  @Input() filterPlaceholder!: string;\r\n  @Input() valueTemplate!: TemplateRef<any>;\r\n  @Input() selectedNodes: TreeSelectModel[] = [];\r\n  @Output() selectedNodesChange: EventEmitter<TreeSelectModel[]> = new EventEmitter<TreeSelectModel[]>();\r\n\r\n  @Input() placeholder = \"Select Item\";\r\n  @Input() selectionType = \"multiple\";\r\n  @Output() emitSelectedOption: EventEmitter<{ originalEvent: PointerEvent, node: TreeSelectModel }> = new EventEmitter<{ originalEvent: PointerEvent, node: TreeSelectModel }>();\r\n  @Output() emitUnselect: EventEmitter<{ originalEvent: PointerEvent, node: TreeSelectModel }> = new EventEmitter<{ originalEvent: PointerEvent, node: TreeSelectModel }>();\r\n  @Output() emitSelectedValues: EventEmitter<Array<TreeSelectModel>> = new EventEmitter<Array<TreeSelectModel>>();\r\n\r\n  constructor() {\r\n  }\r\n\r\n\r\n  optionEmit(event: { originalEvent: PointerEvent, node: TreeSelectModel }): void {\r\n    this.emitSelectedOption.emit(event);\r\n  }\r\n\r\n  unselectEmit(event: { originalEvent: PointerEvent, node: TreeSelectModel }): void {\r\n\r\n    this.emitUnselect.emit(event);\r\n  }\r\n\r\n  selectedValuesEmit(event: Array<TreeSelectModel>): void {\r\n    this.emitSelectedValues.emit(event);\r\n  }\r\n\r\n  expandNode(event: any) {\r\n    this.lazyFn(event.node);\r\n  }\r\n\r\n  nodeCollapse(event: any) {\r\n    event.node.children = [];\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tree-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "extends": [],
            "templateData": "<p-treeSelect [(ngModel)]=\"selectedNodes\" (ngModelChange)=\"selectedValuesEmit($event)\" [options]=\"nodes\" [filter]=\"enableFilter\" [filterPlaceholder]=\"filterPlaceholder\" (onNodeExpand)=\"lazy ? expandNode : null\" (onNodeCollapse)=\"lazy ? nodeCollapse($event) : null\"\r\n    [metaKeySelection]=\"false\" [selectionMode]=\"selectionType\" placeholder=\"{{placeholder}}\" [propagateSelectionDown]=\"propagateDown\" [propagateSelectionUp]=\"propagateUp\"\r\n    (onNodeSelect)=\"optionEmit($event)\" (onNodeUnselect)=\"unselectEmit($event)\">\r\n    <ng-template pTemplate=\"value\" let-node *ngIf=\"valueTemplate\">\r\n        <ng-container [ngTemplateOutlet]=\"valueTemplate ? valueTemplate : null\"></ng-container>\r\n    </ng-template>\r\n</p-treeSelect>"
        },
        {
            "name": "UploadFileComponent",
            "id": "component-UploadFileComponent-926a065781ddd04c9e1f7b436b357e45bff776d5f63cb80dd3c90a8a4f91c0a6b8d8111ec01f8c662fdb800da877c5585efd77a35b1782c90a58bb546b789c68",
            "file": "projects/design-system/src/lib/molecole/upload-file/components/upload-file.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-upload-file",
            "styleUrls": [
                "./upload-file.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./upload-file.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "FileUpload",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "iconArray",
                    "defaultValue": "[\r\n        { extensions: ['doc', 'docx', 'txt', 'docm', 'dotm', 'dot', 'dotx'], path: 'assets/svg/microsoft-word.svg' },\r\n        { extensions: ['pdf'], path: 'assets/svg/pdf.svg' },\r\n        { extensions: ['xls', 'xlsx', 'xlsm', 'xlsb', 'xltx', 'xlt', 'csv'], path: 'assets/svg/microsoft-excel.svg' },\r\n        { extensions: ['ppt', 'pptx', 'pptm', 'xps', 'potx', 'ppsx', 'pps', 'odp', ''], path: 'assets/svg/microsoft-powerpoint.svg' },\r\n        { extensions: ['zip', 'rar'], path: 'assets/svg/zip.svg' },\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "srcIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FileUpload } from '../models/file-upload.model';\r\n\r\n@Component({\r\n    selector: 'lib-upload-file',\r\n    templateUrl: './upload-file.component.html',\r\n    styleUrls: ['./upload-file.component.scss']\r\n})\r\nexport class UploadFileComponent implements OnInit {\r\n    @Input() file!: FileUpload;\r\n\r\n\r\n    srcIcon!: string;\r\n\r\n    iconArray = [\r\n        { extensions: ['doc', 'docx', 'txt', 'docm', 'dotm', 'dot', 'dotx'], path: 'assets/svg/microsoft-word.svg' },\r\n        { extensions: ['pdf'], path: 'assets/svg/pdf.svg' },\r\n        { extensions: ['xls', 'xlsx', 'xlsm', 'xlsb', 'xltx', 'xlt', 'csv'], path: 'assets/svg/microsoft-excel.svg' },\r\n        { extensions: ['ppt', 'pptx', 'pptm', 'xps', 'potx', 'ppsx', 'pps', 'odp', ''], path: 'assets/svg/microsoft-powerpoint.svg' },\r\n        { extensions: ['zip', 'rar'], path: 'assets/svg/zip.svg' },\r\n    ];\r\n\r\n    ngOnInit() {\r\n        let lastIndex = this.file.title.lastIndexOf('.');\r\n        if (lastIndex > 0)\r\n            this.srcIcon = this.iconArray.filter(item => item.extensions.includes(this.file.title.substring(lastIndex + 1, this.file.title.length)))[0].path;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./upload-file.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"upload-file-progress\">\r\n    <div class=\"file-structure\">\r\n        <img class=\"file-icon\" *ngIf=\"srcIcon\" [src]=\"srcIcon\" alt=\"file icon\" />\r\n        <div class=\"file-data\">\r\n            <span [class]=\"srcIcon ? 'title-icon' : 'title'\">{{file.title}}</span>\r\n            <span *ngIf=\"file.dimension\" class=\"dimension\">{{file.dimension}}</span>\r\n        </div>\r\n    </div>\r\n    <div>\r\n        <lib-progress-bar [progress]=\"file.progress\"></lib-progress-bar>\r\n    </div>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "CtaBarModule",
            "id": "module-CtaBarModule-f779f2e8c114b14beac0af00567164ea0254e7e3f1955ce04c187bf530ad1bae4042587832a8f4ce693aeb5b1b8b3d33bff377f4f1185062f3ab88db28dd5880",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/molecole/cta-bar/cta-bar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CtaBarComponent } from './components/cta-bar.component';\r\nimport { ButtonModule } from 'primeng/button';\r\n\r\n\r\nconst primeComponents = [\r\n    ButtonModule\r\n];\r\n\r\nconst exportComponent = [\r\n    CtaBarComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\n\r\nexport class CtaBarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DesignSystemModule",
            "id": "module-DesignSystemModule-cebe97c624e5440ecb08332a7a59756aa1c6021e52f6ca99657570188718ba2afad4b964344c6bad31be4cc2e6d0f0b7aadb7c672f0733cc44064a256dbe7887",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/design-system.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { LibTableService } from '../public-api';\r\nimport { LibAddressModule } from './atoms/address/lib-address.module';\r\nimport { LibAutocompleteModule } from './atoms/autocomplete/lib-autocomplete.module';\r\nimport { LibBadgeModule } from './atoms/badge/lib-badge.module';\r\nimport { LibBreadcrumbModule } from './atoms/breadcrumb/lib-breadcrumb.module';\r\nimport { LibButtonModule } from './atoms/button/lib-button.module';\r\nimport { LibCalendarModule } from './atoms/calendar/lib-calendar.module';\r\nimport { LibCardModule } from './atoms/card/lib-card.module';\r\nimport { LibCheckboxModule } from './atoms/checkbox/lib-checkbox.module';\r\nimport { LibChipModule } from './atoms/chip/lib-chip.module';\r\nimport { LibChooseFileModule } from './atoms/choose-file/choose-file.module';\r\nimport { LibDialogModule } from './atoms/dialog/lib-dialog.module';\r\nimport { LibDropdownModule } from './atoms/dropdown/lib-dropdown.module';\r\nimport { LibIconCircleModule } from './atoms/icon-circle/lib-icon-circle.module';\r\nimport { InputFormModule } from './atoms/input-form/input-form.module';\r\nimport { LibInputModule } from './atoms/input/lib-input.module';\r\nimport { LibLoaderModule } from './atoms/loader/lib-loader.module';\r\nimport { LibPickListModule } from './atoms/pick-list/lib-pick-list.module';\r\nimport { LibProgressBarModule } from './atoms/progress-bar/lib-progress-bar.module';\r\nimport { LibRadioButtonModule } from './atoms/radio-button/lib-radio-button.module';\r\nimport { SidebarModule } from './atoms/sidebar/sidebar.module';\r\nimport { SwitchModule } from './atoms/switch/switch.module';\r\nimport { LibTabsModule } from './atoms/tabs/lib-tabs.module';\r\nimport { LibTagModule } from './atoms/tag/lib-tag.module';\r\nimport { LibTextareaModule } from './atoms/textarea/lib-textarea.module';\r\nimport { LibTimelineModule } from './atoms/timeline/lib-timeline.module';\r\nimport { LibTreeSelectModule } from \"./atoms/tree-select/lib-tree-select.module\";\r\nimport { LibTreemenuModule } from './atoms/treemenu/lib-treemenu.module';\r\nimport { LibFiltersModule } from \"./micro-organismi/filters/lib-filters.module\";\r\nimport { CtaBarModule } from './molecole/cta-bar/cta-bar.module';\r\nimport { FileStatusModule } from './molecole/file-status/file-status.module';\r\nimport { FileModule } from './molecole/file/file.module';\r\nimport { HeaderItemsModule } from './molecole/header-items/header-items.module';\r\nimport { HeaderMenuModule } from './molecole/header-menu/header-menu.module';\r\nimport { LibMessagesModule } from './molecole/messages/lib-messages.module';\r\nimport { LibRadioTileModule } from './molecole/radio-tile/lib-radio-tile.module';\r\nimport { LibTableModule } from './molecole/table/lib-table.module';\r\nimport { LibUploadFileModule } from './molecole/upload-file/lib-upload-file.module';\r\nimport { PipesModule } from './pipes/pipes.module';\r\nimport { LibListboxModule } from './atoms/listbox/lib-listbox.module';\r\nimport { LibCircleStatusModule } from './atoms/circle-status/lib-circle-status.module';\r\nimport { LibAccordionModule } from \"./atoms/accordion/lib-accordion.module\";\r\nimport { LibInplaceModule } from './atoms/inplace/lib-inplace.module';\r\nimport { LibStepperModule } from './atoms/stepper/lib-stepper.module';\r\nimport {LibPaginatorModule} from \"./atoms/paginator/lib-paginator.module\";\r\n\r\nconst sharedModules = [\r\n  LibTagModule,\r\n  LibCardModule,\r\n  LibBreadcrumbModule,\r\n  LibButtonModule,\r\n  LibDropdownModule,\r\n  LibCalendarModule,\r\n  LibAutocompleteModule,\r\n  LibCheckboxModule,\r\n  LibRadioButtonModule,\r\n  LibChipModule,\r\n  LibTextareaModule,\r\n  InputFormModule,\r\n  LibInputModule,\r\n  LibBadgeModule,\r\n  LibDialogModule,\r\n  LibIconCircleModule,\r\n  LibTabsModule,\r\n  LibTableModule,\r\n  CtaBarModule,\r\n  HeaderItemsModule,\r\n  LibMessagesModule,\r\n  LibRadioTileModule,\r\n  LibFiltersModule,\r\n  HeaderMenuModule,\r\n  SidebarModule,\r\n  FileModule,\r\n  FileStatusModule,\r\n  LibTreeSelectModule,\r\n  LibProgressBarModule,\r\n  LibUploadFileModule,\r\n  LibChooseFileModule,\r\n  SwitchModule,\r\n  LibTreemenuModule,\r\n  PipesModule,\r\n  LibLoaderModule,\r\n  HeaderItemsModule,\r\n  LibAddressModule,\r\n  LibTimelineModule,\r\n  LibPickListModule,\r\n  LibListboxModule,\r\n  LibCircleStatusModule,\r\n  LibAccordionModule,\r\n  LibInplaceModule,\r\n  LibStepperModule,\r\n  LibPaginatorModule\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ...sharedModules\r\n  ],\r\n  exports: [\r\n    ...sharedModules\r\n  ],\r\n  providers: [LibTableService]\r\n})\r\nexport class DesignSystemModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LibTableService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CtaBarModule"
                        },
                        {
                            "name": "FileModule"
                        },
                        {
                            "name": "FileStatusModule"
                        },
                        {
                            "name": "HeaderItemsModule"
                        },
                        {
                            "name": "HeaderMenuModule"
                        },
                        {
                            "name": "InputFormModule"
                        },
                        {
                            "name": "LibAccordionModule"
                        },
                        {
                            "name": "LibAddressModule"
                        },
                        {
                            "name": "LibAutocompleteModule"
                        },
                        {
                            "name": "LibBadgeModule"
                        },
                        {
                            "name": "LibBreadcrumbModule"
                        },
                        {
                            "name": "LibButtonModule"
                        },
                        {
                            "name": "LibCalendarModule"
                        },
                        {
                            "name": "LibCardModule"
                        },
                        {
                            "name": "LibCheckboxModule"
                        },
                        {
                            "name": "LibChipModule"
                        },
                        {
                            "name": "LibChooseFileModule"
                        },
                        {
                            "name": "LibCircleStatusModule"
                        },
                        {
                            "name": "LibDialogModule"
                        },
                        {
                            "name": "LibDropdownModule"
                        },
                        {
                            "name": "LibFiltersModule"
                        },
                        {
                            "name": "LibIconCircleModule"
                        },
                        {
                            "name": "LibInplaceModule"
                        },
                        {
                            "name": "LibInputModule"
                        },
                        {
                            "name": "LibListboxModule"
                        },
                        {
                            "name": "LibLoaderModule"
                        },
                        {
                            "name": "LibMessagesModule"
                        },
                        {
                            "name": "LibPaginatorModule"
                        },
                        {
                            "name": "LibPickListModule"
                        },
                        {
                            "name": "LibProgressBarModule"
                        },
                        {
                            "name": "LibRadioButtonModule"
                        },
                        {
                            "name": "LibRadioTileModule"
                        },
                        {
                            "name": "LibStepperModule"
                        },
                        {
                            "name": "LibTableModule"
                        },
                        {
                            "name": "LibTabsModule"
                        },
                        {
                            "name": "LibTagModule"
                        },
                        {
                            "name": "LibTextareaModule"
                        },
                        {
                            "name": "LibTimelineModule"
                        },
                        {
                            "name": "LibTreeSelectModule"
                        },
                        {
                            "name": "LibTreemenuModule"
                        },
                        {
                            "name": "LibUploadFileModule"
                        },
                        {
                            "name": "SidebarModule"
                        },
                        {
                            "name": "SwitchModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CtaBarModule"
                        },
                        {
                            "name": "FileModule"
                        },
                        {
                            "name": "FileStatusModule"
                        },
                        {
                            "name": "HeaderItemsModule"
                        },
                        {
                            "name": "HeaderMenuModule"
                        },
                        {
                            "name": "InputFormModule"
                        },
                        {
                            "name": "LibAccordionModule"
                        },
                        {
                            "name": "LibAddressModule"
                        },
                        {
                            "name": "LibAutocompleteModule"
                        },
                        {
                            "name": "LibBadgeModule"
                        },
                        {
                            "name": "LibBreadcrumbModule"
                        },
                        {
                            "name": "LibButtonModule"
                        },
                        {
                            "name": "LibCalendarModule"
                        },
                        {
                            "name": "LibCardModule"
                        },
                        {
                            "name": "LibCheckboxModule"
                        },
                        {
                            "name": "LibChipModule"
                        },
                        {
                            "name": "LibChooseFileModule"
                        },
                        {
                            "name": "LibCircleStatusModule"
                        },
                        {
                            "name": "LibDialogModule"
                        },
                        {
                            "name": "LibDropdownModule"
                        },
                        {
                            "name": "LibFiltersModule"
                        },
                        {
                            "name": "LibIconCircleModule"
                        },
                        {
                            "name": "LibInplaceModule"
                        },
                        {
                            "name": "LibInputModule"
                        },
                        {
                            "name": "LibListboxModule"
                        },
                        {
                            "name": "LibLoaderModule"
                        },
                        {
                            "name": "LibMessagesModule"
                        },
                        {
                            "name": "LibPaginatorModule"
                        },
                        {
                            "name": "LibPickListModule"
                        },
                        {
                            "name": "LibProgressBarModule"
                        },
                        {
                            "name": "LibRadioButtonModule"
                        },
                        {
                            "name": "LibRadioTileModule"
                        },
                        {
                            "name": "LibStepperModule"
                        },
                        {
                            "name": "LibTableModule"
                        },
                        {
                            "name": "LibTabsModule"
                        },
                        {
                            "name": "LibTagModule"
                        },
                        {
                            "name": "LibTextareaModule"
                        },
                        {
                            "name": "LibTimelineModule"
                        },
                        {
                            "name": "LibTreeSelectModule"
                        },
                        {
                            "name": "LibTreemenuModule"
                        },
                        {
                            "name": "LibUploadFileModule"
                        },
                        {
                            "name": "SidebarModule"
                        },
                        {
                            "name": "SwitchModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FileModule",
            "id": "module-FileModule-08f477bd66d6fbd56ae8148bffeaca56e39bf00fe22c8c6619c7b63df8d34528395bc59e5ba5554ed4446b2dfd34ed7c6143180adb776254f74d1f198b65a577",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/molecole/file/file.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FileComponent } from './components/file.component';\r\nimport { LibCheckboxModule } from '../../atoms/checkbox/lib-checkbox.module';\r\n\r\nconst exportComponent = [\r\n    FileComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        LibCheckboxModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\n\r\nexport class FileModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LibCheckboxModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FileStatusModule",
            "id": "module-FileStatusModule-e922213c4b0afe1787f2d8be411bd0ae7b39812c3ae41609dd3572c1db5c34da7dbcab2d273a02a09a18b9a4512b14743f04da70a45c35acf886db31a327247c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/molecole/file-status/file-status.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FileStatusComponent } from './components/file-status.component';\r\nimport { FileModule } from '../file/file.module';\r\nimport { LibTagModule } from '../../atoms/tag/lib-tag.module';\r\n\r\n\r\nconst exportComponent = [\r\n    FileStatusComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FileModule,\r\n        LibTagModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class FileStatusModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FileModule"
                        },
                        {
                            "name": "LibTagModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HeaderItemsModule",
            "id": "module-HeaderItemsModule-c30beae83df99e310d3bcda343ad7dba3f76d6cb8ddb7a1ebdc4c5e58ac488457f165e5d0b60cf91d508b721b8e529421ed4e7cae1adc9886b35c52fea7d3600",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/molecole/header-items/header-items.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CartComponent } from './components/cart/cart.component';\r\nimport { HeaderActionsComponent } from './components/header-actions/header-actions.component';\r\nimport { LogoComponent } from './components/logo/logo.component';\r\nimport { SearchBarComponent } from './components/search-bar/search-bar.component';\r\nimport { BadgeModule } from 'primeng/badge';\r\nimport { ListboxModule } from 'primeng/listbox';\r\nimport { LibButtonModule } from '../../atoms/button/lib-button.module';\r\nimport { LibIconCircleModule } from '../../atoms/icon-circle/lib-icon-circle.module';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { LanguageSelectorComponent } from './components/language-selector/language-selector.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HeaderNotificationsComponent } from './components/header-notifications/header-notifications.component';\r\nimport { LibBadgeModule } from '../../atoms/badge/lib-badge.module';\r\nimport { OverlayPanelModule } from 'primeng/overlaypanel';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HeaderMenuUserComponent } from './components/header-menu-user/header-menu-user.component';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { MenubarModule } from 'primeng/menubar';\r\nimport { MenuModule } from 'primeng/menu';\r\nimport { InputFormModule } from '../../atoms/input-form/input-form.module';\r\nimport { LibUploadFileModule } from '../upload-file/lib-upload-file.module';\r\nimport { HeaderItemsService } from './services/header-items.service';\r\nimport { LibDropdownModule } from '../../atoms/dropdown/lib-dropdown.module';\r\n\r\n\r\nconst primeComponents = [\r\n  BadgeModule,\r\n  DropdownModule,\r\n  ListboxModule,\r\n  OverlayPanelModule,\r\n  ButtonModule,\r\n  MenubarModule,\r\n  MenuModule\r\n];\r\n\r\nconst exportComponent = [\r\n  CartComponent,\r\n  HeaderActionsComponent,\r\n  LogoComponent,\r\n  SearchBarComponent,\r\n  LanguageSelectorComponent,\r\n  HeaderNotificationsComponent,\r\n  HeaderMenuUserComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...exportComponent\r\n  ],\r\n  imports: [\r\n    ...primeComponents,\r\n    CommonModule,\r\n    RouterModule,\r\n    LibButtonModule,\r\n    LibIconCircleModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    LibBadgeModule,\r\n    InputFormModule,\r\n    LibUploadFileModule,\r\n    LibDropdownModule\r\n  ],\r\n  exports: [\r\n    ...exportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ...exportComponent\r\n  ],\r\n  providers: []\r\n})\r\n\r\nexport class HeaderItemsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "InputFormModule"
                        },
                        {
                            "name": "LibBadgeModule"
                        },
                        {
                            "name": "LibButtonModule"
                        },
                        {
                            "name": "LibDropdownModule"
                        },
                        {
                            "name": "LibIconCircleModule"
                        },
                        {
                            "name": "LibUploadFileModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HeaderMenuModule",
            "id": "module-HeaderMenuModule-fad815c6129285d29356e2a5f00ac6eeec5d8cd26ed4ef42948a8ea5657a3eb5b9914f779676086ad8b0f37d6536cba5d639b2a33e803aa4da831694bc922385",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/molecole/header-menu/header-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MenubarModule } from 'primeng/menubar';\r\nimport { HeaderMenuComponent } from './components/header-menu.component';\r\nimport { LibProgressBarModule } from '../../atoms/progress-bar/lib-progress-bar.module';\r\n\r\n\r\nconst primeComponents = [\r\n    MenubarModule\r\n];\r\n\r\nconst exportComponent = [\r\n    HeaderMenuComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule,\r\n        LibProgressBarModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\n\r\nexport class HeaderMenuModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LibProgressBarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputFormModule",
            "id": "module-InputFormModule-106fcd5d241b3af0ef0750de27c16ff449bdf8d3c637ec33a835379c8dc037d2ab9f263988911739596977cee921d39e4aefc5c15fc0929084cb05c76f14cb71",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/input-form/input-form.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule, DatePipe } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { LibAutocompleteModule } from '../autocomplete/lib-autocomplete.module';\r\nimport { LibCalendarModule } from '../calendar/lib-calendar.module';\r\nimport { LibCheckboxModule } from '../checkbox/lib-checkbox.module';\r\nimport { LibChooseFileModule } from '../choose-file/choose-file.module';\r\nimport { LibDropdownModule } from '../dropdown/lib-dropdown.module';\r\nimport { LibErrorInlineModule } from '../error-inline/lib-error-inline.module';\r\nimport { LibInputModule } from '../input/lib-input.module';\r\nimport { LibRadioButtonModule } from '../radio-button/lib-radio-button.module';\r\nimport { LibTextareaModule } from '../textarea/lib-textarea.module';\r\nimport { InputFormComponent } from './components/input-form.component';\r\nimport { LibAutocompleteCardModule } from '../autocomplete-card/lib-autocomplete-card.module';\r\nimport { LibListboxModule } from '../listbox/lib-listbox.module';\r\nimport { LibMultiSelectModule } from '../multi-select/lib-multi-select.module';\r\nimport {LibButtonModule} from \"../button/lib-button.module\";\r\n\r\n\r\nconst primeComponents = [\r\n    LibDropdownModule,\r\n    LibCalendarModule,\r\n    LibAutocompleteModule,\r\n    LibCheckboxModule,\r\n    LibRadioButtonModule,\r\n    LibTextareaModule,\r\n    LibInputModule,\r\n    LibErrorInlineModule,\r\n    LibChooseFileModule,\r\n    LibAutocompleteCardModule,\r\n    LibListboxModule,\r\n    LibMultiSelectModule,\r\n    LibButtonModule\r\n];\r\n\r\nconst exportComponent = [\r\n    InputFormComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent,\r\n    ],\r\n  imports: [\r\n    ...primeComponents,\r\n    CommonModule,\r\n  ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ],\r\n    providers: [DatePipe]\r\n})\r\nexport class InputFormModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibAccordionModule",
            "id": "module-LibAccordionModule-2cefe3feb4278212f5662fdbb1d9cad0a5d4c3165e0d253d38f2acf255c19904a38f152ba06ebb22016f02023caf7e7465f2966ae3b12e8fa781fbfac8d9a84a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/accordion/lib-accordion.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AccordionComponent } from './components/accordion.component';\r\nimport {AccordionModule} from \"primeng/accordion\";\r\nimport {TabViewModule} from \"primeng/tabview\";\r\n\r\n\r\n\r\nconst primeComponents = [\r\n\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n  AccordionComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent,\r\n\r\n    ],\r\n  imports: [\r\n    //...primeComponents,\r\n    CommonModule,\r\n    AccordionModule,\r\n    TabViewModule\r\n  ],\r\n    exports: [\r\n        ...exportComponent\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibAccordionModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibAddressModule",
            "id": "module-LibAddressModule-47027bfa6e1943e6e4dd911726633285950c2004a47f9afe774ad49936e67ca03e6e4f179a5d36c64c2b4527bb44834cd7d690b42c4def595d0e07b9b777acb2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/address/lib-address.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AddressComponent } from './components/address.component';\r\nimport { LibCardModule } from '../card/lib-card.module';\r\nimport { LibButtonModule } from '../button/lib-button.module';\r\n\r\n\r\nconst primeComponents = [\r\n\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n    AddressComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        //...primeComponents,\r\n        CommonModule,\r\n        LibCardModule,\r\n        LibButtonModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibAddressModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LibButtonModule"
                        },
                        {
                            "name": "LibCardModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibAutocompleteCardModule",
            "id": "module-LibAutocompleteCardModule-00302ed90b2a562d7ae21f5199e4240b8dd99baa8165a9e9049af522beffbe693b14f3c0d91e60a78f58a603fef86a15687dd82018f793dc206b10b05fcab7ad",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/autocomplete-card/lib-autocomplete-card.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AutoCompleteModule } from 'primeng/autocomplete';\r\nimport { LibAddressModule } from '../address/lib-address.module';\r\nimport { AutocompleteCardComponent } from './components/autocomplete-card.component';\r\n\r\n\r\nconst primeComponents = [\r\n    AutoCompleteModule,\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n    AutocompleteCardComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        LibAddressModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibAutocompleteCardModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LibAddressModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibAutocompleteModule",
            "id": "module-LibAutocompleteModule-6925f06b1fb4b6b6a1dab33011a5c8ce7eaff6b16c373f933641dca11facfde9f17e8201f72dbcff268f435fd44e7cacb7de30505d4b18abe6c3ea31fca45364",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/autocomplete/lib-autocomplete.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AutoCompleteModule } from 'primeng/autocomplete';\r\nimport { AutocompleteComponent } from './components/autocomplete.component';\r\n\r\n\r\n\r\nconst primeComponents = [\r\n    AutoCompleteModule,\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n    AutocompleteComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibAutocompleteModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibBadgeModule",
            "id": "module-LibBadgeModule-dcbb155096846cf05f472daa5df8958a66f3e6b801825d3a971444dcf430b45af5644ad5e3f0ee613a8d0ad25bb70c366617f447ef68d1e5762ddef0e018c295",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/badge/lib-badge.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BadgeModule } from 'primeng/badge';\r\nimport { BadgeComponent } from './components/badge.component';\r\n\r\nconst primeComponents = [\r\n  BadgeModule\r\n];\r\n\r\nconst exportComponent = [\r\n  BadgeComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...exportComponent\r\n  ],\r\n  imports: [\r\n    ...primeComponents,\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    ...exportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ...exportComponent\r\n  ]\r\n})\r\n\r\nexport class LibBadgeModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibBreadcrumbModule",
            "id": "module-LibBreadcrumbModule-1f071c4754984d4b9b0ab22eb75c904816dda8ed82bfbdc2243cdd21181a0ed0f1d8c036acd2f6e29e97c1320b51a2f6c62dd4aca837725c4ba63cef88ca873e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/breadcrumb/lib-breadcrumb.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n// import { BreadcrumbModule } from 'primeng/breadcrumb';\r\nimport { BreadcrumbComponent } from './components/breadcrumb.component';\r\nimport { BreadcrumbItemDirective } from './directives/breadcrumb.directive';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n/* const primeComponents = [\r\n    BreadcrumbModule\r\n]; */\r\n\r\nconst exportComponent = [\r\n    BreadcrumbComponent,\r\n    BreadcrumbItemDirective\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        // ...primeComponents,\r\n        CommonModule,\r\n        RouterModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibBreadcrumbModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibButtonModule",
            "id": "module-LibButtonModule-8c019e7368b98b911f397273f58ddd7a984972e18c6719bd5fa2663420ffb95faea5a016e3e8fc10211392e5ad7b0f9b8e4118832bce9b9f07c59ce6c23cd247",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/button/lib-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { ButtonComponent } from './components/button.component';\r\n\r\nconst primeComponents = [\r\n  ButtonModule\r\n];\r\n\r\nconst exportComponent = [\r\n  ButtonComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...exportComponent\r\n  ],\r\n  imports: [\r\n    ...primeComponents\r\n  ],\r\n  exports: [\r\n    ...exportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ...exportComponent\r\n  ]\r\n})\r\nexport class LibButtonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibCalendarModule",
            "id": "module-LibCalendarModule-dc5e38cd44c01b1b4384f64a54e93e8431369fc03b215bd0fdd5b08818abb55f7be2462f0698dcc6f7517acce23c8b29afa285ac1cb7dc8dfd6280d6e6a5d9b3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/calendar/lib-calendar.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule, DatePipe } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CalendarModule } from 'primeng/calendar';\r\nimport { CalendarComponent } from './components/calendar.component';\r\n\r\n\r\nconst primeComponents = [\r\n    CalendarModule,\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n    CalendarComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ],\r\n    providers: [DatePipe]\r\n})\r\n\r\nexport class LibCalendarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibCardModule",
            "id": "module-LibCardModule-c53f4cf95aea65fc4a78c776e6f8aa34731a6b84a75681f9a2bfd0ee5422b5fa34e6d1caf514c5de7770135a9f556887113a84519be58dea66c294f5c31304a2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/card/lib-card.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CardModule } from 'primeng/card';\r\nimport { CardComponent } from './components/card.component';\r\n\r\nconst primeComponents = [\r\n  CardModule\r\n];\r\n\r\nconst exportComponent = [\r\n  CardComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...exportComponent\r\n  ],\r\n  imports: [\r\n    ...primeComponents\r\n  ],\r\n  exports: [\r\n    ...exportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ...exportComponent\r\n  ]\r\n})\r\nexport class LibCardModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibCheckboxModule",
            "id": "module-LibCheckboxModule-1b5e1c1a84e999ab07f675b874b1a2b60a26162cc79c87894eab7e7264947bb8c04ba5cb9fd6f71e344c5b5c6bc833690d9d28d8cda4d12d38a00bb14937be01",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/checkbox/lib-checkbox.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { CheckboxButtonComponent } from './components/checkbox-button.component';\r\n\r\n\r\n\r\nconst primeComponents = [\r\n    CheckboxModule,\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n    CheckboxButtonComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibCheckboxModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibChipModule",
            "id": "module-LibChipModule-b66898a7f9141f7541bfda57c843079e27794ae747fc70850f5c8edc343d3e6a72f0f05ef31f266e32c6bcd82a3c8df2e167747dc7c8818e5c91a9107059b06b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/chip/lib-chip.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ChipModule } from 'primeng/chip';\r\nimport { ChipComponent } from './components/chip.component';\r\n\r\nconst primeComponents = [\r\n    ChipModule\r\n];\r\n\r\nconst exportComponent = [\r\n    ChipComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibChipModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibChooseFileModule",
            "id": "module-LibChooseFileModule-9f61ec4a2f605b0e101a43b9de383d1e84623e128ce1efd8367eddb68cfc5756770026b56d454fe33a4337c116908bbca7248ca53a31da63be860d9e63e5f88a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/choose-file/choose-file.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FileUploadModule } from 'primeng/fileupload';\r\nimport { ChooseFileComponent } from './components/choose-file.component';\r\nimport { LibInputModule } from '../input/lib-input.module';\r\n\r\n\r\nconst primeComponents = [\r\n    FileUploadModule,\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n    ChooseFileComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule,\r\n        LibInputModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\n\r\n\r\nexport class LibChooseFileModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LibInputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibCircleStatusModule",
            "id": "module-LibCircleStatusModule-8308a2ff9057cd7720a571e1303072a0e75e5b621d08eadcfbc058c747dba6bd85663e8da41b9e5a0c3707bccb7804fb5954502ec33b267e088fd088ecf90f48",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/circle-status/lib-circle-status.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CircleStatusComponent } from './components/circle-status.component';\r\n\r\n\r\n\r\n/* const primeComponents = [\r\n    \r\n\r\n]; */\r\n\r\nconst exportComponent = [\r\n    CircleStatusComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        //...primeComponents,\r\n        CommonModule,\r\n    ],\r\n    exports: [\r\n        ...exportComponent\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibCircleStatusModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibDialogModule",
            "id": "module-LibDialogModule-d5f637ef1de1800afffd2e30f3bfd43a3e6a82010bdafed69c51cb6ea046a0df90979f0479126d31aef9f29d1ceab883df509862346b172e807b59ca6760fc30",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/dialog/lib-dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { DialogComponent } from './components/dialog.component';\r\n\r\n\r\nconst primeComponents = [\r\n    DialogModule\r\n];\r\n\r\nconst exportComponent = [\r\n    DialogComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\n\r\nexport class LibDialogModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibDropdownModule",
            "id": "module-LibDropdownModule-23b9a4f4822d1e39d959ce34e41f2da5e5cb8cfe4d2a922860d7f2337012c6c9aad772116f8c224428b821ff23aad85ba44019dbac25497cf9519dea5fdc9570",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/dropdown/lib-dropdown.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { DropdownComponent } from './components/dropdown.component';\r\n\r\n\r\nconst primeComponents = [\r\n  DropdownModule\r\n];\r\n\r\nconst exportComponent = [\r\n  DropdownComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...exportComponent\r\n  ],\r\n  imports: [\r\n    ...primeComponents,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  exports: [\r\n    ...exportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ...exportComponent\r\n  ]\r\n})\r\n\r\nexport class LibDropdownModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibErrorInlineModule",
            "id": "module-LibErrorInlineModule-a3d186bac3dcc44a6c16600743626df4bec39604bc385d386f99d8ada8702cb672241a5e5267b6805af15a20f02eedbef324359ba1b4365076497e4b3e57b252",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/error-inline/lib-error-inline.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ErrorInlineComponent } from './components/error-inline.component';\r\n\r\n\r\nconst primeComponents = [\r\n    CommonModule\r\n];\r\n\r\nconst exportComponent = [\r\n    ErrorInlineComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\n\r\nexport class LibErrorInlineModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibFiltersModule",
            "id": "module-LibFiltersModule-1285605897f10b452c56d9fc97b7262ae6c15239285e4ac44f43594ceaed8cc867e575e5ddee7d0cd7894dadb54a42c1ead2e66806443c8bbd60ee88ee223b4f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/micro-organismi/filters/lib-filters.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { LibChipModule } from \"../../atoms/chip/lib-chip.module\";\r\nimport { FiltersComponent } from \"./components/filters/filters.component\";\r\nimport { LibTreeSelectModule } from \"../../atoms/tree-select/lib-tree-select.module\";\r\nimport { LibCalendarModule } from \"../../atoms/calendar/lib-calendar.module\";\r\nimport { FiltersChipsComponent } from './components/filters-chips/filters-chips.component';\r\nimport { OnlyFiltersComponent } from './components/only-filters/only-filters.component';\r\nimport { TreeSelectModule } from \"primeng/treeselect\";\r\nimport { LibDropdownModule } from \"../../atoms/dropdown/lib-dropdown.module\";\r\nimport { LibInputModule } from \"../../atoms/input/lib-input.module\";\r\nimport { LibButtonModule } from \"../../atoms/button/lib-button.module\";\r\nimport { LibDialogModule } from \"../../atoms/dialog/lib-dialog.module\";\r\nimport { LibTreemenuModule } from \"../../atoms/treemenu/lib-treemenu.module\";\r\n\r\nconst primeComponents = [\r\n    LibTreeSelectModule,\r\n    LibChipModule\r\n];\r\n\r\nconst exportComponent = [\r\n    FiltersComponent,\r\n    FiltersChipsComponent,\r\n    OnlyFiltersComponent,\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent,\r\n\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        LibTreeSelectModule,\r\n        LibCalendarModule,\r\n        TreeSelectModule,\r\n        LibDropdownModule,\r\n        LibInputModule,\r\n        LibButtonModule,\r\n        LibDialogModule,\r\n        LibTreemenuModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibFiltersModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LibButtonModule"
                        },
                        {
                            "name": "LibCalendarModule"
                        },
                        {
                            "name": "LibDialogModule"
                        },
                        {
                            "name": "LibDropdownModule"
                        },
                        {
                            "name": "LibInputModule"
                        },
                        {
                            "name": "LibTreeSelectModule"
                        },
                        {
                            "name": "LibTreemenuModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibIconCircleModule",
            "id": "module-LibIconCircleModule-7a64c1fb026c23d0b123f6634e67a876553891c21bf6b874cdee01760ae6fadec864baceb3125212abdb7665910010d50d75785c4738503398040fb30d9c83d5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/icon-circle/lib-icon-circle.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IconCircleComponent } from './components/icon-circle.component';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\n\r\n\r\nconst primeComponents = [\r\n    TooltipModule\r\n];\r\n\r\nconst exportComponent = [\r\n    IconCircleComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\n\r\nexport class LibIconCircleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibInplaceModule",
            "id": "module-LibInplaceModule-fe5839fcba0bbddcd93f29d12b3116a3bb251ac685b85df794661fa5ec7664832bd3257e9b74e26fd281acfbf23b6bd2348b17a590f8c801eddf87bb702ea1d9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/inplace/lib-inplace.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InplaceModule } from 'primeng/inplace';\r\nimport { InplaceComponent } from './components/inplace.component';\r\n\r\nconst primeComponents = [\r\n  InplaceModule\r\n];\r\n\r\nconst exportComponent = [\r\n  InplaceComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...exportComponent\r\n  ],\r\n  imports: [\r\n    ...primeComponents,\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    ...exportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ...exportComponent\r\n  ]\r\n})\r\n\r\nexport class LibInplaceModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibInputModule",
            "id": "module-LibInputModule-38b95eb1e2f50bfeccad2714385f2a2929f2a4d2d3853a9ae186ce68cb00421226bc990cfe1230ab4a13d504797b69f9c6dec2331b8bfb20f383accfb44a2e7e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/input/lib-input.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { InputNumberModule } from 'primeng/inputnumber';\r\nimport { InputComponent } from './components/input.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n\r\nconst primeComponents = [\r\n  InputTextModule,\r\n  InputNumberModule\r\n];\r\n\r\nconst exportComponent = [\r\n  InputComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...exportComponent\r\n  ],\r\n  imports: [\r\n    ...primeComponents,\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  exports: [\r\n    ...exportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ...exportComponent\r\n  ]\r\n})\r\n\r\nexport class LibInputModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibListboxModule",
            "id": "module-LibListboxModule-2d0135be9db988b27b58c6cfa9c3af0141e160f057d9d9f448f4e899cfd0d1559cef198c0b2ebfa17b6368137f374d2098d508218d7b99bb758985003d418ae1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/listbox/lib-listbox.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ListboxModule } from 'primeng/listbox';\r\nimport { ListboxComponent } from './components/listbox.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nconst primeComponents = [\r\n  ListboxModule\r\n];\r\n\r\nconst exportComponent = [\r\n  ListboxComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...exportComponent\r\n  ],\r\n  imports: [\r\n    ...primeComponents,\r\n    FormsModule,\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    ...exportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ...exportComponent\r\n  ]\r\n})\r\n\r\nexport class LibListboxModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibLoaderModule",
            "id": "module-LibLoaderModule-716a9a69bf14dded5595012912b219f3e050a3768fdfb6e6219e34896ff41ed56f85874d02c03b84920041ffa1a84dd35a0296440efdfdbfc47578e64fad803a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/loader/lib-loader.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoaderComponent } from './components/loader.component';\r\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\r\n\r\nconst primeComponents = [\r\n    ProgressSpinnerModule\r\n];\r\n\r\nconst exportComponent = [\r\n    LoaderComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\n\r\nexport class LibLoaderModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibMessagesModule",
            "id": "module-LibMessagesModule-4ebb50b045396b606b341ae8251f17a632ba9f8f6fcc36abea590fe4bf90f2efa59a7a08e38247dbcda629191c17842b3c939cd1c39e80ce6810f53102d6e4ae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/molecole/messages/lib-messages.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ToastComponent } from './components/toast/toast.component';\r\nimport { MessageComponent } from './components/message/message.component';\r\nimport { ToastModule } from 'primeng/toast';\r\nimport { MessageModule } from 'primeng/message';\r\nimport { MessagesModule } from 'primeng/messages';\r\nimport { MessagesComponent } from './components/messages/messages.component';\r\n\r\n\r\nconst primeComponents = [\r\n    ToastModule,\r\n    MessageModule,\r\n    MessagesModule\r\n];\r\n\r\nconst exportComponent = [\r\n    ToastComponent,\r\n    MessagesComponent,\r\n    MessageComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\n\r\nexport class LibMessagesModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibMultiSelectModule",
            "id": "module-LibMultiSelectModule-1c9f8ae8632db73b14d142b6e875a63345b1708d94835ac9cb523ab8390326ccd33cf33de840eb91fa65f256c3e52ce96d39f7a2e9b4f8a6a65c7210962644df",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/multi-select/lib-multi-select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MultiSelectModule } from 'primeng/multiselect';\r\nimport { MultiSelectComponent } from './components/multi-select.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nconst primeComponents = [\r\n    MultiSelectModule\r\n];\r\n\r\nconst exportComponent = [\r\n    MultiSelectComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibMultiSelectModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibPaginatorModule",
            "id": "module-LibPaginatorModule-ff0208e61a305614d40362bc1af94dd3f4427754592a25c687748413800a7eb0526b1fc887a53a132608881dccac24a26c2590f4b3b0f641568ff576c3b9f6ab",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/paginator/lib-paginator.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {PaginatorComponent} from \"./components/paginator.component\";\r\nimport {PaginatorModule} from \"primeng/paginator\";\r\n\r\n\r\n\r\nconst primeComponents = [\r\n\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n  PaginatorComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent,\r\n\r\n    ],\r\n  imports: [\r\n    //...primeComponents,\r\n    CommonModule,\r\n    PaginatorModule\r\n  ],\r\n    exports: [\r\n        ...exportComponent\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibPaginatorModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibPickListModule",
            "id": "module-LibPickListModule-865156ab10b17bdadc82f30015b2ac53c701713aa052ec61b5f02fd866d011a8b883b5196c477104e74ee3165fc2df700feab1b96ce1c9443676458c000e8c45",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/pick-list/lib-pick-list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PickListModule } from 'primeng/picklist';\r\nimport { PickListComponent } from './components/pick-list.component';\r\n\r\nconst primeComponents = [\r\n    PickListModule\r\n];\r\n\r\nconst exportComponent = [\r\n    PickListComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibPickListModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibProgressBarModule",
            "id": "module-LibProgressBarModule-d9c56cebf22856f4155b7576e774fa9f9fecc5f6efb020b277caedbe2c0676d19818e04910d07d2e8f6f24257dc1cb415c719dca10d1db6757a65a5ac2c7e12d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/progress-bar/lib-progress-bar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProgressBarModule } from 'primeng/progressbar';\r\nimport { ProgressBarComponent } from './components/progress-bar.component';\r\n\r\nconst primeComponents = [\r\n    ProgressBarModule\r\n];\r\n\r\nconst exportComponent = [\r\n    ProgressBarComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\n\r\nexport class LibProgressBarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibRadioButtonModule",
            "id": "module-LibRadioButtonModule-993fdb0aac6e84190c655816b0a88c9e2286f4476f7f1cb6e93da390df50e15429b6e2b72aefcaa355d9bb6c9918e8daf9e25bbe3a3bba987fcb34521740b55b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/radio-button/lib-radio-button.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RadioButtonModule } from 'primeng/radiobutton'\r\nimport { RadioButtonComponent } from './components/radio-button.component';\r\n\r\nconst primeComponents = [\r\n  RadioButtonModule,\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n  RadioButtonComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...exportComponent\r\n  ],\r\n  imports: [\r\n    ...primeComponents,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule\r\n  ],\r\n  exports: [\r\n    ...exportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ...exportComponent\r\n  ]\r\n})\r\n\r\nexport class LibRadioButtonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibRadioTileModule",
            "id": "module-LibRadioTileModule-4349b14a567975639788939d0506cbd706583db840b0132322000742df694f40f0a24c3b5d005b700a99676147dbeea26b1c0edaaeb28f919623f20bb2c85206",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/molecole/radio-tile/lib-radio-tile.module.ts",
            "methods": [],
            "sourceCode": "import { RadioTileComponent } from './components/radio-tile.component';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { LibCardModule } from '../../atoms/card/lib-card.module';\r\n\r\nconst primeComponents = [\r\n    LibCardModule,\r\n    RadioButtonModule,\r\n    ButtonModule\r\n];\r\n\r\nconst exportComponent = [\r\n    RadioTileComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibRadioTileModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibStepperModule",
            "id": "module-LibStepperModule-f0b070c33e893aecb73ee3a944da2fd4df483c3f4ff00e6cbeb5d78f57dbc72102622d78f260bbd307af72db2806b553c1791b35d88852e0bafd5581d60ea1eb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/stepper/lib-stepper.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StepperComponent } from './components/stepper.component';\nimport { StepsModule } from 'primeng/steps';\nimport { LibButtonModule } from '../button/lib-button.module';\nimport { CtaBarModule } from '../../molecole/cta-bar/cta-bar.module';\n\nconst primeComponents = [\n  StepsModule,\n\n];\n\nconst exportComponent = [\n  StepperComponent\n];\n\n@NgModule({\n  declarations: [\n    ...exportComponent\n  ],\n  imports: [\n    ...primeComponents,\n    CommonModule,\n    LibButtonModule,\n    CtaBarModule\n  ],\n  exports: [\n    ...exportComponent,\n\n  ],\n  entryComponents: [\n    ...exportComponent\n  ]\n})\n\n\nexport class LibStepperModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CtaBarModule"
                        },
                        {
                            "name": "LibButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibTableModule",
            "id": "module-LibTableModule-fc35709775ff31b28b88270d459a4a9f2f1f689a767695d190ab1fee69cd34a1604adfd0afd51b10db10cab15d863f6a4e0f18dc50cebadfc8392e31f0d9cdbc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/molecole/table/lib-table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule, registerLocaleData } from '@angular/common';\r\nimport { TableModule } from 'primeng/table';\r\nimport { TableComponent } from './components/table/table.component';\r\nimport { ActionsTableComponent } from './components/actions-table/actions-table.component';\r\nimport { PaginatorModule } from 'primeng/paginator';\r\nimport { LibButtonModule } from '../../atoms/button/lib-button.module';\r\nimport { TieredMenuModule } from 'primeng/tieredmenu';\r\nimport { LibTableService } from './services/lib-table.service';\r\nimport { LibCheckboxModule } from '../../atoms/checkbox/lib-checkbox.module';\r\nimport localeIt from '@angular/common/locales/it';\r\nimport {MultiSelectModule} from \"primeng/multiselect\";\r\n\r\nregisterLocaleData(localeIt);\r\n\r\nconst primeComponents = [\r\n  TableModule,\r\n  PaginatorModule\r\n];\r\n\r\nconst exportComponent = [\r\n  ActionsTableComponent,\r\n  TableComponent,\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...exportComponent,\r\n  ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule,\r\n        LibButtonModule,\r\n        LibCheckboxModule,\r\n        TieredMenuModule,\r\n        MultiSelectModule\r\n    ],\r\n  exports: [\r\n    ...exportComponent,\r\n    TableModule\r\n  ],\r\n  entryComponents: [\r\n    ...exportComponent\r\n  ],\r\n  providers: [LibTableService]\r\n})\r\n\r\nexport class LibTableModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LibTableService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LibButtonModule"
                        },
                        {
                            "name": "LibCheckboxModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibTabsModule",
            "id": "module-LibTabsModule-d58e0327414c445639f34ff8f669cac21ec3676d046750cb576316f484810e993cc0b400d4dffa00a00394311608ab54e75592a20e37bcc9b8485a5ce6766c52",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/tabs/lib-tabs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TabViewModule } from 'primeng/tabview';\r\nimport { TabsComponent } from './components/tabs.component';\r\n\r\n\r\n\r\nconst primeComponents = [\r\n    TabViewModule\r\n];\r\n\r\nconst exportComponent = [\r\n    TabsComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibTabsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibTagModule",
            "id": "module-LibTagModule-4a96b5a0c0c28c17e44a1ceb451405ce1105920f8c718e58b8dbd9092fa765c126e5a14b0f6cbec8ae260ae89e2dcff3bc4d9f807c744133f5c81f2374f38435",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/tag/lib-tag.module.ts",
            "methods": [],
            "sourceCode": "import { TagModule } from 'primeng/tag';\r\nimport { NgModule } from '@angular/core';\r\nimport { TagComponent } from './components/tag.component';\r\n\r\nconst primeComponents = [\r\n  TagModule\r\n];\r\n\r\nconst exportComponent = [\r\n  TagComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...exportComponent\r\n  ],\r\n  imports: [\r\n    ...primeComponents\r\n  ],\r\n  exports: [\r\n    ...exportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ...exportComponent\r\n  ]\r\n})\r\nexport class LibTagModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibTextareaModule",
            "id": "module-LibTextareaModule-ad39f0d58b9c8aac20c7ce5f5c007b422bed64d7adbcf00db826d595c86fa7aae01a7ae31dd21bc32b3cba48b15823c73820883d53a8de21e0d9f70884c9ca10",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/textarea/lib-textarea.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { InputTextareaModule } from 'primeng/inputtextarea'\r\nimport { TextareaComponent } from './components/textarea.component';\r\n\r\nconst primeComponents = [\r\n  InputTextareaModule,\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n  TextareaComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...exportComponent\r\n  ],\r\n  imports: [\r\n    ...primeComponents,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule\r\n  ],\r\n  exports: [\r\n    ...exportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ...exportComponent\r\n  ]\r\n})\r\n\r\nexport class LibTextareaModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibTimelineModule",
            "id": "module-LibTimelineModule-49c9e7342706cd88c60e8a2c846160f10b70b81a7ff30907987a05d76deefad5ba56ad93c764d6a7ef9a1933129f877faee0dbf1a1f1ccbb59d7ed94a0b11a48",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/timeline/lib-timeline.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TimelineComponent } from './components/timeline.component';\r\nimport { TimelineModule } from 'primeng/timeline';\r\n\r\nconst primeComponents = [\r\n    TimelineModule,\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n    TimelineComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        ...primeComponents,\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class LibTimelineModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibTreemenuModule",
            "id": "module-LibTreemenuModule-2a4896c7daf94e8e2c0be6284cbc691967e3e2a8ae0202f7d5c13bdb5d702bf7c8a988effecf03b7d23ec0201fa2cc431f03e07c268638a632bad6e505a6ae8a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/treemenu/lib-treemenu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreemenuComponent } from './components/treemenu.component';\r\nimport { TreeModule } from 'primeng/tree';\r\nimport { TreeDragDropService } from 'primeng/api';\r\n\r\n\r\nconst primeComponents = [\r\n    TreeModule,\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n    TreemenuComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        ...primeComponents,\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ],\r\n    providers: [TreeDragDropService]\r\n})\r\nexport class LibTreemenuModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibTreeSelectModule",
            "id": "module-LibTreeSelectModule-aa5ab297e019bb9498159c5ac85713abfc29266c416f147a79b9b201ea18847c9eb97509230e37893817d35c9d58664119412446e03960bd63996dbd0e8f0e05",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/tree-select/lib-tree-select.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {TreeSelectModule} from \"primeng/treeselect\";\r\nimport { TreeSelectComponent} from \"./components/tree-select.component\";\r\n\r\nconst primeComponents = [\r\n  TreeSelectModule,\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n  TreeSelectComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...exportComponent\r\n  ],\r\n  imports: [\r\n    ...primeComponents,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule\r\n  ],\r\n  exports: [\r\n    ...exportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ...exportComponent\r\n  ]\r\n})\r\n\r\nexport class LibTreeSelectModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibUploadFileModule",
            "id": "module-LibUploadFileModule-234b0ed30087106efc00f9f0db92e5bd9949b1d28874ede989ad5139285201f5070ad190989bb033a3b28598bc7a60c74c10c5734237ab209aa7feb6dfdfbb52",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/molecole/upload-file/lib-upload-file.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UploadFileComponent } from './components/upload-file.component';\r\nimport { LibProgressBarModule } from '../../atoms/progress-bar/lib-progress-bar.module';\r\n\r\nconst exportComponent = [\r\n   UploadFileComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent,\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        LibProgressBarModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\n\r\nexport class LibUploadFileModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LibProgressBarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PipesModule",
            "id": "module-PipesModule-160cf2b93a01df1f481432d52d3955e2fc6cbe15e0d3f8ac68f9881534b989e358d363d34f1f8c46891e5cec5fb70e52340d7845e89abb157746415804ed02b2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/pipes/pipes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BytePipe } from './byte.pipe';\r\nimport { SafePipe } from './safe.pipe';\r\n\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        BytePipe,\r\n        SafePipe\r\n    ],\r\n    imports: [\r\n    ],\r\n    exports: [\r\n        BytePipe,\r\n        SafePipe\r\n    ],\r\n    providers: []\r\n})\r\n\r\nexport class PipesModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BytePipe"
                        },
                        {
                            "name": "SafePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BytePipe"
                        },
                        {
                            "name": "SafePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SidebarModule",
            "id": "module-SidebarModule-f7ec5fdd8cca33b2d6de3408304a2c7cbd0900f2c18a7c1c197d5e0dc5cff78b8ddcb8c08fc2559e379e9218ab6f6516b370404b5e35c02539c73ba77b117ed1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/sidebar/sidebar.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { SidebarComponent } from './components/sidebar.component';\r\nimport { PanelMenuModule } from 'primeng/panelmenu';\r\n\r\nconst primeComponents = [\r\n    PanelMenuModule,\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n    SidebarComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\n\r\n\r\nexport class SidebarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SwitchModule",
            "id": "module-SwitchModule-dad7de3a1d1df640b2f459cc73d4554ef2bdf24d1a592a40091e2112f9a3393bfea449f915153fa72bdf6676b69430594b43cfce7294289d09dd34fa478784b4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-system/src/lib/atoms/switch/switch.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InputSwitchModule } from 'primeng/inputswitch';\r\nimport { SwitchComponent } from './components/switch.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\nconst primeComponents = [\r\n    InputSwitchModule,\r\n\r\n];\r\n\r\nconst exportComponent = [\r\n    SwitchComponent\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ...exportComponent\r\n    ],\r\n    imports: [\r\n        ...primeComponents,\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        FormsModule\r\n    ],\r\n    exports: [\r\n        ...exportComponent,\r\n\r\n    ],\r\n    entryComponents: [\r\n        ...exportComponent\r\n    ]\r\n})\r\nexport class SwitchModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ALERTS_GENERAL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/messages/models/messages.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Messages",
                "defaultValue": "{\r\n    success: { severity: 'success', summary: 'Titolo success', detail: 'Contenuto del messaggio success qui.' },\r\n    info: { severity: 'info', summary: 'Titolo info', detail: 'Contenuto del messaggio info qui.' },\r\n    error: { severity: 'error', summary: 'Titolo error', detail: 'Contenuto del messaggio error qui.' },\r\n    warn: { severity: 'warn', summary: 'Titolo warn', detail: 'Contenuto del messaggio warn qui.' },\r\n}"
            },
            {
                "name": "ALIAS_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'@'"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/accordion/components/accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    multiple: false,\r\n    index: 0,\r\n    sections: [{header: 'prova1'}, {header: 'prova2'}],\r\n    //@ts-ignore\r\n    //activeIndexChange: (event: any) => { this.index = event.args }\r\n  }\r\n}"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/address/components/address.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    address: {code: 0, content: 'Via Roma, 22 - 71122 Foggia (FG)', name: 'Casa mia'},\r\n    //modify: true,\r\n    //@ts-ignore\r\n    onClick: () => { console.log('Modify') }\r\n  },\r\n}"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/autocomplete/components/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    valueAutocomplete: [''],\r\n    placeholder: '',\r\n    value: '',\r\n    label: 'cc',\r\n    icon: '',\r\n    disabled: false,\r\n    showClear: false,\r\n    field: '',\r\n    minLength: 3,\r\n    //@ts-ignore\r\n    onChange: (event: any) => { console.log(event) }\r\n  }\r\n}"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/badge/components/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    menuBadge: '0'\r\n  },\r\n}"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/calendar/components/calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    value: null,\r\n    label: '',\r\n    disabled: false,\r\n    inlineCal: false,\r\n    showIcon: true,\r\n    dropdownMode: false,\r\n    showButtonBar: false,\r\n    selectionType: 'single',\r\n    placeholder: 'Data',\r\n    minDate: null,\r\n    maxDate: null,\r\n    defaultDateFormat: 'dd-mm-yy',\r\n    highlightedDays: [],\r\n    firstDayOfWeek: null,\r\n    disabledDays: [],\r\n    timeOnly: false,\r\n    dataType: 'date',\r\n    //@ts-ignore\r\n    onSelect: (event: any) => { console.log(event) }\r\n  }\r\n}"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/card/components/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    cHeader: 'Prova',\r\n    cSubHeader: 'Prova sottotitolo',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: ` \r\n  <lib-card [cHeader]=\"\" [cSubHeader]=\"\" [cStyle]=\"style\" [cStyleClass]=\"styleClass\">     \r\n      <div cTitleTemplate>${args.cHeader}</div>\r\n      <div cSubtitleTemplate>${args.cSubHeader}</div>\r\n      <div cContentTemplate>Questo è il contenuto di una card</div>\r\n      <div cFooterTemplate>Questo è il footer di una card</div>\r\n  </lib-card>\r\n `})\r\n}"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/checkbox/components/checkbox-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n\r\n  },\r\n}"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/chip/components/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    \r\n  },\r\n}"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/choose-file/components/choose-file.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n  },\r\n}"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/circle-status/components/circle-status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n  },\r\n}"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/accordion/lib-accordion.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  AccordionComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/address/lib-address.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    AddressComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/autocomplete/lib-autocomplete.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    AutocompleteComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/autocomplete-card/lib-autocomplete-card.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    AutocompleteCardComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/badge/lib-badge.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  BadgeComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/breadcrumb/lib-breadcrumb.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    BreadcrumbComponent,\r\n    BreadcrumbItemDirective\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/button/lib-button.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  ButtonComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/calendar/lib-calendar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    CalendarComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/card/lib-card.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  CardComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/checkbox/lib-checkbox.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    CheckboxButtonComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/chip/lib-chip.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    ChipComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/choose-file/choose-file.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    ChooseFileComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/circle-status/lib-circle-status.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    CircleStatusComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/dialog/lib-dialog.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    DialogComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/dropdown/lib-dropdown.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  DropdownComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/error-inline/lib-error-inline.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    ErrorInlineComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/icon-circle/lib-icon-circle.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    IconCircleComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/inplace/lib-inplace.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  InplaceComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/input/lib-input.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  InputComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/input-form/input-form.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    InputFormComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/listbox/lib-listbox.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  ListboxComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/loader/lib-loader.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    LoaderComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/multi-select/lib-multi-select.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    MultiSelectComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/paginator/lib-paginator.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  PaginatorComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/pick-list/lib-pick-list.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    PickListComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/progress-bar/lib-progress-bar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    ProgressBarComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/radio-button/lib-radio-button.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  RadioButtonComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/sidebar/sidebar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    SidebarComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/stepper/lib-stepper.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  StepperComponent\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/switch/switch.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    SwitchComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/tabs/lib-tabs.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    TabsComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/tag/lib-tag.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  TagComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/textarea/lib-textarea.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  TextareaComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/timeline/lib-timeline.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    TimelineComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/tree-select/lib-tree-select.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  TreeSelectComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/treemenu/lib-treemenu.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    TreemenuComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/micro-organismi/filters/lib-filters.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    FiltersComponent,\r\n    FiltersChipsComponent,\r\n    OnlyFiltersComponent,\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/cta-bar/cta-bar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    CtaBarComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/file/file.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    FileComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/file-status/file-status.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    FileStatusComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/header-items/header-items.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  CartComponent,\r\n  HeaderActionsComponent,\r\n  LogoComponent,\r\n  SearchBarComponent,\r\n  LanguageSelectorComponent,\r\n  HeaderNotificationsComponent,\r\n  HeaderMenuUserComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/header-menu/header-menu.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    HeaderMenuComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/messages/lib-messages.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    ToastComponent,\r\n    MessagesComponent,\r\n    MessageComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/radio-tile/lib-radio-tile.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    RadioTileComponent\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/table/lib-table.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  ActionsTableComponent,\r\n  TableComponent,\r\n]"
            },
            {
                "name": "exportComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/upload-file/lib-upload-file.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n   UploadFileComponent\r\n]"
            },
            {
                "name": "isNotEmpty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(obj: any): boolean => {\r\n    return obj && Object.keys(obj).length > 0;\r\n}"
            },
            {
                "name": "LinkButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    type: 'link',\r\n    size: '',\r\n    label: 'Prova',\r\n    icon: '',\r\n    disabled: false,\r\n    //@ts-ignore\r\n    onClick: (event: boolean) => { console.log(event) }\r\n  }\r\n}"
            },
            {
                "name": "MESSAGES_GENERAL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/messages/models/messages.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Messages",
                "defaultValue": "{\r\n    success: { severity: 'success', summary: 'Titolo success', detail: 'Contenuto del messaggio success qui.' },\r\n    info: { severity: 'info', summary: 'Titolo info', detail: 'Contenuto del messaggio info qui.' },\r\n    error: { severity: 'error', summary: 'Titolo error', detail: 'Contenuto del messaggio error qui.' },\r\n    warn: { severity: 'warn', summary: 'Titolo warn', detail: 'Contenuto del messaggio warn qui.' },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/accordion/components/accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AccordionComponent>",
                "defaultValue": "{\r\n  title: 'Components/Atomi/Accordion',\r\n  // The component related to the Stories\r\n  component: AccordionComponent,\r\n  decorators: [\r\n    // The necessary modules for the component to work on Storybook\r\n    moduleMetadata({\r\n      imports: [CommonModule, LibAccordionModule, BrowserAnimationsModule],\r\n    }),\r\n  ]\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/address/components/address.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AddressComponent>",
                "defaultValue": "{\r\n  title: 'Components/Atomi/Address',\r\n  // The component related to the Stories\r\n  component: AddressComponent,\r\n  decorators: [\r\n    // The necessary modules for the component to work on Storybook\r\n    moduleMetadata({\r\n      imports: [CommonModule, LibAddressModule],\r\n    }),\r\n  ]\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/autocomplete/components/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AutocompleteComponent>",
                "defaultValue": "{\r\n  title: 'Components/Atomi/Autocomplete',\r\n  // The component related to the Stories\r\n  component: AutocompleteComponent,\r\n  decorators: [\r\n    // The necessary modules for the component to work on Storybook\r\n    moduleMetadata({\r\n      imports: [CommonModule, LibAutocompleteModule, BrowserAnimationsModule],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/badge/components/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<BadgeComponent>",
                "defaultValue": "{\r\n  title: 'Components/Atomi/Badge',\r\n    // The component related to the Stories\r\n    component: BadgeComponent,\r\n    decorators: [\r\n        // The necessary modules for the component to work on Storybook\r\n        moduleMetadata({\r\n             imports: [ CommonModule, LibBadgeModule],\r\n        }),\r\n    ]\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\r\n  title: 'Components/Atomi/Button',\r\n  // The component related to the Stories\r\n  component: ButtonComponent,\r\n  decorators: [\r\n    // The necessary modules for the component to work on Storybook\r\n    moduleMetadata({\r\n      declarations: [ButtonComponent],\r\n      imports: [CommonModule, ButtonModule],\r\n    }),\r\n  ],\r\n  argTypes: {\r\n    type: {\r\n      control: {\r\n        type: 'select',\r\n      },\r\n      options: ['', 'secondary', 'secondary-rounded', 'rounded', 'link', 'link-icon'],\r\n    },\r\n    size: {\r\n      control: {\r\n        type: 'select',\r\n      },\r\n      options: ['', 'small', 'big'],\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/calendar/components/calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CalendarComponent>",
                "defaultValue": "{\r\n  title: 'Components/Atomi/Calendar',\r\n  // The component related to the Stories\r\n  component: CalendarComponent,\r\n  decorators: [\r\n    // The necessary modules for the component to work on Storybook\r\n    moduleMetadata({\r\n      imports: [CommonModule, LibCalendarModule, BrowserAnimationsModule],\r\n    }),\r\n  ]\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/card/components/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CardComponent>",
                "defaultValue": "{\r\n  title: 'Components/Atomi/Card',\r\n  // The component related to the Stories\r\n  component: CardComponent,\r\n  decorators: [\r\n    // The necessary modules for the component to work on Storybook\r\n    moduleMetadata({\r\n      imports: [CommonModule, CardModule],\r\n    }),\r\n  ]\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/checkbox/components/checkbox-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CheckboxButtonComponent>",
                "defaultValue": "{\r\n  title: 'Components/Atomi/Checkbox',\r\n    // The component related to the Stories\r\n    component: CheckboxButtonComponent,\r\n    decorators: [\r\n        // The necessary modules for the component to work on Storybook\r\n        moduleMetadata({\r\n             imports: [ CommonModule, LibCheckboxModule],\r\n        }),\r\n    ]\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/chip/components/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ChipComponent>",
                "defaultValue": "{\r\n  title: 'Components/Atomi/Chip',\r\n    // The component related to the Stories\r\n    component: ChipComponent,\r\n    decorators: [\r\n        // The necessary modules for the component to work on Storybook\r\n        moduleMetadata({\r\n             imports: [ CommonModule, LibChipModule],\r\n        }),\r\n    ]\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/choose-file/components/choose-file.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ChooseFileComponent>",
                "defaultValue": "{\r\n  title: 'Components/Atomi/Choose file',\r\n    // The component related to the Stories\r\n    component: ChooseFileComponent,\r\n    decorators: [\r\n        // The necessary modules for the component to work on Storybook\r\n        moduleMetadata({\r\n             imports: [ CommonModule, LibChooseFileModule, HttpClientModule],\r\n        }),\r\n    ]\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/circle-status/components/circle-status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CircleStatusComponent>",
                "defaultValue": "{\r\n  title: 'Components/Atomi/Circle status',\r\n    // The component related to the Stories\r\n    component: CircleStatusComponent,\r\n    decorators: [\r\n        // The necessary modules for the component to work on Storybook\r\n        moduleMetadata({\r\n             imports: [ CommonModule, LibCircleStatusModule],\r\n        }),\r\n    ]\r\n}"
            },
            {
                "name": "PATH_PARAM",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    PREFIX: ':',\r\n    REGEX_IDENTIFIER: '/:[^/]+',\r\n    REGEX_REPLACER: '/[^/]+',\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
            },
            {
                "name": "PrimaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    type: 'primary',\r\n    size: '',\r\n    label: 'Prova',\r\n    icon: '',\r\n    disabled: false,\r\n    //@ts-ignore\r\n    onClick: (event: boolean) => { console.log(event) }\r\n  }\r\n}"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/accordion/lib-accordion.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/address/lib-address.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/autocomplete/lib-autocomplete.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    AutoCompleteModule,\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/autocomplete-card/lib-autocomplete-card.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    AutoCompleteModule,\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/badge/lib-badge.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  BadgeModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/button/lib-button.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  ButtonModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/calendar/lib-calendar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    CalendarModule,\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/card/lib-card.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  CardModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/checkbox/lib-checkbox.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    CheckboxModule,\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/chip/lib-chip.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    ChipModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/choose-file/choose-file.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    FileUploadModule,\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/dialog/lib-dialog.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    DialogModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/dropdown/lib-dropdown.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  DropdownModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/error-inline/lib-error-inline.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    CommonModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/icon-circle/lib-icon-circle.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    TooltipModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/inplace/lib-inplace.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  InplaceModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/input/lib-input.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  InputTextModule,\r\n  InputNumberModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/input-form/input-form.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    LibDropdownModule,\r\n    LibCalendarModule,\r\n    LibAutocompleteModule,\r\n    LibCheckboxModule,\r\n    LibRadioButtonModule,\r\n    LibTextareaModule,\r\n    LibInputModule,\r\n    LibErrorInlineModule,\r\n    LibChooseFileModule,\r\n    LibAutocompleteCardModule,\r\n    LibListboxModule,\r\n    LibMultiSelectModule,\r\n    LibButtonModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/listbox/lib-listbox.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  ListboxModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/loader/lib-loader.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    ProgressSpinnerModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/multi-select/lib-multi-select.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    MultiSelectModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/paginator/lib-paginator.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/pick-list/lib-pick-list.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    PickListModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/progress-bar/lib-progress-bar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    ProgressBarModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/radio-button/lib-radio-button.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  RadioButtonModule,\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/sidebar/sidebar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    PanelMenuModule,\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/stepper/lib-stepper.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  StepsModule,\n\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/switch/switch.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    InputSwitchModule,\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/tabs/lib-tabs.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    TabViewModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/tag/lib-tag.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  TagModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/textarea/lib-textarea.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  InputTextareaModule,\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/timeline/lib-timeline.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    TimelineModule,\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/tree-select/lib-tree-select.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  TreeSelectModule,\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/treemenu/lib-treemenu.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    TreeModule,\r\n\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/micro-organismi/filters/lib-filters.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    LibTreeSelectModule,\r\n    LibChipModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/cta-bar/cta-bar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    ButtonModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/header-items/header-items.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  BadgeModule,\r\n  DropdownModule,\r\n  ListboxModule,\r\n  OverlayPanelModule,\r\n  ButtonModule,\r\n  MenubarModule,\r\n  MenuModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/header-menu/header-menu.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    MenubarModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/messages/lib-messages.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    ToastModule,\r\n    MessageModule,\r\n    MessagesModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/radio-tile/lib-radio-tile.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    LibCardModule,\r\n    RadioButtonModule,\r\n    ButtonModule\r\n]"
            },
            {
                "name": "primeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/molecole/table/lib-table.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  TableModule,\r\n  PaginatorModule\r\n]"
            },
            {
                "name": "SecondaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    type: 'secondary',\r\n    size: '',\r\n    label: 'Prova',\r\n    icon: '',\r\n    disabled: false,\r\n    //@ts-ignore\r\n    onClick: (event: boolean) => { console.log(event) }\r\n  }\r\n}"
            },
            {
                "name": "sharedModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/src/lib/design-system.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  LibTagModule,\r\n  LibCardModule,\r\n  LibBreadcrumbModule,\r\n  LibButtonModule,\r\n  LibDropdownModule,\r\n  LibCalendarModule,\r\n  LibAutocompleteModule,\r\n  LibCheckboxModule,\r\n  LibRadioButtonModule,\r\n  LibChipModule,\r\n  LibTextareaModule,\r\n  InputFormModule,\r\n  LibInputModule,\r\n  LibBadgeModule,\r\n  LibDialogModule,\r\n  LibIconCircleModule,\r\n  LibTabsModule,\r\n  LibTableModule,\r\n  CtaBarModule,\r\n  HeaderItemsModule,\r\n  LibMessagesModule,\r\n  LibRadioTileModule,\r\n  LibFiltersModule,\r\n  HeaderMenuModule,\r\n  SidebarModule,\r\n  FileModule,\r\n  FileStatusModule,\r\n  LibTreeSelectModule,\r\n  LibProgressBarModule,\r\n  LibUploadFileModule,\r\n  LibChooseFileModule,\r\n  SwitchModule,\r\n  LibTreemenuModule,\r\n  PipesModule,\r\n  LibLoaderModule,\r\n  HeaderItemsModule,\r\n  LibAddressModule,\r\n  LibTimelineModule,\r\n  LibPickListModule,\r\n  LibListboxModule,\r\n  LibCircleStatusModule,\r\n  LibAccordionModule,\r\n  LibInplaceModule,\r\n  LibStepperModule,\r\n  LibPaginatorModule\r\n]"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ActionTable",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/design-system/src/lib/molecole/table/models/table.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "BreadcrumbConfig",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "BreadcrumbObject | BreadcrumbFunction | string",
                "file": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "BreadcrumbDefinition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "BreadcrumbFunction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/design-system/src/lib/atoms/breadcrumb/models/breadcrumb.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "PaginatorData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/design-system/src/lib/molecole/table/models/table.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "StoreMatcherKey",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"routeLink\" | \"routeRegex\" | \"alias\"",
                "file": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AccordionComponent>",
                "file": "projects/design-system/src/lib/atoms/accordion/components/accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AddressComponent>",
                "file": "projects/design-system/src/lib/atoms/address/components/address.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AutocompleteComponent>",
                "file": "projects/design-system/src/lib/atoms/autocomplete/components/autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BadgeComponent>",
                "file": "projects/design-system/src/lib/atoms/badge/components/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CalendarComponent>",
                "file": "projects/design-system/src/lib/atoms/calendar/components/calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CardComponent>",
                "file": "projects/design-system/src/lib/atoms/card/components/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CheckboxButtonComponent>",
                "file": "projects/design-system/src/lib/atoms/checkbox/components/checkbox-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ChipComponent>",
                "file": "projects/design-system/src/lib/atoms/chip/components/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ChooseFileComponent>",
                "file": "projects/design-system/src/lib/atoms/choose-file/components/choose-file.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CircleStatusComponent>",
                "file": "projects/design-system/src/lib/atoms/circle-status/components/circle-status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/design-system/src/lib/molecole/messages/models/messages.model.ts": [
                {
                    "name": "ALERTS_GENERAL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/messages/models/messages.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Messages",
                    "defaultValue": "{\r\n    success: { severity: 'success', summary: 'Titolo success', detail: 'Contenuto del messaggio success qui.' },\r\n    info: { severity: 'info', summary: 'Titolo info', detail: 'Contenuto del messaggio info qui.' },\r\n    error: { severity: 'error', summary: 'Titolo error', detail: 'Contenuto del messaggio error qui.' },\r\n    warn: { severity: 'warn', summary: 'Titolo warn', detail: 'Contenuto del messaggio warn qui.' },\r\n}"
                },
                {
                    "name": "MESSAGES_GENERAL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/messages/models/messages.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Messages",
                    "defaultValue": "{\r\n    success: { severity: 'success', summary: 'Titolo success', detail: 'Contenuto del messaggio success qui.' },\r\n    info: { severity: 'info', summary: 'Titolo info', detail: 'Contenuto del messaggio info qui.' },\r\n    error: { severity: 'error', summary: 'Titolo error', detail: 'Contenuto del messaggio error qui.' },\r\n    warn: { severity: 'warn', summary: 'Titolo warn', detail: 'Contenuto del messaggio warn qui.' },\r\n}"
                }
            ],
            "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts": [
                {
                    "name": "ALIAS_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'@'"
                },
                {
                    "name": "isNotEmpty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(obj: any): boolean => {\r\n    return obj && Object.keys(obj).length > 0;\r\n}"
                },
                {
                    "name": "PATH_PARAM",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    PREFIX: ':',\r\n    REGEX_IDENTIFIER: '/:[^/]+',\r\n    REGEX_REPLACER: '/[^/]+',\r\n}"
                }
            ],
            "projects/design-system/src/lib/atoms/accordion/components/accordion.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/accordion/components/accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    multiple: false,\r\n    index: 0,\r\n    sections: [{header: 'prova1'}, {header: 'prova2'}],\r\n    //@ts-ignore\r\n    //activeIndexChange: (event: any) => { this.index = event.args }\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/accordion/components/accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AccordionComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Atomi/Accordion',\r\n  // The component related to the Stories\r\n  component: AccordionComponent,\r\n  decorators: [\r\n    // The necessary modules for the component to work on Storybook\r\n    moduleMetadata({\r\n      imports: [CommonModule, LibAccordionModule, BrowserAnimationsModule],\r\n    }),\r\n  ]\r\n}"
                }
            ],
            "projects/design-system/src/lib/atoms/address/components/address.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/address/components/address.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    address: {code: 0, content: 'Via Roma, 22 - 71122 Foggia (FG)', name: 'Casa mia'},\r\n    //modify: true,\r\n    //@ts-ignore\r\n    onClick: () => { console.log('Modify') }\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/address/components/address.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AddressComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Atomi/Address',\r\n  // The component related to the Stories\r\n  component: AddressComponent,\r\n  decorators: [\r\n    // The necessary modules for the component to work on Storybook\r\n    moduleMetadata({\r\n      imports: [CommonModule, LibAddressModule],\r\n    }),\r\n  ]\r\n}"
                }
            ],
            "projects/design-system/src/lib/atoms/autocomplete/components/autocomplete.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/autocomplete/components/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    valueAutocomplete: [''],\r\n    placeholder: '',\r\n    value: '',\r\n    label: 'cc',\r\n    icon: '',\r\n    disabled: false,\r\n    showClear: false,\r\n    field: '',\r\n    minLength: 3,\r\n    //@ts-ignore\r\n    onChange: (event: any) => { console.log(event) }\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/autocomplete/components/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AutocompleteComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Atomi/Autocomplete',\r\n  // The component related to the Stories\r\n  component: AutocompleteComponent,\r\n  decorators: [\r\n    // The necessary modules for the component to work on Storybook\r\n    moduleMetadata({\r\n      imports: [CommonModule, LibAutocompleteModule, BrowserAnimationsModule],\r\n    }),\r\n  ],\r\n}"
                }
            ],
            "projects/design-system/src/lib/atoms/badge/components/badge.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/badge/components/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    menuBadge: '0'\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/badge/components/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<BadgeComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Atomi/Badge',\r\n    // The component related to the Stories\r\n    component: BadgeComponent,\r\n    decorators: [\r\n        // The necessary modules for the component to work on Storybook\r\n        moduleMetadata({\r\n             imports: [ CommonModule, LibBadgeModule],\r\n        }),\r\n    ]\r\n}"
                }
            ],
            "projects/design-system/src/lib/atoms/calendar/components/calendar.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/calendar/components/calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    value: null,\r\n    label: '',\r\n    disabled: false,\r\n    inlineCal: false,\r\n    showIcon: true,\r\n    dropdownMode: false,\r\n    showButtonBar: false,\r\n    selectionType: 'single',\r\n    placeholder: 'Data',\r\n    minDate: null,\r\n    maxDate: null,\r\n    defaultDateFormat: 'dd-mm-yy',\r\n    highlightedDays: [],\r\n    firstDayOfWeek: null,\r\n    disabledDays: [],\r\n    timeOnly: false,\r\n    dataType: 'date',\r\n    //@ts-ignore\r\n    onSelect: (event: any) => { console.log(event) }\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/calendar/components/calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CalendarComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Atomi/Calendar',\r\n  // The component related to the Stories\r\n  component: CalendarComponent,\r\n  decorators: [\r\n    // The necessary modules for the component to work on Storybook\r\n    moduleMetadata({\r\n      imports: [CommonModule, LibCalendarModule, BrowserAnimationsModule],\r\n    }),\r\n  ]\r\n}"
                }
            ],
            "projects/design-system/src/lib/atoms/card/components/card.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/card/components/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    cHeader: 'Prova',\r\n    cSubHeader: 'Prova sottotitolo',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: ` \r\n  <lib-card [cHeader]=\"\" [cSubHeader]=\"\" [cStyle]=\"style\" [cStyleClass]=\"styleClass\">     \r\n      <div cTitleTemplate>${args.cHeader}</div>\r\n      <div cSubtitleTemplate>${args.cSubHeader}</div>\r\n      <div cContentTemplate>Questo è il contenuto di una card</div>\r\n      <div cFooterTemplate>Questo è il footer di una card</div>\r\n  </lib-card>\r\n `})\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/card/components/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CardComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Atomi/Card',\r\n  // The component related to the Stories\r\n  component: CardComponent,\r\n  decorators: [\r\n    // The necessary modules for the component to work on Storybook\r\n    moduleMetadata({\r\n      imports: [CommonModule, CardModule],\r\n    }),\r\n  ]\r\n}"
                }
            ],
            "projects/design-system/src/lib/atoms/checkbox/components/checkbox-button.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/checkbox/components/checkbox-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/checkbox/components/checkbox-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CheckboxButtonComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Atomi/Checkbox',\r\n    // The component related to the Stories\r\n    component: CheckboxButtonComponent,\r\n    decorators: [\r\n        // The necessary modules for the component to work on Storybook\r\n        moduleMetadata({\r\n             imports: [ CommonModule, LibCheckboxModule],\r\n        }),\r\n    ]\r\n}"
                }
            ],
            "projects/design-system/src/lib/atoms/chip/components/chip.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/chip/components/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    \r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/chip/components/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ChipComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Atomi/Chip',\r\n    // The component related to the Stories\r\n    component: ChipComponent,\r\n    decorators: [\r\n        // The necessary modules for the component to work on Storybook\r\n        moduleMetadata({\r\n             imports: [ CommonModule, LibChipModule],\r\n        }),\r\n    ]\r\n}"
                }
            ],
            "projects/design-system/src/lib/atoms/choose-file/components/choose-file.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/choose-file/components/choose-file.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/choose-file/components/choose-file.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ChooseFileComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Atomi/Choose file',\r\n    // The component related to the Stories\r\n    component: ChooseFileComponent,\r\n    decorators: [\r\n        // The necessary modules for the component to work on Storybook\r\n        moduleMetadata({\r\n             imports: [ CommonModule, LibChooseFileModule, HttpClientModule],\r\n        }),\r\n    ]\r\n}"
                }
            ],
            "projects/design-system/src/lib/atoms/circle-status/components/circle-status.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/circle-status/components/circle-status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/circle-status/components/circle-status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CircleStatusComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Atomi/Circle status',\r\n    // The component related to the Stories\r\n    component: CircleStatusComponent,\r\n    decorators: [\r\n        // The necessary modules for the component to work on Storybook\r\n        moduleMetadata({\r\n             imports: [ CommonModule, LibCircleStatusModule],\r\n        }),\r\n    ]\r\n}"
                }
            ],
            "projects/design-system/src/lib/atoms/accordion/lib-accordion.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/accordion/lib-accordion.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  AccordionComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/accordion/lib-accordion.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/address/lib-address.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/address/lib-address.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    AddressComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/address/lib-address.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/autocomplete/lib-autocomplete.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/autocomplete/lib-autocomplete.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    AutocompleteComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/autocomplete/lib-autocomplete.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    AutoCompleteModule,\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/autocomplete-card/lib-autocomplete-card.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/autocomplete-card/lib-autocomplete-card.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    AutocompleteCardComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/autocomplete-card/lib-autocomplete-card.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    AutoCompleteModule,\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/badge/lib-badge.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/badge/lib-badge.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  BadgeComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/badge/lib-badge.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  BadgeModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/breadcrumb/lib-breadcrumb.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/breadcrumb/lib-breadcrumb.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    BreadcrumbComponent,\r\n    BreadcrumbItemDirective\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/button/lib-button.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/button/lib-button.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  ButtonComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/button/lib-button.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  ButtonModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/calendar/lib-calendar.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/calendar/lib-calendar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    CalendarComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/calendar/lib-calendar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    CalendarModule,\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/card/lib-card.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/card/lib-card.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  CardComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/card/lib-card.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  CardModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/checkbox/lib-checkbox.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/checkbox/lib-checkbox.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    CheckboxButtonComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/checkbox/lib-checkbox.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    CheckboxModule,\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/chip/lib-chip.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/chip/lib-chip.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    ChipComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/chip/lib-chip.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    ChipModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/choose-file/choose-file.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/choose-file/choose-file.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    ChooseFileComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/choose-file/choose-file.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    FileUploadModule,\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/circle-status/lib-circle-status.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/circle-status/lib-circle-status.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    CircleStatusComponent\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/dialog/lib-dialog.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/dialog/lib-dialog.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    DialogComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/dialog/lib-dialog.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    DialogModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/dropdown/lib-dropdown.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/dropdown/lib-dropdown.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  DropdownComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/dropdown/lib-dropdown.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  DropdownModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/error-inline/lib-error-inline.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/error-inline/lib-error-inline.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    ErrorInlineComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/error-inline/lib-error-inline.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    CommonModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/icon-circle/lib-icon-circle.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/icon-circle/lib-icon-circle.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    IconCircleComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/icon-circle/lib-icon-circle.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    TooltipModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/inplace/lib-inplace.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/inplace/lib-inplace.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  InplaceComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/inplace/lib-inplace.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  InplaceModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/input/lib-input.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/input/lib-input.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  InputComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/input/lib-input.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  InputTextModule,\r\n  InputNumberModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/input-form/input-form.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/input-form/input-form.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    InputFormComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/input-form/input-form.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    LibDropdownModule,\r\n    LibCalendarModule,\r\n    LibAutocompleteModule,\r\n    LibCheckboxModule,\r\n    LibRadioButtonModule,\r\n    LibTextareaModule,\r\n    LibInputModule,\r\n    LibErrorInlineModule,\r\n    LibChooseFileModule,\r\n    LibAutocompleteCardModule,\r\n    LibListboxModule,\r\n    LibMultiSelectModule,\r\n    LibButtonModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/listbox/lib-listbox.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/listbox/lib-listbox.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  ListboxComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/listbox/lib-listbox.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  ListboxModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/loader/lib-loader.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/loader/lib-loader.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    LoaderComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/loader/lib-loader.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    ProgressSpinnerModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/multi-select/lib-multi-select.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/multi-select/lib-multi-select.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    MultiSelectComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/multi-select/lib-multi-select.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    MultiSelectModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/paginator/lib-paginator.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/paginator/lib-paginator.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  PaginatorComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/paginator/lib-paginator.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/pick-list/lib-pick-list.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/pick-list/lib-pick-list.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    PickListComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/pick-list/lib-pick-list.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    PickListModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/progress-bar/lib-progress-bar.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/progress-bar/lib-progress-bar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    ProgressBarComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/progress-bar/lib-progress-bar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    ProgressBarModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/radio-button/lib-radio-button.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/radio-button/lib-radio-button.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  RadioButtonComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/radio-button/lib-radio-button.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  RadioButtonModule,\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/sidebar/sidebar.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/sidebar/sidebar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    SidebarComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/sidebar/sidebar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    PanelMenuModule,\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/stepper/lib-stepper.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/stepper/lib-stepper.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  StepperComponent\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/stepper/lib-stepper.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  StepsModule,\n\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/switch/switch.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/switch/switch.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    SwitchComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/switch/switch.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    InputSwitchModule,\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/tabs/lib-tabs.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/tabs/lib-tabs.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    TabsComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/tabs/lib-tabs.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    TabViewModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/tag/lib-tag.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/tag/lib-tag.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  TagComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/tag/lib-tag.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  TagModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/textarea/lib-textarea.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/textarea/lib-textarea.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  TextareaComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/textarea/lib-textarea.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  InputTextareaModule,\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/timeline/lib-timeline.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/timeline/lib-timeline.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    TimelineComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/timeline/lib-timeline.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    TimelineModule,\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/tree-select/lib-tree-select.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/tree-select/lib-tree-select.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  TreeSelectComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/tree-select/lib-tree-select.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  TreeSelectModule,\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/treemenu/lib-treemenu.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/treemenu/lib-treemenu.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    TreemenuComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/treemenu/lib-treemenu.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    TreeModule,\r\n\r\n]"
                }
            ],
            "projects/design-system/src/lib/micro-organismi/filters/lib-filters.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/micro-organismi/filters/lib-filters.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    FiltersComponent,\r\n    FiltersChipsComponent,\r\n    OnlyFiltersComponent,\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/micro-organismi/filters/lib-filters.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    LibTreeSelectModule,\r\n    LibChipModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/molecole/cta-bar/cta-bar.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/cta-bar/cta-bar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    CtaBarComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/cta-bar/cta-bar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    ButtonModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/molecole/file/file.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/file/file.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    FileComponent\r\n]"
                }
            ],
            "projects/design-system/src/lib/molecole/file-status/file-status.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/file-status/file-status.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    FileStatusComponent\r\n]"
                }
            ],
            "projects/design-system/src/lib/molecole/header-items/header-items.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/header-items/header-items.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  CartComponent,\r\n  HeaderActionsComponent,\r\n  LogoComponent,\r\n  SearchBarComponent,\r\n  LanguageSelectorComponent,\r\n  HeaderNotificationsComponent,\r\n  HeaderMenuUserComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/header-items/header-items.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  BadgeModule,\r\n  DropdownModule,\r\n  ListboxModule,\r\n  OverlayPanelModule,\r\n  ButtonModule,\r\n  MenubarModule,\r\n  MenuModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/molecole/header-menu/header-menu.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/header-menu/header-menu.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    HeaderMenuComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/header-menu/header-menu.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    MenubarModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/molecole/messages/lib-messages.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/messages/lib-messages.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    ToastComponent,\r\n    MessagesComponent,\r\n    MessageComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/messages/lib-messages.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    ToastModule,\r\n    MessageModule,\r\n    MessagesModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/molecole/radio-tile/lib-radio-tile.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/radio-tile/lib-radio-tile.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    RadioTileComponent\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/radio-tile/lib-radio-tile.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    LibCardModule,\r\n    RadioButtonModule,\r\n    ButtonModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/molecole/table/lib-table.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/table/lib-table.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  ActionsTableComponent,\r\n  TableComponent,\r\n]"
                },
                {
                    "name": "primeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/table/lib-table.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  TableModule,\r\n  PaginatorModule\r\n]"
                }
            ],
            "projects/design-system/src/lib/molecole/upload-file/lib-upload-file.module.ts": [
                {
                    "name": "exportComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/molecole/upload-file/lib-upload-file.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n   UploadFileComponent\r\n]"
                }
            ],
            "projects/design-system/src/lib/atoms/button/components/button.stories.ts": [
                {
                    "name": "LinkButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    type: 'link',\r\n    size: '',\r\n    label: 'Prova',\r\n    icon: '',\r\n    disabled: false,\r\n    //@ts-ignore\r\n    onClick: (event: boolean) => { console.log(event) }\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Atomi/Button',\r\n  // The component related to the Stories\r\n  component: ButtonComponent,\r\n  decorators: [\r\n    // The necessary modules for the component to work on Storybook\r\n    moduleMetadata({\r\n      declarations: [ButtonComponent],\r\n      imports: [CommonModule, ButtonModule],\r\n    }),\r\n  ],\r\n  argTypes: {\r\n    type: {\r\n      control: {\r\n        type: 'select',\r\n      },\r\n      options: ['', 'secondary', 'secondary-rounded', 'rounded', 'link', 'link-icon'],\r\n    },\r\n    size: {\r\n      control: {\r\n        type: 'select',\r\n      },\r\n      options: ['', 'small', 'big'],\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "PrimaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    type: 'primary',\r\n    size: '',\r\n    label: 'Prova',\r\n    icon: '',\r\n    disabled: false,\r\n    //@ts-ignore\r\n    onClick: (event: boolean) => { console.log(event) }\r\n  }\r\n}"
                },
                {
                    "name": "SecondaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    type: 'secondary',\r\n    size: '',\r\n    label: 'Prova',\r\n    icon: '',\r\n    disabled: false,\r\n    //@ts-ignore\r\n    onClick: (event: boolean) => { console.log(event) }\r\n  }\r\n}"
                }
            ],
            "projects/design-system/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
                }
            ],
            "projects/design-system/src/lib/design-system.module.ts": [
                {
                    "name": "sharedModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/src/lib/design-system.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  LibTagModule,\r\n  LibCardModule,\r\n  LibBreadcrumbModule,\r\n  LibButtonModule,\r\n  LibDropdownModule,\r\n  LibCalendarModule,\r\n  LibAutocompleteModule,\r\n  LibCheckboxModule,\r\n  LibRadioButtonModule,\r\n  LibChipModule,\r\n  LibTextareaModule,\r\n  InputFormModule,\r\n  LibInputModule,\r\n  LibBadgeModule,\r\n  LibDialogModule,\r\n  LibIconCircleModule,\r\n  LibTabsModule,\r\n  LibTableModule,\r\n  CtaBarModule,\r\n  HeaderItemsModule,\r\n  LibMessagesModule,\r\n  LibRadioTileModule,\r\n  LibFiltersModule,\r\n  HeaderMenuModule,\r\n  SidebarModule,\r\n  FileModule,\r\n  FileStatusModule,\r\n  LibTreeSelectModule,\r\n  LibProgressBarModule,\r\n  LibUploadFileModule,\r\n  LibChooseFileModule,\r\n  SwitchModule,\r\n  LibTreemenuModule,\r\n  PipesModule,\r\n  LibLoaderModule,\r\n  HeaderItemsModule,\r\n  LibAddressModule,\r\n  LibTimelineModule,\r\n  LibPickListModule,\r\n  LibListboxModule,\r\n  LibCircleStatusModule,\r\n  LibAccordionModule,\r\n  LibInplaceModule,\r\n  LibStepperModule,\r\n  LibPaginatorModule\r\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/design-system/src/lib/molecole/table/models/table.model.ts": [
                {
                    "name": "ActionTable",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/design-system/src/lib/molecole/table/models/table.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "PaginatorData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/design-system/src/lib/molecole/table/models/table.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts": [
                {
                    "name": "BreadcrumbConfig",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "BreadcrumbObject | BreadcrumbFunction | string",
                    "file": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "BreadcrumbDefinition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "StoreMatcherKey",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"routeLink\" | \"routeRegex\" | \"alias\"",
                    "file": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/design-system/src/lib/atoms/breadcrumb/models/breadcrumb.model.ts": [
                {
                    "name": "BreadcrumbFunction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/design-system/src/lib/atoms/breadcrumb/models/breadcrumb.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/design-system/src/lib/atoms/accordion/components/accordion.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AccordionComponent>",
                    "file": "projects/design-system/src/lib/atoms/accordion/components/accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/design-system/src/lib/atoms/address/components/address.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AddressComponent>",
                    "file": "projects/design-system/src/lib/atoms/address/components/address.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/design-system/src/lib/atoms/autocomplete/components/autocomplete.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AutocompleteComponent>",
                    "file": "projects/design-system/src/lib/atoms/autocomplete/components/autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/design-system/src/lib/atoms/badge/components/badge.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BadgeComponent>",
                    "file": "projects/design-system/src/lib/atoms/badge/components/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/design-system/src/lib/atoms/button/components/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/design-system/src/lib/atoms/calendar/components/calendar.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CalendarComponent>",
                    "file": "projects/design-system/src/lib/atoms/calendar/components/calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/design-system/src/lib/atoms/card/components/card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CardComponent>",
                    "file": "projects/design-system/src/lib/atoms/card/components/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/design-system/src/lib/atoms/checkbox/components/checkbox-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CheckboxButtonComponent>",
                    "file": "projects/design-system/src/lib/atoms/checkbox/components/checkbox-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/design-system/src/lib/atoms/chip/components/chip.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ChipComponent>",
                    "file": "projects/design-system/src/lib/atoms/chip/components/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/design-system/src/lib/atoms/choose-file/components/choose-file.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ChooseFileComponent>",
                    "file": "projects/design-system/src/lib/atoms/choose-file/components/choose-file.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/design-system/src/lib/atoms/circle-status/components/circle-status.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CircleStatusComponent>",
                    "file": "projects/design-system/src/lib/atoms/circle-status/components/circle-status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "projects/design-system/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/accordion/components/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/accordion/components/accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/accordion/components/accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/accordion/lib-accordion.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/accordion/lib-accordion.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/accordion/models/accordion.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccordionData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/address/components/address.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/address/components/address.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/address/components/address.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/address/lib-address.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/address/lib-address.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/address/models/address.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LibAddress",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/autocomplete-card/components/autocomplete-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutocompleteCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/autocomplete-card/lib-autocomplete-card.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/autocomplete-card/lib-autocomplete-card.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/autocomplete/components/autocomplete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutocompleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/autocomplete/components/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/autocomplete/components/autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/autocomplete/lib-autocomplete.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/autocomplete/lib-autocomplete.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/badge/components/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/badge/components/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/badge/components/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/badge/lib-badge.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/badge/lib-badge.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/breadcrumb/components/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 46,
                "coverageCount": "7/15",
                "status": "medium"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/breadcrumb/directives/breadcrumb.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BreadcrumbItemDirective",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/breadcrumb/lib-breadcrumb.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/breadcrumb/models/breadcrumb.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BreadcrumbModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/breadcrumb/models/breadcrumb.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Breadcrumb",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/breadcrumb/models/breadcrumb.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BreadcrumbObject",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BreadcrumbService",
                "coveragePercent": 55,
                "coverageCount": "15/27",
                "status": "good"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALIAS_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNotEmpty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/breadcrumb/services/breadcrumb.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PATH_PARAM",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/button/components/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LinkButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/button/components/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/button/lib-button.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/button/lib-button.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/calendar/components/calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/calendar/components/calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/calendar/components/calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/calendar/lib-calendar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/calendar/lib-calendar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/card/components/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/card/components/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/card/components/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/card/lib-card.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/card/lib-card.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/checkbox/components/checkbox-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/checkbox/components/checkbox-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/checkbox/components/checkbox-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/checkbox/lib-checkbox.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/checkbox/lib-checkbox.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/checkbox/models/checkbox.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckBox",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/chip/components/chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/chip/components/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/chip/components/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/chip/lib-chip.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/chip/lib-chip.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/choose-file/choose-file.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/choose-file/choose-file.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/choose-file/components/choose-file.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChooseFileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/choose-file/components/choose-file.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/choose-file/components/choose-file.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/circle-status/components/circle-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CircleStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/circle-status/components/circle-status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/circle-status/components/circle-status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/circle-status/lib-circle-status.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/dialog/components/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/dialog/lib-dialog.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/dialog/lib-dialog.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/dropdown/components/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/dropdown/lib-dropdown.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/dropdown/lib-dropdown.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/dropdown/models/dropdown.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DropdownType",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/error-inline/components/error-inline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorInlineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/error-inline/lib-error-inline.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/error-inline/lib-error-inline.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/icon-circle/components/icon-circle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconCircleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/icon-circle/lib-icon-circle.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/icon-circle/lib-icon-circle.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/inplace/components/inplace.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InplaceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/inplace/lib-inplace.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/inplace/lib-inplace.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/input-form/components/input-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/60",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/input-form/custom-validators/custom-validators.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomValidators",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/input-form/input-form.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/input-form/input-form.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/input/components/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/input/lib-input.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/input/lib-input.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/listbox/components/listbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/listbox/lib-listbox.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/listbox/lib-listbox.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/loader/components/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/loader/lib-loader.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/loader/lib-loader.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/loader/services/loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/multi-select/components/multi-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/multi-select/lib-multi-select.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/multi-select/lib-multi-select.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/paginator/components/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/paginator/lib-paginator.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/paginator/lib-paginator.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/paginator/models/paginator.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PageEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/pick-list/components/pick-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PickListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/pick-list/lib-pick-list.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/pick-list/lib-pick-list.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/progress-bar/components/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/progress-bar/lib-progress-bar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/progress-bar/lib-progress-bar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/radio-button/components/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/radio-button/lib-radio-button.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/radio-button/lib-radio-button.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/radio-button/models/radio.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RadioModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/sidebar/components/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/sidebar/models/sidebar-item.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SidebarItem",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/sidebar/sidebar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/sidebar/sidebar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/stepper/components/stepper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StepperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/stepper/lib-stepper.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/stepper/lib-stepper.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/switch/components/switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/switch/switch.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/switch/switch.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/tabs/components/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/tabs/lib-tabs.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/tabs/lib-tabs.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/tabs/models/tabs.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Tabs",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/tag/components/tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/tag/lib-tag.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/tag/lib-tag.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/textarea/components/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/textarea/lib-textarea.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/textarea/lib-textarea.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/timeline/components/timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/timeline/lib-timeline.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/timeline/lib-timeline.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/tree-select/components/tree-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/tree-select/lib-tree-select.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/tree-select/lib-tree-select.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/tree-select/models/tree-select.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TreeSelectModel",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/treemenu/components/treemenu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreemenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/treemenu/lib-treemenu.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/treemenu/lib-treemenu.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/atoms/treemenu/models/treemenu.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TreeMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/design-system.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sharedModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/micro-organismi/filters/components/filters-chips/filters-chips.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FiltersChipsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/micro-organismi/filters/components/filters/filters.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FiltersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/micro-organismi/filters/components/only-filters/only-filters.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OnlyFiltersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/42",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/micro-organismi/filters/lib-filters.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/micro-organismi/filters/lib-filters.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/micro-organismi/filters/models/filters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FiltersChip",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/micro-organismi/filters/models/filters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FiltersData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/micro-organismi/filters/models/filters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FiltersModel",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/micro-organismi/filters/models/filters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FiltersResult",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/micro-organismi/filters/models/filters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OnlyFiltersChip",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/micro-organismi/filters/models/filters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OnlyFiltersModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/micro-organismi/filters/services/filters.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FiltersService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/cta-bar/components/cta-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CtaBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/cta-bar/cta-bar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/cta-bar/cta-bar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/file-status/components/file-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/file-status/file-status.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/file-status/models/fileStatus.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileStatus",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/file/components/file.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/file/file.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/file/models/file.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "File",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/components/cart/cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/components/header-actions/header-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/components/header-menu-user/header-menu-user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderMenuUserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/components/header-notifications/header-notifications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderNotificationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/components/language-selector/language-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LanguageSelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/components/logo/logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/components/search-bar/search-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/header-items.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/header-items.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/models/language.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Language",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/models/menuItem.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "link",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/models/menuItem.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/models/user-notification.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserNotification",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-items/services/header-items.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HeaderItemsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-menu/components/header-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-menu/header-menu.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-menu/header-menu.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/header-menu/models/menu-item.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenubarItem",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/messages/components/message/message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/messages/components/messages/messages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessagesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/messages/components/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/messages/lib-messages.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/messages/lib-messages.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/messages/models/messages.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Messages",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/messages/models/messages.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALERTS_GENERAL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/messages/models/messages.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MESSAGES_GENERAL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/radio-tile/components/radio-tile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioTileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/radio-tile/lib-radio-tile.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/radio-tile/lib-radio-tile.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/radio-tile/models/radio-tile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RadioTile",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/table/components/actions-table/actions-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionsTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/table/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/50",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/table/lib-table.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/table/lib-table.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/table/models/table.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Cols",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/table/services/lib-table.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LibTableService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/upload-file/components/upload-file.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UploadFileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/upload-file/lib-upload-file.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/molecole/upload-file/models/file-upload.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileUpload",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/pipes/byte.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BytePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/src/lib/pipes/safe.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}